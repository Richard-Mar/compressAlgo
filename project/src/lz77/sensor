Help on package torch:

NNAAMMEE
    torch

DDEESSCCRRIIPPTTIIOONN
    The torch package contains data structures for multi-dimensional
    tensors and defines mathematical operations over these tensors.
    Additionally, it provides many utilities for efficient serializing of
    Tensors and arbitrary types, and other useful utilities.
    
    It has a CUDA counterpart, that enables you to run your tensor computations
    on an NVIDIA GPU with compute capability >= 3.0.

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    _C
    _VF
    __config__
    __future__
    _appdirs
    _autograd_functions
    _classes
    _dl
    _jit_internal
    _linalg_utils
    _lobpcg
    _lowrank
    _namedtensor_internals
    _ops
    _python_dispatcher
    _six
    _storage_docs
    _tensor_docs
    _tensor_str
    _torch_docs
    _utils
    _utils_internal
    _vmap_internals
    autograd (package)
    backends (package)
    contrib (package)
    cuda (package)
    distributed (package)
    distributions (package)
    fft (package)
    for_onnx (package)
    functional
    futures (package)
    fx (package)
    hub
    jit (package)
    linalg (package)
    multiprocessing (package)
    nn (package)
    onnx (package)
    optim (package)
    overrides
    package (package)
    profiler (package)
    quantization (package)
    quasirandom
    random
    serialization
    sparse (package)
    storage
    tensor
    testing (package)
    types
    utils (package)
    version

SSUUBBMMOODDUULLEESS
    classes
    cpp
    ops

CCLLAASSSSEESS
    builtins.Exception(builtins.BaseException)
        FatalError
        torch.jit.Error
    builtins.object
        BoolTensor
        ByteTensor
        CharTensor
        DoubleTensor
        FloatTensor
        IntTensor
        LongTensor
        ShortTensor
        Stream
        device
        dtype
        finfo
        iinfo
        layout
        memory_format
        qscheme
        torch._C.DisableTorchFunction
        torch._C.Generator
    builtins.tuple(builtins.object)
        Size
    pybind11_builtins.pybind11_object(builtins.object)
        torch._C.AggregationType
        torch._C.Argument
        torch._C.ArgumentSpec
        torch._C.BenchmarkConfig
        torch._C.BenchmarkExecutionStats
        torch._C.Block
        torch._C.BufferDict
        torch._C.CallStack
        torch._C.Capsule
        torch._C.Code
        torch._C.CompleteArgumentSpec
        torch._C.ConcreteModuleType
        torch._C.ConcreteModuleTypeBuilder
        torch._C.DeepCopyMemoTable
        torch._C.ErrorReport
        torch._C.ExecutionPlan
        torch._C.FileCheck
        torch._C.FunctionSchema
        torch._C.Future
        torch._C.Gradient
        torch._C.Graph
        torch._C.GraphExecutorState
        torch._C.IODescriptor
        torch._C.InferredType
        torch._C.LiteScriptModule
        torch._C.MobileOptimizerType
        torch._C.ModuleDict
        torch._C.Node
        torch._C.ParameterDict
        torch._C.PyTorchFileReader
        torch._C.PyTorchFileWriter
        torch._C.ScriptClass
        torch._C.ScriptMethod
        torch._C.ScriptObject
            torch._C.ScriptModule
        torch._C.StaticRuntime
        torch._C.ThroughputBenchmark
        torch._C.TracingState
        torch._C.Type
            torch._C.AnyType
            torch._C.BoolType
            torch._C.ClassType
            torch._C.ComplexType
            torch._C.DeviceObjType
            torch._C.DictType
            torch._C.EnumType
            torch._C.FloatType
            torch._C.FutureType
            torch._C.IntType
            torch._C.InterfaceType
            torch._C.ListType
            torch._C.NoneType
            torch._C.NumberType
            torch._C.OptionalType
            torch._C.PyObjectType
            torch._C.RRefType
            torch._C.StreamObjType
            torch._C.StringType
            torch._C.TensorType
            torch._C.TupleType
        torch._C.Use
        torch._C.Value
        torch.jit.CompilationUnit
        torch.jit.ScriptFunction
    torch._C.BoolStorageBase(builtins.object)
        BoolStorage(torch._C.BoolStorageBase, torch.storage._StorageBase)
    torch._C.ByteStorageBase(builtins.object)
        ByteStorage(torch._C.ByteStorageBase, torch.storage._StorageBase)
    torch._C.CharStorageBase(builtins.object)
        CharStorage(torch._C.CharStorageBase, torch.storage._StorageBase)
    torch._C.DoubleStorageBase(builtins.object)
        DoubleStorage(torch._C.DoubleStorageBase, torch.storage._StorageBase)
    torch._C.FloatStorageBase(builtins.object)
        FloatStorage(torch._C.FloatStorageBase, torch.storage._StorageBase)
    torch._C.IntStorageBase(builtins.object)
        IntStorage(torch._C.IntStorageBase, torch.storage._StorageBase)
    torch._C.LoggerBase(pybind11_builtins.pybind11_object)
        torch._C.LockingLogger
        torch._C.NoopLogger
    torch._C.LongStorageBase(builtins.object)
        LongStorage(torch._C.LongStorageBase, torch.storage._StorageBase)
    torch._C.ShortStorageBase(builtins.object)
        ShortStorage(torch._C.ShortStorageBase, torch.storage._StorageBase)
    torch._C._TensorBase(builtins.object)
        Tensor
    torch.autograd.grad_mode._DecoratorContextManager(builtins.object)
        torch.autograd.grad_mode.enable_grad
        torch.autograd.grad_mode.no_grad
    torch.storage._StorageBase(builtins.object)
        BoolStorage(torch._C.BoolStorageBase, torch.storage._StorageBase)
        ByteStorage(torch._C.ByteStorageBase, torch.storage._StorageBase)
        CharStorage(torch._C.CharStorageBase, torch.storage._StorageBase)
        DoubleStorage(torch._C.DoubleStorageBase, torch.storage._StorageBase)
        FloatStorage(torch._C.FloatStorageBase, torch.storage._StorageBase)
        IntStorage(torch._C.IntStorageBase, torch.storage._StorageBase)
        LongStorage(torch._C.LongStorageBase, torch.storage._StorageBase)
        ShortStorage(torch._C.ShortStorageBase, torch.storage._StorageBase)
    
    class AAggggrreeggaattiioonnTTyyppee(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  SUM
     |  
     |  AVG
     |  
     |  Method resolution order:
     |      AggregationType
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: object, other: object) -> bool
     |  
     |  ____ggeettssttaattee____(...)
     |      __getstate__(self: object) -> int
     |  
     |  ____hhaasshh____(...)
     |      __hash__(self: object) -> int
     |  
     |  ____iinnddeexx____(...)
     |      __index__(self: torch._C.AggregationType) -> int
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.AggregationType, value: int) -> None
     |  
     |  ____iinntt____(...)
     |      __int__(self: torch._C.AggregationType) -> int
     |  
     |  ____nnee____(...)
     |      __ne__(self: object, other: object) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: object) -> str
     |  
     |  ____sseettssttaattee____(...)
     |      __setstate__(self: torch._C.AggregationType, state: int) -> None
     |  
     |  ____ssttrr____ = name(...)
     |      name(self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____mmeemmbbeerrss____
     |  
     |  nnaammee
     |      name(self: handle) -> str
     |  
     |  vvaalluuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  AAVVGG = <AggregationType.AVG: 1>
     |  
     |  SSUUMM = <AggregationType.SUM: 0>
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class AAnnyyTTyyppee(Type)
     |  Method resolution order:
     |      AnyType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.AnyType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class AArrgguummeenntt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Argument
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  hhaass__ddeeffaauulltt__vvaalluuee(...)
     |      has_default_value(self: torch._C.Argument) -> bool_
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  NN
     |  
     |  ddeeffaauulltt__vvaalluuee
     |  
     |  nnaammee
     |  
     |  ttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class AArrgguummeennttSSppeecc(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ArgumentSpec
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class BBeenncchhmmaarrkkCCoonnffiigg(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      BenchmarkConfig
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.BenchmarkConfig) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  nnuumm__ccaalllliinngg__tthhrreeaaddss
     |  
     |  nnuumm__iitteerrss
     |  
     |  nnuumm__wwaarrmmuupp__iitteerrss
     |  
     |  nnuumm__wwoorrkkeerr__tthhrreeaaddss
     |  
     |  pprrooffiilleerr__oouuttppuutt__ppaatthh
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class BBeenncchhmmaarrkkEExxeeccuuttiioonnSSttaattss(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      BenchmarkExecutionStats
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  llaatteennccyy__aavvgg__mmss
     |  
     |  nnuumm__iitteerrss
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class BBlloocckk(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Block
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aaddddIInnppuuttTTooBBlloocckk(...)
     |      addInputToBlock(self: torch._C.Block) -> torch._C.Value
     |  
     |  aaddddNNooddee(...)
     |      addNode(self: torch._C.Block, arg0: str, arg1: List[torch._C.Value]) -> torch::jit::Node
     |  
     |  ffiinnddAAllllNNooddeess(...)
     |      findAllNodes(self: torch._C.Block, kind: str, recurse: bool = True) -> List[torch::jit::Node]
     |      
     |      Find all nodes
     |  
     |  ffiinnddNNooddee(...)
     |      findNode(self: torch._C.Block, kind: str, recurse: bool = True) -> torch::jit::Node
     |      
     |      Find Node
     |  
     |  iinnppuuttss(...)
     |      inputs(self: torch._C.Block) -> Iterator
     |  
     |  nnooddeess(...)
     |      nodes(self: torch._C.Block) -> Iterator
     |  
     |  oouuttppuuttss(...)
     |      outputs(self: torch._C.Block) -> Iterator
     |  
     |  ppaarraammNNooddee(...)
     |      paramNode(self: torch._C.Block) -> torch::jit::Node
     |  
     |  rreeggiisstteerrOOuuttppuutt(...)
     |      registerOutput(self: torch._C.Block, arg0: torch._C.Value) -> int
     |  
     |  rreettuurrnnNNooddee(...)
     |      returnNode(self: torch._C.Block) -> torch::jit::Node
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class BBoooollSSttoorraaggee(torch._C.BoolStorageBase, torch.storage._StorageBase)
     |  BoolStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      BoolStorage
     |      torch._C.BoolStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.BoolStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.BoolStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.BoolStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class BBoooollTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.bool
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class BBoooollTTyyppee(Type)
     |  Method resolution order:
     |      BoolType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.BoolType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class BBuuffffeerrDDiicctt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      BufferDict
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.BufferDict, arg0: torch._C.ScriptModule) -> None
     |  
     |  ccoonnttaaiinnss(...)
     |      contains(self: torch._C.BufferDict, arg0: str) -> bool
     |  
     |  ggeettaattttrr(...)
     |      getattr(self: torch._C.BufferDict, arg0: str) -> object
     |  
     |  iitteemmss(...)
     |      items(self: torch._C.BufferDict) -> List[Tuple[str, object]]
     |  
     |  sseettaattttrr(...)
     |      setattr(self: torch._C.BufferDict, arg0: str, arg1: object) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class BByytteeSSttoorraaggee(torch._C.ByteStorageBase, torch.storage._StorageBase)
     |  ByteStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      ByteStorage
     |      torch._C.ByteStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.ByteStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.ByteStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.ByteStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class BByytteeTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.uint8
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class CCaallllSSttaacckk(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      CallStack
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.CallStack, arg0: str, arg1: torch._C._jit_tree_views.SourceRange) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CCaappssuullee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Capsule
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CChhaarrSSttoorraaggee(torch._C.CharStorageBase, torch.storage._StorageBase)
     |  CharStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      CharStorage
     |      torch._C.CharStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.CharStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.CharStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.CharStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class CChhaarrTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.int8
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class CCllaassssTTyyppee(Type)
     |  Method resolution order:
     |      ClassType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.ClassType, arg0: str) -> None
     |  
     |  nnaammee(...)
     |      name(self: torch._C.ClassType) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CCooddee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Code
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggrraadd__eexxeeccuuttoorr__ssttaatteess(...)
     |      grad_executor_states(self: torch._C.Code) -> List[torch::jit::GraphExecutorState]
     |  
     |  nnuumm__bbaaiilloouuttss(...)
     |      num_bailouts(self: torch._C.Code) -> int
     |  
     |  rreeqquueesstt__bbaaiilloouutt(...)
     |      request_bailout(self: torch._C.Code, arg0: int) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CCoommppiillaattiioonnUUnniitt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      CompilationUnit
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ggeettaattttrr____(...)
     |      __getattr__(self: torch._C.CompilationUnit, arg0: str) -> torch::jit::StrongFunctionPtr
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.CompilationUnit, lang: str = '', _frames_up: int = 0) -> None
     |  
     |  ccrreeaattee__ffuunnccttiioonn(...)
     |      create_function(self: torch._C.CompilationUnit, qualified_name: str, graph: torch._C.Graph, should_mangle: bool = False) -> torch::jit::StrongFunctionPtr
     |  
     |  ddeeffiinnee(...)
     |      define(self: torch._C.CompilationUnit, src: str, rcb: Callable[[str], object] = None, _frames_up: int = 0) -> None
     |  
     |  ffiinndd__ffuunnccttiioonn(...)
     |      find_function(self: torch._C.CompilationUnit, arg0: str) -> Optional[torch::jit::StrongFunctionPtr]
     |  
     |  ggeett__ffuunnccttiioonnss(...)
     |      get_functions(self: torch._C.CompilationUnit) -> List[torch::jit::StrongFunctionPtr]
     |  
     |  ggeett__iinntteerrffaaccee(...)
     |      get_interface(self: torch._C.CompilationUnit, arg0: str) -> torch._C.InterfaceType
     |  
     |  sseett__ooppttiimmiizzeedd(...)
     |      set_optimized(self: torch._C.CompilationUnit, arg0: bool) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CCoommpplleetteeAArrgguummeennttSSppeecc(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      CompleteArgumentSpec
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.CompleteArgumentSpec) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CCoommpplleexxTTyyppee(Type)
     |  Method resolution order:
     |      ComplexType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.ComplexType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CCoonnccrreetteeMMoodduulleeTTyyppee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ConcreteModuleType
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  dduummpp(...)
     |      dump(self: torch._C.ConcreteModuleType) -> None
     |  
     |  eeqquuaallss(...)
     |      equals(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. equals(self: torch._C.ConcreteModuleType, arg0: torch._C.ConcreteModuleType) -> bool
     |      
     |      2. equals(self: torch._C.ConcreteModuleType, arg0: torch._C.ConcreteModuleTypeBuilder) -> bool
     |  
     |  ggeett__aattttrriibbuutteess(...)
     |      get_attributes(self: torch._C.ConcreteModuleType) -> Dict[str, Tuple[torch._C.Type, bool]]
     |  
     |  ggeett__ccoonnssttaannttss(...)
     |      get_constants(self: torch._C.ConcreteModuleType) -> Dict[str, object]
     |  
     |  ggeett__mmoodduulleess(...)
     |      get_modules(self: torch._C.ConcreteModuleType) -> List[Tuple[str, torch._C.ConcreteModuleType]]
     |  
     |  iiss__iiggnnoorreedd__aattttrriibbuuttee(...)
     |      is_ignored_attribute(self: torch._C.ConcreteModuleType, arg0: str) -> bool
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ffrroomm__jjiitt__ttyyppee(...) from builtins.PyCapsule
     |      from_jit_type(arg0: torch._C.Type) -> torch._C.ConcreteModuleType
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  jjiitt__ttyyppee
     |  
     |  ppyy__ccllaassss
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CCoonnccrreetteeMMoodduulleeTTyyppeeBBuuiillddeerr(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ConcreteModuleTypeBuilder
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.ConcreteModuleTypeBuilder, arg0: object) -> None
     |  
     |  aadddd__aattttrriibbuuttee(...)
     |      add_attribute(self: torch._C.ConcreteModuleTypeBuilder, arg0: str, arg1: torch._C.Type, arg2: bool, arg3: bool) -> None
     |  
     |  aadddd__bbuuiillttiinn__ffuunnccttiioonn(...)
     |      add_builtin_function(self: torch._C.ConcreteModuleTypeBuilder, arg0: str, arg1: str) -> None
     |  
     |  aadddd__ccoonnssttaanntt(...)
     |      add_constant(self: torch._C.ConcreteModuleTypeBuilder, arg0: str, arg1: object) -> None
     |  
     |  aadddd__ffaaiilleedd__aattttrriibbuuttee(...)
     |      add_failed_attribute(self: torch._C.ConcreteModuleTypeBuilder, arg0: str, arg1: str) -> None
     |  
     |  aadddd__ffoorrwwaarrdd__hhooookk(...)
     |      add_forward_hook(self: torch._C.ConcreteModuleTypeBuilder, arg0: object) -> None
     |  
     |  aadddd__ffoorrwwaarrdd__pprree__hhooookk(...)
     |      add_forward_pre_hook(self: torch._C.ConcreteModuleTypeBuilder, arg0: object) -> None
     |  
     |  aadddd__ffuunnccttiioonn__aattttrriibbuuttee(...)
     |      add_function_attribute(self: torch._C.ConcreteModuleTypeBuilder, arg0: str, arg1: torch._C.Type, arg2: object) -> None
     |  
     |  aadddd__iiggnnoorreedd__aattttrriibbuuttee(...)
     |      add_ignored_attribute(self: torch._C.ConcreteModuleTypeBuilder, arg0: str) -> None
     |  
     |  aadddd__iiggnnoorreedd__aattttrriibbuutteess(...)
     |      add_ignored_attributes(self: torch._C.ConcreteModuleTypeBuilder, arg0: List[str]) -> None
     |  
     |  aadddd__mmoodduullee(...)
     |      add_module(self: torch._C.ConcreteModuleTypeBuilder, arg0: str, arg1: torch::jit::ConcreteModuleType) -> None
     |  
     |  aadddd__oovveerrllooaadd(...)
     |      add_overload(self: torch._C.ConcreteModuleTypeBuilder, arg0: str, arg1: List[str]) -> None
     |  
     |  bbuuiilldd(...)
     |      build(self: torch._C.ConcreteModuleTypeBuilder) -> torch::jit::ConcreteModuleType
     |  
     |  eeqquuaallss(...)
     |      equals(self: torch._C.ConcreteModuleTypeBuilder, arg0: torch._C.ConcreteModuleTypeBuilder) -> bool
     |  
     |  sseett__mmoodduullee__ddiicctt(...)
     |      set_module_dict(self: torch._C.ConcreteModuleTypeBuilder) -> None
     |  
     |  sseett__mmoodduullee__lliisstt(...)
     |      set_module_list(self: torch._C.ConcreteModuleTypeBuilder) -> None
     |  
     |  sseett__ppooiissoonneedd(...)
     |      set_poisoned(self: torch._C.ConcreteModuleTypeBuilder) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DDeeeeppCCooppyyMMeemmooTTaabbllee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      DeepCopyMemoTable
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DDeevviicceeOObbjjTTyyppee(Type)
     |  Method resolution order:
     |      DeviceObjType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.DeviceObjType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DDiiccttTTyyppee(Type)
     |  Method resolution order:
     |      DictType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.DictType, arg0: torch._C.Type, arg1: torch._C.Type) -> None
     |  
     |  ggeettKKeeyyTTyyppee(...)
     |      getKeyType(self: torch._C.DictType) -> torch._C.Type
     |  
     |  ggeettVVaalluueeTTyyppee(...)
     |      getValueType(self: torch._C.DictType) -> torch._C.Type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DDiissaabblleeTToorrcchhFFuunnccttiioonn(builtins.object)
     |  Methods defined here:
     |  
     |  ____eenntteerr____(...)
     |  
     |  ____eexxiitt____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DDoouubblleeSSttoorraaggee(torch._C.DoubleStorageBase, torch.storage._StorageBase)
     |  DoubleStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      DoubleStorage
     |      torch._C.DoubleStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.DoubleStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.DoubleStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.DoubleStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class DDoouubblleeTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.float64
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class EEnnuummTTyyppee(Type)
     |  Method resolution order:
     |      EnumType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.EnumType, arg0: str, arg1: torch._C.Type, arg2: List[object]) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class EErrrroorrRReeppoorrtt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ErrorReport
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.ErrorReport, arg0: torch._C._jit_tree_views.SourceRange) -> None
     |  
     |  wwhhaatt(...)
     |      what(self: torch._C.ErrorReport) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ccaallll__ssttaacckk(...) from builtins.PyCapsule
     |      call_stack() -> str
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class EExxeeccuuttiioonnPPllaann(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ExecutionPlan
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ccooddee
     |  
     |  ggrraapphh
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class FFaattaallEErrrroorr(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      FatalError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss
    
    class FFiilleeCChheecckk(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      FileCheck
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.FileCheck) -> None
     |  
     |  cchheecckk(...)
     |      check(self: torch._C.FileCheck, arg0: str) -> torch._C.FileCheck
     |  
     |  cchheecckk__ccoouunntt(...)
     |      check_count(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. check_count(self: torch._C.FileCheck, arg0: str, arg1: int, arg2: bool) -> torch._C.FileCheck
     |      
     |      2. check_count(self: torch._C.FileCheck, str: str, count: int, exactly: bool = False) -> torch._C.FileCheck
     |      
     |      Check Count
     |  
     |  cchheecckk__ddaagg(...)
     |      check_dag(self: torch._C.FileCheck, arg0: str) -> torch._C.FileCheck
     |  
     |  cchheecckk__nneexxtt(...)
     |      check_next(self: torch._C.FileCheck, arg0: str) -> torch._C.FileCheck
     |  
     |  cchheecckk__nnoott(...)
     |      check_not(self: torch._C.FileCheck, arg0: str) -> torch._C.FileCheck
     |  
     |  cchheecckk__ssaammee(...)
     |      check_same(self: torch._C.FileCheck, arg0: str) -> torch._C.FileCheck
     |  
     |  cchheecckk__ssoouurrccee__hhiigghhlliigghhtteedd(...)
     |      check_source_highlighted(self: torch._C.FileCheck, arg0: str) -> torch._C.FileCheck
     |  
     |  rruunn(...)
     |      run(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. run(self: torch._C.FileCheck, arg0: str) -> None
     |      
     |      2. run(self: torch._C.FileCheck, arg0: torch._C.Graph) -> None
     |      
     |      3. run(self: torch._C.FileCheck, checks_file: str, test_file: str) -> None
     |      
     |      Run
     |      
     |      4. run(self: torch._C.FileCheck, checks_file: str, graph: torch._C.Graph) -> None
     |      
     |      Run
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class FFllooaattSSttoorraaggee(torch._C.FloatStorageBase, torch.storage._StorageBase)
     |  FloatStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      FloatStorage
     |      torch._C.FloatStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.FloatStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.FloatStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.FloatStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class FFllooaattTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.float32
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class FFllooaattTTyyppee(Type)
     |  Method resolution order:
     |      FloatType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.FloatType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class FFuunnccttiioonnSScchheemmaa(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      FunctionSchema
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.FunctionSchema, arg0: torch._C.FunctionSchema) -> bool
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____ssttrr____(...)
     |      __str__(self: torch._C.FunctionSchema) -> str
     |  
     |  iiss__bbaacckkwwaarrdd__ccoommppaattiibbllee__wwiitthh(...)
     |      is_backward_compatible_with(self: torch._C.FunctionSchema, arg0: torch._C.FunctionSchema) -> bool
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  aarrgguummeennttss
     |  
     |  nnaammee
     |  
     |  oovveerrllooaadd__nnaammee
     |  
     |  rreettuurrnnss
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class FFuuttuurree(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Future
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ggeettssttaattee____(...)
     |      __getstate__(self: torch._C.Future) -> tuple
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.Future) -> None
     |  
     |  ____sseettssttaattee____(...)
     |      __setstate__(self: torch._C.Future, arg0: tuple) -> None
     |  
     |  aadddd__ddoonnee__ccaallllbbaacckk(...)
     |      add_done_callback(self: torch._C.Future, arg0: function) -> None
     |  
     |  ddoonnee(...)
     |      done(self: torch._C.Future) -> bool
     |  
     |  sseett__rreessuulltt(...)
     |      set_result(self: torch._C.Future, arg0: object) -> None
     |  
     |  tthheenn(...)
     |      then(self: torch._C.Future, arg0: function) -> torch._C.Future
     |  
     |  vvaalluuee(...)
     |      value(self: torch._C.Future) -> object
     |  
     |  wwaaiitt(...)
     |      wait(self: torch._C.Future) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class FFuuttuurreeTTyyppee(Type)
     |  Method resolution order:
     |      FutureType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.FutureType, arg0: torch._C.Type) -> None
     |  
     |  ggeettEElleemmeennttTTyyppee(...)
     |      getElementType(self: torch._C.FutureType) -> torch._C.Type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class GGeenneerraattoorr(builtins.object)
     |  Generator(device='cpu') -> Generator
     |  
     |  Creates and returns a generator object that manages the state of the algorithm which
     |  produces pseudo random numbers. Used as a keyword argument in many :ref:`inplace-random-sampling`
     |  functions.
     |  
     |  Arguments:
     |      device (:class:`torch.device`, optional): the desired device for the generator.
     |  
     |  Returns:
     |      Generator: An torch.Generator object.
     |  
     |  Example::
     |  
     |      >>> g_cpu = torch.Generator()
     |      >>> g_cuda = torch.Generator(device='cuda')
     |  
     |  Methods defined here:
     |  
     |  ggeett__ssttaattee(...)
     |      Generator.get_state() -> Tensor
     |      
     |      Returns the Generator state as a ``torch.ByteTensor``.
     |      
     |      Returns:
     |          Tensor: A ``torch.ByteTensor`` which contains all the necessary bits
     |          to restore a Generator to a specific point in time.
     |      
     |      Example::
     |      
     |          >>> g_cpu = torch.Generator()
     |          >>> g_cpu.get_state()
     |  
     |  iinniittiiaall__sseeeedd(...)
     |      Generator.initial_seed() -> int
     |      
     |      Returns the initial seed for generating random numbers.
     |      
     |      Example::
     |      
     |          >>> g_cpu = torch.Generator()
     |          >>> g_cpu.initial_seed()
     |          2147483647
     |  
     |  mmaannuuaall__sseeeedd(...)
     |      Generator.manual_seed(seed) -> Generator
     |      
     |      Sets the seed for generating random numbers. Returns a `torch.Generator` object.
     |      It is recommended to set a large seed, i.e. a number that has a good balance of 0
     |      and 1 bits. Avoid having many 0 bits in the seed.
     |      
     |      Arguments:
     |          seed (int): The desired seed. Value must be within the inclusive range
     |              `[-0x8000_0000_0000_0000, 0xffff_ffff_ffff_ffff]`. Otherwise, a RuntimeError
     |              is raised. Negative inputs are remapped to positive values with the formula
     |              `0xffff_ffff_ffff_ffff + seed`.
     |      
     |      Returns:
     |          Generator: An torch.Generator object.
     |      
     |      Example::
     |      
     |          >>> g_cpu = torch.Generator()
     |          >>> g_cpu.manual_seed(2147483647)
     |  
     |  sseeeedd(...)
     |      Generator.seed() -> int
     |      
     |      Gets a non-deterministic random number from std::random_device or the current
     |      time and uses it to seed a Generator.
     |      
     |      Example::
     |      
     |          >>> g_cpu = torch.Generator()
     |          >>> g_cpu.seed()
     |          1516516984916
     |  
     |  sseett__ssttaattee(...)
     |      Generator.set_state(new_state) -> void
     |      
     |      Sets the Generator state.
     |      
     |      Arguments:
     |          new_state (torch.ByteTensor): The desired state.
     |      
     |      Example::
     |      
     |          >>> g_cpu = torch.Generator()
     |          >>> g_cpu_other = torch.Generator()
     |          >>> g_cpu.set_state(g_cpu_other.get_state())
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ddeevviiccee
     |      Generator.device -> device
     |      
     |      Gets the current device of the generator.
     |      
     |      Example::
     |      
     |          >>> g_cpu = torch.Generator()
     |          >>> g_cpu.device
     |          device(type='cpu')
    
    class GGrraaddiieenntt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Gradient
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ddff
     |  
     |  ddff__iinnppuutt__ccaappttuurreedd__iinnppuuttss
     |  
     |  ddff__iinnppuutt__ccaappttuurreedd__oouuttppuuttss
     |  
     |  ddff__iinnppuutt__vvjjppss
     |  
     |  ddff__oouuttppuutt__vvjjppss
     |  
     |  ff
     |  
     |  ff__rreeaall__oouuttppuuttss
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class GGrraapphh(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Graph
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.Graph) -> None
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Graph) -> str
     |  
     |  aaddddIInnppuutt(...)
     |      addInput(self: torch._C.Graph) -> torch::jit::Value
     |  
     |  aappppeennddNNooddee(...)
     |      appendNode(self: torch._C.Graph, arg0: torch::jit::Node) -> torch::jit::Node
     |  
     |  ccooppyy(...)
     |      copy(self: torch._C.Graph) -> torch._C.Graph
     |  
     |  ccrreeaattee(...)
     |      create(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. create(self: torch._C.Graph, arg0: str) -> torch::jit::Node
     |      
     |      2. create(self: torch._C.Graph, arg0: str, arg1: int) -> torch::jit::Node
     |      
     |      3. create(self: torch._C.Graph, arg0: str, arg1: List[torch::jit::Value]) -> torch::jit::Node
     |      
     |      4. create(self: torch._C.Graph, arg0: str, arg1: List[torch::jit::Value], arg2: int) -> torch::jit::Node
     |  
     |  ccrreeaatteeCClloonnee(...)
     |      createClone(self: torch._C.Graph, arg0: torch::jit::Node, arg1: object) -> torch::jit::Node
     |  
     |  ccrreeaatteeCCuuddaaFFuussiioonnGGrroouupp(...)
     |      createCudaFusionGroup(self: torch._C.Graph) -> torch::jit::Node
     |  
     |  ccrreeaatteeFFuussiioonnGGrroouupp(...)
     |      createFusionGroup(self: torch._C.Graph) -> torch::jit::Node
     |  
     |  dduummpp__aalliiaass__ddbb(...)
     |      dump_alias_db(self: torch._C.Graph) -> None
     |  
     |  eerraasseeIInnppuutt(...)
     |      eraseInput(self: torch._C.Graph, arg0: int) -> None
     |  
     |  ffiinnddAAllllNNooddeess(...)
     |      findAllNodes(self: torch._C.Graph, kind: str, recurse: bool = True) -> List[torch::jit::Node]
     |      
     |      Find all nodes
     |  
     |  ffiinnddNNooddee(...)
     |      findNode(self: torch._C.Graph, kind: str, recurse: bool = True) -> torch::jit::Node
     |      
     |      Find Node
     |  
     |  iinnppuuttss(...)
     |      inputs(self: torch._C.Graph) -> Iterator
     |  
     |  iinnsseerrttCCoonnssttaanntt(...)
     |      insertConstant(self: torch._C.Graph, arg0: IValue) -> torch::jit::Value
     |  
     |  iinnsseerrttNNooddee(...)
     |      insertNode(self: torch._C.Graph, arg0: torch::jit::Node) -> torch::jit::Node
     |  
     |  lliinntt(...)
     |      lint(self: torch._C.Graph) -> None
     |  
     |  nnooddeess(...)
     |      nodes(self: torch._C.Graph) -> Iterator
     |  
     |  oouuttppuuttss(...)
     |      outputs(self: torch._C.Graph) -> Iterator
     |  
     |  ppaarraamm__nnooddee(...)
     |      param_node(self: torch._C.Graph) -> torch::jit::Node
     |  
     |  pprreeppeennddNNooddee(...)
     |      prependNode(self: torch._C.Graph, arg0: torch::jit::Node) -> torch::jit::Node
     |  
     |  rreeggiisstteerrOOuuttppuutt(...)
     |      registerOutput(self: torch._C.Graph, arg0: torch::jit::Value) -> int
     |  
     |  rreettuurrnn__nnooddee(...)
     |      return_node(self: torch._C.Graph) -> torch::jit::Node
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Graph, print_source_ranges: bool = True) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class GGrraapphhEExxeeccuuttoorrSSttaattee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      GraphExecutorState
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  eexxeeccuuttiioonn__ppllaannss
     |  
     |  ffaallllbbaacckk
     |  
     |  ggrraapphh
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IIOODDeessccrriippttoorr(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      IODescriptor
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IInnffeerrrreeddTTyyppee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      InferredType
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: torch._C.InferredType, arg0: torch._C.Type) -> None
     |      
     |      2. __init__(self: torch._C.InferredType, arg0: str) -> None
     |  
     |  rreeaassoonn(...)
     |      reason(self: torch._C.InferredType) -> str
     |  
     |  ssuucccceessss(...)
     |      success(self: torch._C.InferredType) -> bool
     |  
     |  ttyyppee(...)
     |      type(self: torch._C.InferredType) -> torch._C.Type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IInnttSSttoorraaggee(torch._C.IntStorageBase, torch.storage._StorageBase)
     |  IntStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      IntStorage
     |      torch._C.IntStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.IntStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.IntStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.IntStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class IInnttTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.int32
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class IInnttTTyyppee(Type)
     |  Method resolution order:
     |      IntType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.IntType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IInntteerrffaacceeTTyyppee(Type)
     |  Method resolution order:
     |      InterfaceType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.InterfaceType, arg0: str) -> None
     |  
     |  ggeettMMeetthhoodd(...)
     |      getMethod(self: torch._C.InterfaceType, arg0: str) -> torch._C.FunctionSchema
     |  
     |  ggeettMMeetthhooddNNaammeess(...)
     |      getMethodNames(self: torch._C.InterfaceType) -> List[str]
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    JJIITTEExxcceeppttiioonn = class Error(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      Error
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss
    
    class LLiissttTTyyppee(Type)
     |  Method resolution order:
     |      ListType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.ListType, arg0: torch._C.Type) -> None
     |  
     |  ggeettEElleemmeennttTTyyppee(...)
     |      getElementType(self: torch._C.ListType) -> torch._C.Type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ooffBBoooollss(...) from builtins.PyCapsule
     |      ofBools() -> torch._C.ListType
     |  
     |  ooffCCoommpplleexxDDoouubblleess(...) from builtins.PyCapsule
     |      ofComplexDoubles() -> torch._C.ListType
     |  
     |  ooffFFllooaattss(...) from builtins.PyCapsule
     |      ofFloats() -> torch._C.ListType
     |  
     |  ooffIInnttss(...) from builtins.PyCapsule
     |      ofInts() -> torch._C.ListType
     |  
     |  ooffTTeennssoorrss(...) from builtins.PyCapsule
     |      ofTensors() -> torch._C.ListType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class LLiitteeSSccrriippttMMoodduullee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      LiteScriptModule
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.LiteScriptModule, arg0: c10::ivalue::Object, arg1: torch::jit::mobile::CompilationUnit) -> None
     |  
     |  ffiinndd__mmeetthhoodd(...)
     |      find_method(self: torch._C.LiteScriptModule, method_name: str) -> bool
     |  
     |  ffoorrwwaarrdd(...)
     |      forward(self: torch._C.LiteScriptModule, input_tuple: tuple) -> IValue
     |  
     |  rruunn__mmeetthhoodd(...)
     |      run_method(self: torch._C.LiteScriptModule, method_name: str, input_tuple: tuple) -> IValue
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class LLoocckkiinnggLLooggggeerr(LoggerBase)
     |  Method resolution order:
     |      LockingLogger
     |      LoggerBase
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.LockingLogger) -> None
     |  
     |  ggeett__ccoouunntteerr__vvaall(...)
     |      get_counter_val(self: torch._C.LockingLogger, arg0: str) -> int
     |  
     |  sseett__aaggggrreeggaattiioonn__ttyyppee(...)
     |      set_aggregation_type(self: torch._C.LockingLogger, arg0: str, arg1: torch._C.AggregationType) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class LLoonnggSSttoorraaggee(torch._C.LongStorageBase, torch.storage._StorageBase)
     |  LongStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      LongStorage
     |      torch._C.LongStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.LongStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.LongStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.LongStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class LLoonnggTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.int64
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class MMoobbiilleeOOppttiimmiizzeerrTTyyppee(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  CONV_BN_FUSION
     |  
     |  INSERT_FOLD_PREPACK_OPS
     |  
     |  REMOVE_DROPOUT
     |  
     |  FUSE_ADD_RELU
     |  
     |  HOIST_CONV_PACKED_PARAMS
     |  
     |  Method resolution order:
     |      MobileOptimizerType
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: object, other: object) -> bool
     |  
     |  ____ggeettssttaattee____(...)
     |      __getstate__(self: object) -> int
     |  
     |  ____hhaasshh____(...)
     |      __hash__(self: object) -> int
     |  
     |  ____iinnddeexx____(...)
     |      __index__(self: torch._C.MobileOptimizerType) -> int
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.MobileOptimizerType, value: int) -> None
     |  
     |  ____iinntt____(...)
     |      __int__(self: torch._C.MobileOptimizerType) -> int
     |  
     |  ____nnee____(...)
     |      __ne__(self: object, other: object) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: object) -> str
     |  
     |  ____sseettssttaattee____(...)
     |      __setstate__(self: torch._C.MobileOptimizerType, state: int) -> None
     |  
     |  ____ssttrr____ = name(...)
     |      name(self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____mmeemmbbeerrss____
     |  
     |  nnaammee
     |      name(self: handle) -> str
     |  
     |  vvaalluuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CCOONNVV__BBNN__FFUUSSIIOONN = <MobileOptimizerType.CONV_BN_FUSION: 0>
     |  
     |  FFUUSSEE__AADDDD__RREELLUU = <MobileOptimizerType.FUSE_ADD_RELU: 3>
     |  
     |  HHOOIISSTT__CCOONNVV__PPAACCKKEEDD__PPAARRAAMMSS = <MobileOptimizerType.HOIST_CONV_PACKED_PARA...
     |  
     |  IINNSSEERRTT__FFOOLLDD__PPRREEPPAACCKK__OOPPSS = <MobileOptimizerType.INSERT_FOLD_PREPACK_OPS...
     |  
     |  RREEMMOOVVEE__DDRROOPPOOUUTT = <MobileOptimizerType.REMOVE_DROPOUT: 2>
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class MMoodduulleeDDiicctt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ModuleDict
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.ModuleDict, arg0: torch._C.ScriptModule) -> None
     |  
     |  ccoonnttaaiinnss(...)
     |      contains(self: torch._C.ModuleDict, arg0: str) -> bool
     |  
     |  ggeettaattttrr(...)
     |      getattr(self: torch._C.ModuleDict, arg0: str) -> object
     |  
     |  iitteemmss(...)
     |      items(self: torch._C.ModuleDict) -> List[Tuple[str, object]]
     |  
     |  sseettaattttrr(...)
     |      setattr(self: torch._C.ModuleDict, arg0: str, arg1: object) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class NNooddee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Node
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Node) -> str
     |  
     |  aaddddBBlloocckk(...)
     |      addBlock(self: torch._C.Node) -> torch._C.Block
     |  
     |  aaddddIInnppuutt(...)
     |      addInput(self: torch._C.Node, arg0: torch._C.Value) -> torch._C.Value
     |  
     |  aaddddOOuuttppuutt(...)
     |      addOutput(self: torch._C.Node) -> torch._C.Value
     |  
     |  aattttrriibbuutteeNNaammeess(...)
     |      attributeNames(self: torch._C.Node) -> List[str]
     |  
     |  bblloocckkss(...)
     |      blocks(self: torch._C.Node) -> Iterator
     |  
     |  ccccoonnvv(...)
     |      cconv(self: torch._C.Node) -> str
     |  
     |  ccooppyyAAttttrriibbuutteess(...)
     |      copyAttributes(self: torch._C.Node, arg0: torch._C.Node) -> torch._C.Node
     |  
     |  ddeessttrrooyy(...)
     |      destroy(self: torch._C.Node) -> None
     |  
     |  eerraasseeOOuuttppuutt(...)
     |      eraseOutput(self: torch._C.Node, arg0: int) -> None
     |  
     |  ff(...)
     |      f(self: torch._C.Node, arg0: str) -> float
     |  
     |  ff__(...)
     |      f_(self: torch._C.Node, arg0: str, arg1: float) -> torch._C.Node
     |  
     |  ffiinnddAAllllNNooddeess(...)
     |      findAllNodes(self: torch._C.Node, kind: str, recurse: bool = True) -> List[torch._C.Node]
     |      
     |      Find all nodes
     |  
     |  ffiinnddNNooddee(...)
     |      findNode(self: torch._C.Node, kind: str, recurse: bool = True) -> torch._C.Node
     |      
     |      Find Node
     |  
     |  ffss(...)
     |      fs(self: torch._C.Node, arg0: str) -> List[float]
     |  
     |  ffss__(...)
     |      fs_(self: torch._C.Node, arg0: str, arg1: List[float]) -> torch._C.Node
     |  
     |  gg(...)
     |      g(self: torch._C.Node, arg0: str) -> torch._C.Graph
     |  
     |  gg__(...)
     |      g_(self: torch._C.Node, arg0: str, arg1: torch._C.Graph) -> torch._C.Node
     |  
     |  ggss(...)
     |      gs(self: torch._C.Node, arg0: str) -> List[torch._C.Graph]
     |  
     |  ggss__(...)
     |      gs_(self: torch._C.Node, arg0: str, arg1: List[torch._C.Graph]) -> torch._C.Node
     |  
     |  hhaassAAttttrriibbuuttee(...)
     |      hasAttribute(self: torch._C.Node, arg0: str) -> bool
     |  
     |  hhaassAAttttrriibbuutteess(...)
     |      hasAttributes(self: torch._C.Node) -> bool
     |  
     |  hhaassMMuullttiipplleeOOuuttppuuttss(...)
     |      hasMultipleOutputs(self: torch._C.Node) -> bool
     |  
     |  hhaassUUsseess(...)
     |      hasUses(self: torch._C.Node) -> bool
     |  
     |  ii(...)
     |      i(self: torch._C.Node, arg0: str) -> int
     |  
     |  ii__(...)
     |      i_(self: torch._C.Node, arg0: str, arg1: int) -> torch._C.Node
     |  
     |  iinnppuutt(...)
     |      input(self: torch._C.Node) -> torch._C.Value
     |  
     |  iinnppuuttss(...)
     |      inputs(self: torch._C.Node) -> Iterator
     |  
     |  iinnppuuttssAAtt(...)
     |      inputsAt(self: torch._C.Node, arg0: int) -> torch._C.Value
     |  
     |  iinnppuuttssSSiizzee(...)
     |      inputsSize(self: torch._C.Node) -> int
     |  
     |  iinnsseerrttAAfftteerr(...)
     |      insertAfter(self: torch._C.Node, arg0: torch._C.Node) -> torch._C.Node
     |  
     |  iinnsseerrttBBeeffoorree(...)
     |      insertBefore(self: torch._C.Node, arg0: torch._C.Node) -> torch._C.Node
     |  
     |  iiss(...)
     |      is(self: torch._C.Node, arg0: str) -> List[int]
     |  
     |  iissAAfftteerr(...)
     |      isAfter(self: torch._C.Node, arg0: torch._C.Node) -> bool
     |  
     |  iissBBeeffoorree(...)
     |      isBefore(self: torch._C.Node, arg0: torch._C.Node) -> bool
     |  
     |  iissNNoonnddeetteerrmmiinniissttiicc(...)
     |      isNondeterministic(self: torch._C.Node) -> bool
     |  
     |  iiss__(...)
     |      is_(self: torch._C.Node, arg0: str, arg1: List[int]) -> torch._C.Node
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Node) -> Symbol
     |  
     |  kkiinnddOOff(...)
     |      kindOf(self: torch._C.Node, arg0: str) -> AttributeKind
     |  
     |  mmoovveeAAfftteerr(...)
     |      moveAfter(self: torch._C.Node, arg0: torch._C.Node) -> None
     |  
     |  mmoovveeBBeeffoorree(...)
     |      moveBefore(self: torch._C.Node, arg0: torch._C.Node) -> None
     |  
     |  mmuussttBBeeNNoonnee(...)
     |      mustBeNone(self: torch._C.Node) -> bool
     |  
     |  oouuttppuutt(...)
     |      output(self: torch._C.Node) -> torch._C.Value
     |  
     |  oouuttppuuttss(...)
     |      outputs(self: torch._C.Node) -> Iterator
     |  
     |  oouuttppuuttssAAtt(...)
     |      outputsAt(self: torch._C.Node, arg0: int) -> torch._C.Value
     |  
     |  oouuttppuuttssSSiizzee(...)
     |      outputsSize(self: torch._C.Node) -> int
     |  
     |  ppyynnaammee(...)
     |      pyname(self: torch._C.Node) -> str
     |  
     |  ppyyoobbjj(...)
     |      pyobj(self: torch._C.Node) -> object
     |  
     |  rreemmoovveeAAllllIInnppuuttss(...)
     |      removeAllInputs(self: torch._C.Node) -> None
     |  
     |  rreemmoovveeAAttttrriibbuuttee(...)
     |      removeAttribute(self: torch._C.Node, arg0: str) -> torch._C.Node
     |  
     |  rreemmoovveeIInnppuutt(...)
     |      removeInput(self: torch._C.Node, arg0: int) -> None
     |  
     |  rreeppllaacceeAAllllUUsseessWWiitthh(...)
     |      replaceAllUsesWith(self: torch._C.Node, arg0: torch._C.Node) -> None
     |  
     |  rreeppllaacceeIInnppuutt(...)
     |      replaceInput(self: torch._C.Node, arg0: int, arg1: torch._C.Value) -> torch._C.Value
     |  
     |  rreeppllaacceeIInnppuuttWWiitthh(...)
     |      replaceInputWith(self: torch._C.Node, arg0: torch._C.Value, arg1: torch._C.Value) -> None
     |  
     |  ss(...)
     |      s(self: torch._C.Node, arg0: str) -> str
     |  
     |  ss__(...)
     |      s_(self: torch._C.Node, arg0: str, arg1: str) -> torch._C.Node
     |  
     |  ssccaallaarr__aarrggss(...)
     |      scalar_args(self: torch._C.Node) -> list
     |  
     |  sscchheemmaa(...)
     |      schema(self: torch._C.Node) -> str
     |  
     |  ssccooppeeNNaammee(...)
     |      scopeName(self: torch._C.Node) -> str
     |  
     |  ssoouurrcceeRRaannggee(...)
     |      sourceRange(self: torch._C.Node) -> str
     |  
     |  ssss(...)
     |      ss(self: torch._C.Node, arg0: str) -> List[str]
     |  
     |  ssss__(...)
     |      ss_(self: torch._C.Node, arg0: str, arg1: List[str]) -> torch._C.Node
     |  
     |  tt(...)
     |      t(self: torch._C.Node, arg0: str) -> at::Tensor
     |  
     |  tt__(...)
     |      t_(self: torch._C.Node, arg0: str, arg1: at::Tensor) -> torch._C.Node
     |  
     |  ttss(...)
     |      ts(self: torch._C.Node, arg0: str) -> List[at::Tensor]
     |  
     |  ttss__(...)
     |      ts_(self: torch._C.Node, arg0: str, arg1: List[at::Tensor]) -> torch._C.Node
     |  
     |  zz(...)
     |      z(self: torch._C.Node, arg0: str) -> at::Tensor
     |  
     |  zz__(...)
     |      z_(self: torch._C.Node, arg0: str, arg1: at::Tensor) -> torch._C.Node
     |  
     |  zzss(...)
     |      zs(self: torch._C.Node, arg0: str) -> List[at::Tensor]
     |  
     |  zzss__(...)
     |      zs_(self: torch._C.Node, arg0: str, arg1: List[at::Tensor]) -> torch._C.Node
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class NNoonneeTTyyppee(Type)
     |  Method resolution order:
     |      NoneType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.NoneType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class NNooooppLLooggggeerr(LoggerBase)
     |  Method resolution order:
     |      NoopLogger
     |      LoggerBase
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.NoopLogger) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class NNuummbbeerrTTyyppee(Type)
     |  Method resolution order:
     |      NumberType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.NumberType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class OOppttiioonnaallTTyyppee(Type)
     |  Method resolution order:
     |      OptionalType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.OptionalType, arg0: torch._C.Type) -> None
     |  
     |  ggeettEElleemmeennttTTyyppee(...)
     |      getElementType(self: torch._C.OptionalType) -> torch._C.Type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ooffTTeennssoorr(...) from builtins.PyCapsule
     |      ofTensor() -> torch._C.OptionalType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class PPaarraammeetteerrDDiicctt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ParameterDict
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.ParameterDict, arg0: torch._C.ScriptModule) -> None
     |  
     |  ccoonnttaaiinnss(...)
     |      contains(self: torch._C.ParameterDict, arg0: str) -> bool
     |  
     |  ggeettaattttrr(...)
     |      getattr(self: torch._C.ParameterDict, arg0: str) -> object
     |  
     |  iitteemmss(...)
     |      items(self: torch._C.ParameterDict) -> List[Tuple[str, object]]
     |  
     |  sseettaattttrr(...)
     |      setattr(self: torch._C.ParameterDict, arg0: str, arg1: object) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class PPyyOObbjjeeccttTTyyppee(Type)
     |  Method resolution order:
     |      PyObjectType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.PyObjectType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class PPyyTToorrcchhFFiilleeRReeaaddeerr(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      PyTorchFileReader
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: torch._C.PyTorchFileReader, arg0: str) -> None
     |      
     |      2. __init__(self: torch._C.PyTorchFileReader, arg0: object) -> None
     |  
     |  ggeett__aallll__rreeccoorrddss(...)
     |      get_all_records(self: torch._C.PyTorchFileReader) -> List[str]
     |  
     |  ggeett__rreeccoorrdd(...)
     |      get_record(self: torch._C.PyTorchFileReader, arg0: str) -> bytes
     |  
     |  ggeett__ssttoorraaggee__ffrroomm__rreeccoorrdd(...)
     |      get_storage_from_record(self: torch._C.PyTorchFileReader, arg0: str, arg1: int, arg2: object) -> at::Tensor
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class PPyyTToorrcchhFFiilleeWWrriitteerr(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      PyTorchFileWriter
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: torch._C.PyTorchFileWriter, arg0: str) -> None
     |      
     |      2. __init__(self: torch._C.PyTorchFileWriter, arg0: object) -> None
     |      
     |      3. __init__(self: torch._C.PyTorchFileWriter, arg0: Callable[[capsule, int], int]) -> None
     |  
     |  wwrriittee__eenndd__ooff__ffiillee(...)
     |      write_end_of_file(self: torch._C.PyTorchFileWriter) -> None
     |  
     |  wwrriittee__rreeccoorrdd(...)
     |      write_record(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. write_record(self: torch._C.PyTorchFileWriter, arg0: str, arg1: str, arg2: int) -> None
     |      
     |      2. write_record(self: torch._C.PyTorchFileWriter, arg0: str, arg1: int, arg2: int) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class RRRReeffTTyyppee(Type)
     |  Method resolution order:
     |      RRefType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.RRefType, arg0: torch._C.Type) -> None
     |  
     |  ggeettEElleemmeennttTTyyppee(...)
     |      getElementType(self: torch._C.RRefType) -> torch._C.Type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SSccrriippttCCllaassss(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ScriptClass
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ccaallll____(...)
     |      __call__(self: torch._C.ScriptClass, *args, **kwargs) -> object
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SSccrriippttFFuunnccttiioonn(pybind11_builtins.pybind11_object)
     |  Functionally equivalent to a :class:`ScriptModule`, but represents a single
     |  function and does not have any attributes or Parameters.
     |  
     |  Method resolution order:
     |      ScriptFunction
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ccaallll____(...)
     |      __call__(*args, **kwargs) -> object
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ddeebbuugg__ssttaattee(...)
     |      get_debug_state(self: torch._C.ScriptFunction) -> torch._C.GraphExecutorState
     |  
     |  ggrraapphh__ffoorr = _graph_for(self, *args, **kwargs)
     |  
     |  ssaavvee(...)
     |      save(self: torch._C.ScriptFunction, filename: str, _extra_files: Dict[str, str] = {}) -> None
     |  
     |  ssaavvee__ttoo__bbuuffffeerr(...)
     |      save_to_buffer(self: torch._C.ScriptFunction, _extra_files: Dict[str, str] = {}) -> bytes
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ccooddee
     |  
     |  ggrraapphh
     |  
     |  iinnlliinneedd__ggrraapphh
     |  
     |  nnaammee
     |  
     |  qquuaalliiffiieedd__nnaammee
     |  
     |  sscchheemmaa
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SSccrriippttMMeetthhoodd(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ScriptMethod
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ccaallll____(...)
     |      __call__(*args, **kwargs) -> object
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggrraapphh__ffoorr = _graph_for(self, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ccooddee
     |  
     |  ccooddee__wwiitthh__ccoonnssttaannttss
     |  
     |  ggrraapphh
     |  
     |  iinnlliinneedd__ggrraapphh
     |  
     |  nnaammee
     |  
     |  sscchheemmaa
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SSccrriippttMMoodduullee(ScriptObject)
     |  Method resolution order:
     |      ScriptModule
     |      ScriptObject
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ccooppyy____(...)
     |      __copy__(self: torch._C.ScriptModule) -> torch._C.ScriptModule
     |  
     |  ____ddeeeeppccooppyy____(...)
     |      __deepcopy__(self: torch._C.ScriptModule, arg0: dict) -> torch._C.ScriptModule
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.ScriptModule, arg0: str, arg1: torch::jit::CompilationUnit, arg2: bool) -> None
     |  
     |  aappppllyy(...)
     |      apply(self: torch._C.ScriptModule, arg0: Callable[[torch._C.ScriptModule], None]) -> None
     |  
     |  cchhiillddrreenn(...)
     |      children(self: torch._C.ScriptModule) -> torch::jit::slot_list_impl<torch::jit::detail::ModulePolicy>
     |  
     |  dduummpp(...)
     |      dump(self: torch._C.ScriptModule, code: bool = True, attrs: bool = True, params: bool = True) -> None
     |  
     |  dduummpp__ttoo__ssttrr(...)
     |      dump_to_str(self: torch._C.ScriptModule, code: bool = True, attrs: bool = True, params: bool = True, indent: int = 0) -> str
     |  
     |  ggeett__ddeebbuugg__ssttaattee(...)
     |      get_debug_state(self: torch._C.ScriptModule) -> torch._C.GraphExecutorState
     |  
     |  ssaavvee(...)
     |      save(self: torch._C.ScriptModule, filename: str, _extra_files: Dict[str, str] = {}) -> None
     |  
     |  ssaavvee__ttoo__bbuuffffeerr(...)
     |      save_to_buffer(self: torch._C.ScriptModule, _extra_files: Dict[str, str] = {}) -> bytes
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ccooddee
     |  
     |  ccooddee__wwiitthh__ccoonnssttaannttss
     |  
     |  qquuaalliiffiieedd__nnaammee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ScriptObject:
     |  
     |  ____aabbss____(...)
     |      __abs__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____aadddd____(...)
     |      __add__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____aanndd____(...)
     |      __and__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ccoonnccaatt____(...)
     |      __concat__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ccoonnttaaiinnss____(...)
     |      __contains__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ddeelliitteemm____(...)
     |      __delitem__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____fflloooorrddiivv____(...)
     |      __floordiv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ggee____(...)
     |      __ge__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ggeettaattttrr____(...)
     |      __getattr__(self: torch._C.ScriptObject, arg0: str) -> object
     |  
     |  ____ggeettiitteemm____(...)
     |      __getitem__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ggeettssttaattee____(...)
     |      __getstate__(self: torch._C.ScriptObject) -> Tuple[object, str]
     |  
     |  ____ggtt____(...)
     |      __gt__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____hhaasshh____(...)
     |      __hash__(self: torch._C.ScriptObject) -> int
     |  
     |  ____iiaadddd____(...)
     |      __iadd__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iiaanndd____(...)
     |      __iand__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iiccoonnccaatt____(...)
     |      __iconcat__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iifflloooorrddiivv____(...)
     |      __ifloordiv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iillsshhiifftt____(...)
     |      __ilshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iimmaattmmuull____(...)
     |      __imatmul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iimmoodd____(...)
     |      __imod__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iimmuull____(...)
     |      __imul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iinnddeexx____(...)
     |      __index__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iinnvv____(...)
     |      __inv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iinnvveerrtt____(...)
     |      __invert__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iioorr____(...)
     |      __ior__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iippooww____(...)
     |      __ipow__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iirrsshhiifftt____(...)
     |      __irshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iissuubb____(...)
     |      __isub__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iittrruueeddiivv____(...)
     |      __itruediv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iixxoorr____(...)
     |      __ixor__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____llee____(...)
     |      __le__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____lleenn____(...)
     |      __len__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____llsshhiifftt____(...)
     |      __lshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____lltt____(...)
     |      __lt__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____mmaattmmuull____(...)
     |      __matmul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____mmoodd____(...)
     |      __mod__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____mmuull____(...)
     |      __mul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____nnee____(...)
     |      __ne__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____nneegg____(...)
     |      __neg__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____nnoott____(...)
     |      __not__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____oorr____(...)
     |      __or__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ppooss____(...)
     |      __pos__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ppooww____(...)
     |      __pow__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____rrsshhiifftt____(...)
     |      __rshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____sseettiitteemm____(...)
     |      __setitem__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____sseettssttaattee____(...)
     |      __setstate__(self: torch._C.ScriptObject, arg0: Tuple[object, str]) -> None
     |  
     |  ____ssttrr____(...)
     |      __str__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ssuubb____(...)
     |      __sub__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ttrruueeddiivv____(...)
     |      __truediv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____xxoorr____(...)
     |      __xor__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ggeettaattttrr(...)
     |      getattr(self: torch._C.ScriptObject, arg0: str) -> object
     |  
     |  hhaassaattttrr(...)
     |      hasattr(self: torch._C.ScriptObject, arg0: str) -> bool
     |  
     |  sseettaattttrr(...)
     |      setattr(self: torch._C.ScriptObject, arg0: str, arg1: object) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SSccrriippttOObbjjeecctt(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ScriptObject
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____aabbss____(...)
     |      __abs__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____aadddd____(...)
     |      __add__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____aanndd____(...)
     |      __and__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ccoonnccaatt____(...)
     |      __concat__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ccoonnttaaiinnss____(...)
     |      __contains__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ccooppyy____(...)
     |      __copy__(self: torch._C.ScriptObject) -> torch._C.ScriptObject
     |  
     |  ____ddeeeeppccooppyy____(...)
     |      __deepcopy__(self: torch._C.ScriptObject, arg0: dict) -> torch._C.ScriptObject
     |  
     |  ____ddeelliitteemm____(...)
     |      __delitem__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____fflloooorrddiivv____(...)
     |      __floordiv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ggee____(...)
     |      __ge__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ggeettaattttrr____(...)
     |      __getattr__(self: torch._C.ScriptObject, arg0: str) -> object
     |  
     |  ____ggeettiitteemm____(...)
     |      __getitem__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ggeettssttaattee____(...)
     |      __getstate__(self: torch._C.ScriptObject) -> Tuple[object, str]
     |  
     |  ____ggtt____(...)
     |      __gt__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____hhaasshh____(...)
     |      __hash__(self: torch._C.ScriptObject) -> int
     |  
     |  ____iiaadddd____(...)
     |      __iadd__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iiaanndd____(...)
     |      __iand__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iiccoonnccaatt____(...)
     |      __iconcat__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iifflloooorrddiivv____(...)
     |      __ifloordiv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iillsshhiifftt____(...)
     |      __ilshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iimmaattmmuull____(...)
     |      __imatmul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iimmoodd____(...)
     |      __imod__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iimmuull____(...)
     |      __imul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iinnddeexx____(...)
     |      __index__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iinnvv____(...)
     |      __inv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iinnvveerrtt____(...)
     |      __invert__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iioorr____(...)
     |      __ior__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iippooww____(...)
     |      __ipow__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iirrsshhiifftt____(...)
     |      __irshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iissuubb____(...)
     |      __isub__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iittrruueeddiivv____(...)
     |      __itruediv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____iixxoorr____(...)
     |      __ixor__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____llee____(...)
     |      __le__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____lleenn____(...)
     |      __len__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____llsshhiifftt____(...)
     |      __lshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____lltt____(...)
     |      __lt__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____mmaattmmuull____(...)
     |      __matmul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____mmoodd____(...)
     |      __mod__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____mmuull____(...)
     |      __mul__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____nnee____(...)
     |      __ne__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____nneegg____(...)
     |      __neg__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____nnoott____(...)
     |      __not__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____oorr____(...)
     |      __or__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ppooss____(...)
     |      __pos__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ppooww____(...)
     |      __pow__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____rrsshhiifftt____(...)
     |      __rshift__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____sseettiitteemm____(...)
     |      __setitem__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____sseettssttaattee____(...)
     |      __setstate__(self: torch._C.ScriptObject, arg0: Tuple[object, str]) -> None
     |  
     |  ____ssttrr____(...)
     |      __str__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ssuubb____(...)
     |      __sub__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____ttrruueeddiivv____(...)
     |      __truediv__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ____xxoorr____(...)
     |      __xor__(self: torch._C.ScriptObject, *args, **kwargs) -> object
     |  
     |  ggeettaattttrr(...)
     |      getattr(self: torch._C.ScriptObject, arg0: str) -> object
     |  
     |  hhaassaattttrr(...)
     |      hasattr(self: torch._C.ScriptObject, arg0: str) -> bool
     |  
     |  sseettaattttrr(...)
     |      setattr(self: torch._C.ScriptObject, arg0: str, arg1: object) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SShhoorrttSSttoorraaggee(torch._C.ShortStorageBase, torch.storage._StorageBase)
     |  ShortStorage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      ShortStorage
     |      torch._C.ShortStorageBase
     |      torch.storage._StorageBase
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C.ShortStorageBase:
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ccooppyy__(...)
     |  
     |  ddaattaa__ppttrr(...)
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |  
     |  ffiillll__(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |  
     |  iiss__sshhaarreedd(...)
     |  
     |  nneeww(...)
     |  
     |  rreessiizzee__(...)
     |  
     |  ssiizzee(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C.ShortStorageBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ffrroomm__bbuuffffeerr(...)
     |  
     |  ffrroomm__ffiillee(...)
     |      from_file(filename, shared=False, size=0) -> Storage
     |      
     |      If `shared` is `True`, then memory is shared between all processes.
     |      All changes are written to the file. If `shared` is `False`, then the changes on
     |      the storage do not affect the file.
     |      
     |      `size` is the number of elements in the storage. If `shared` is `False`,
     |      then the file must contain at least `size * sizeof(Type)` bytes
     |      (`Type` is the type of storage). If `shared` is `True` the file will be
     |      created if needed.
     |      
     |      Args:
     |          filename (str): file name to map
     |          shared (bool): whether to share memory
     |          size (int): number of elements in the storage
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C.ShortStorageBase:
     |  
     |  ddeevviiccee
     |  
     |  ddttyyppee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch.storage._StorageBase:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssiizzeeooff____(self)
     |      Size of object in memory, in bytes.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  bbffllooaatt1166(self)
     |      Casts this storage to bfloat16 type
     |  
     |  bbooooll(self)
     |      Casts this storage to bool type
     |  
     |  bbyyttee(self)
     |      Casts this storage to byte type
     |  
     |  cchhaarr(self)
     |      Casts this storage to char type
     |  
     |  cclloonnee(self)
     |      Returns a copy of this storage
     |  
     |  ccoommpplleexx__ddoouubbllee(self)
     |      Casts this storage to complex double type
     |  
     |  ccoommpplleexx__ffllooaatt(self)
     |      Casts this storage to complex float type
     |  
     |  ccppuu(self)
     |      Returns a CPU copy of this storage if it's not already on the CPU
     |  
     |  ccuuddaa = _cuda(self, device=None, non_blocking=False, **kwargs)
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device, then
     |      no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (int): The destination GPU id. Defaults to the current device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host. Otherwise,
     |              the argument has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument.
     |  
     |  ddoouubbllee(self)
     |      Casts this storage to double type
     |  
     |  ffllooaatt(self)
     |      Casts this storage to float type
     |  
     |  ggeett__ddeevviiccee(self) -> int
     |  
     |  hhaallff(self)
     |      Casts this storage to half type
     |  
     |  iinntt(self)
     |      Casts this storage to int type
     |  
     |  lloonngg(self)
     |      Casts this storage to long type
     |  
     |  ppiinn__mmeemmoorryy(self)
     |      Copies the storage to pinned memory, if it's not already pinned.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the storage to shared memory.
     |      
     |      This is a no-op for storages already in shared memory and for CUDA
     |      storages, which do not need to be moved for sharing across processes.
     |      Storages in shared memory cannot be resized.
     |      
     |      Returns: self
     |  
     |  sshhoorrtt(self)
     |      Casts this storage to short type
     |  
     |  ttoolliisstt(self)
     |      Returns a list containing the elements of this storage
     |  
     |  ttyyppee = _type(self, dtype=None, non_blocking=False, **kwargs)
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from torch.storage._StorageBase:
     |  
     |  ____aannnnoottaattiioonnss____ = {'_cdata': typing.Any, 'is_cuda': <class 'bool'>, 'i...
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
    
    class SShhoorrttTTeennssoorr(builtins.object)
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from tensortype
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from tensortype
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ddttyyppee = torch.int16
     |  
     |  iiss__ccuuddaa = False
     |  
     |  iiss__ssppaarrssee = False
     |  
     |  llaayyoouutt = torch.strided
    
    class SSiizzee(builtins.tuple)
     |  Size(iterable=(), /)
     |  
     |  Built-in immutable sequence.
     |  
     |  If no argument is given, the constructor returns an empty tuple.
     |  If iterable is specified the tuple is initialized from iterable's items.
     |  
     |  If the argument is a tuple, the return value is the same object.
     |  
     |  Method resolution order:
     |      Size
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____aadddd____(self, value, /)
     |      Return self+value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____mmuull____(self, value, /)
     |      Return self*value.
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____rrmmuull____(self, value, /)
     |      Return value*self.
     |  
     |  nnuummeell(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  ____ccoonnttaaiinnss____(self, key, /)
     |      Return key in self.
     |  
     |  ____eeqq____(self, value, /)
     |      Return self==value.
     |  
     |  ____ggee____(self, value, /)
     |      Return self>=value.
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____ggeettnneewwaarrggss____(self, /)
     |  
     |  ____ggtt____(self, value, /)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self, /)
     |      Return hash(self).
     |  
     |  ____iitteerr____(self, /)
     |      Implement iter(self).
     |  
     |  ____llee____(self, value, /)
     |      Return self<=value.
     |  
     |  ____lleenn____(self, /)
     |      Return len(self).
     |  
     |  ____lltt____(self, value, /)
     |      Return self<value.
     |  
     |  ____nnee____(self, value, /)
     |      Return self!=value.
     |  
     |  ccoouunntt(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  iinnddeexx(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
    
    class SSttaattiiccRRuunnttiimmee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      StaticRuntime
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  bbeenncchhmmaarrkk(...)
     |      benchmark(self: torch._C.StaticRuntime, arg0: List[at::Tensor], arg1: Dict[str, at::Tensor], arg2: int, arg3: int) -> None
     |  
     |  bbeenncchhmmaarrkk__iinnddiivviidduuaall__ooppss(...)
     |      benchmark_individual_ops(self: torch._C.StaticRuntime, arg0: List[at::Tensor], arg1: Dict[str, at::Tensor], arg2: int, arg3: int) -> torch._C.StaticRuntime.IndividualMetrics
     |  
     |  rruunn(...)
     |      run(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. run(self: torch._C.StaticRuntime, arg0: List[at::Tensor]) -> List[at::Tensor]
     |      
     |      2. run(self: torch._C.StaticRuntime, arg0: List[at::Tensor], arg1: Dict[str, at::Tensor]) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  IInnddiivviidduuaallMMeettrriiccss = <class 'torch._C.StaticRuntime.IndividualMetrics'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SSttrreeaamm(builtins.object)
     |  Methods defined here:
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ddeevviiccee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
    
    class SSttrreeaammOObbjjTTyyppee(Type)
     |  Method resolution order:
     |      StreamObjType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.StreamObjType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SSttrriinnggTTyyppee(Type)
     |  Method resolution order:
     |      StringType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.StringType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class TTeennssoorr(torch._C._TensorBase)
     |  Method resolution order:
     |      Tensor
     |      torch._C._TensorBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____aabbss____ = abs(...)
     |  
     |  ____aarrrraayy____(self, dtype=None)
     |  
     |  ____aarrrraayy__wwrraapp____(self, array)
     |      # Wrap Numpy array again in a suitable tensor when done, to support e.g.
     |      # `numpy.sin(tensor) -> tensor` or `numpy.greater(tensor, 0) -> ByteTensor`
     |  
     |  ____ccoonnttaaiinnss____(self, element)
     |      Check if `element` is present in tensor
     |      
     |      Args:
     |          element (Tensor or scalar): element to be checked
     |              for presence in current tensor"
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddiirr____(self)
     |      Default dir() implementation.
     |  
     |  ____fflloooorrddiivv____(self, other)
     |  
     |  ____ffoorrmmaatt____(self, format_spec)
     |      Default object formatter.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iippooww____(self, other)
     |  
     |  ____iitteerr____(self)
     |  
     |  ____iittrruueeddiivv____ = __idiv__(...)
     |  
     |  ____lleenn____(self)
     |      Return len(self).
     |  
     |  ____nneegg____ = neg(...)
     |  
     |  ____ppooww____ = pow(...)
     |  
     |  ____rrddiivv____(self, other)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____rreevveerrsseedd____(self)
     |      Reverses the tensor along dimension 0.
     |  
     |  ____rrfflloooorrddiivv____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  aalliiggnn__ttoo(self, *names)
     |      Permutes the dimensions of the :attr:`self` tensor to match the order
     |      specified in :attr:`names`, adding size-one dims for any new names.
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in :attr:`names`.
     |      :attr:`names` may contain additional names that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded to be equal to all dimension names of :attr:`self`
     |      that are not mentioned in :attr:`names`, in the order that they appear
     |      in :attr:`self`.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired dimension ordering of the
     |              output tensor. May contain up to one Ellipsis that is expanded
     |              to all unmentioned dim names of :attr:`self`.
     |      
     |      Examples::
     |      
     |          >>> tensor = torch.randn(2, 2, 2, 2, 2, 2)
     |          >>> named_tensor = tensor.refine_names('A', 'B', 'C', 'D', 'E', 'F')
     |      
     |          # Move the F and E dims to the front while keeping the rest in order
     |          >>> named_tensor.align_to('F', 'E', ...)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  bbaacckkwwaarrdd(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)
     |      Computes the gradient of current tensor w.r.t. graph leaves.
     |      
     |      The graph is differentiated using the chain rule. If the tensor is
     |      non-scalar (i.e. its data has more than one element) and requires
     |      gradient, the function additionally requires specifying ``gradient``.
     |      It should be a tensor of matching type and location, that contains
     |      the gradient of the differentiated function w.r.t. ``self``.
     |      
     |      This function accumulates gradients in the leaves - you might need to zero
     |      ``.grad`` attributes or set them to ``None`` before calling it.
     |      See :ref:`Default gradient layouts<default-grad-layouts>`
     |      for details on the memory layout of accumulated gradients.
     |      
     |      .. note::
     |      
     |          If you run any forward ops, create ``gradient``, and/or call ``backward``
     |          in a user-specified CUDA stream context, see
     |          :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.
     |      
     |      Args:
     |          gradient (Tensor or None): Gradient w.r.t. the
     |              tensor. If it is a tensor, it will be automatically converted
     |              to a Tensor that does not require grad unless ``create_graph`` is True.
     |              None values can be specified for scalar Tensors or ones that
     |              don't require grad. If a None value would be acceptable then
     |              this argument is optional.
     |          retain_graph (bool, optional): If ``False``, the graph used to compute
     |              the grads will be freed. Note that in nearly all cases setting
     |              this option to True is not needed and often can be worked around
     |              in a much more efficient way. Defaults to the value of
     |              ``create_graph``.
     |          create_graph (bool, optional): If ``True``, graph of the derivative will
     |              be constructed, allowing to compute higher order derivative
     |              products. Defaults to ``False``.
     |          inputs (sequence of Tensor): Inputs w.r.t. which the gradient will be
     |              accumulated into ``.grad``. All other Tensors will be ignored. If not
     |              provided, the gradient is accumulated into all the leaf Tensors that were
     |              used to compute the attr::tensors. All the provided inputs must be leaf
     |              Tensors.
     |  
     |  ddeettaacchh(...)
     |      Returns a new Tensor, detached from the current graph.
     |      
     |      The result will never require gradient.
     |      
     |      .. note::
     |      
     |        Returned Tensor shares the same storage with the original one.
     |        In-place modifications on either of them will be seen, and may trigger
     |        errors in correctness checks.
     |        IMPORTANT NOTE: Previously, in-place size / stride / storage changes
     |        (such as `resize_` / `resize_as_` / `set_` / `transpose_`) to the returned tensor
     |        also update the original tensor. Now, these in-place changes will not update the
     |        original tensor anymore, and will instead trigger an error.
     |        For sparse tensors:
     |        In-place indices / values changes (such as `zero_` / `copy_` / `add_`) to the
     |        returned tensor will not update the original tensor anymore, and will instead
     |        trigger an error.
     |  
     |  ddeettaacchh__(...)
     |      Detaches the Tensor from the graph that created it, making it a leaf.
     |      Views cannot be detached in-place.
     |  
     |  iiss__sshhaarreedd(self)
     |      Checks if tensor is in shared memory.
     |      
     |      This is always ``True`` for CUDA tensors.
     |  
     |  iissttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False)
     |      See :func:`torch.istft`
     |  
     |  lluu(self, pivot=True, get_infos=False)
     |      See :func:`torch.lu`
     |  
     |  nnoorrmm(self, p='fro', dim=None, keepdim=False, dtype=None)
     |      See :func:`torch.norm`
     |  
     |  rreeffiinnee__nnaammeess(self, *names)
     |      Refines the dimension names of :attr:`self` according to :attr:`names`.
     |      
     |      Refining is a special case of renaming that "lifts" unnamed dimensions.
     |      A ``None`` dim can be refined to have any name; a named dim can only be
     |      refined to have the same name.
     |      
     |      Because named tensors can coexist with unnamed tensors, refining names
     |      gives a nice way to write named-tensor-aware code that works with both
     |      named and unnamed tensors.
     |      
     |      :attr:`names` may contain up to one Ellipsis (``...``).
     |      The Ellipsis is expanded greedily; it is expanded in-place to fill
     |      :attr:`names` to the same length as ``self.dim()`` using names from the
     |      corresponding indices of ``self.names``.
     |      
     |      Python 2 does not support Ellipsis but one may use a string literal
     |      instead (``'...'``).
     |      
     |      Args:
     |          names (iterable of str): The desired names of the output tensor. May
     |              contain up to one Ellipsis.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.randn(32, 3, 128, 128)
     |          >>> named_imgs = imgs.refine_names('N', 'C', 'H', 'W')
     |          >>> named_imgs.names
     |          ('N', 'C', 'H', 'W')
     |      
     |          >>> tensor = torch.randn(2, 3, 5, 7, 11)
     |          >>> tensor = tensor.refine_names('A', ..., 'B', 'C')
     |          >>> tensor.names
     |          ('A', None, None, 'B', 'C')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreeggiisstteerr__hhooookk(self, hook)
     |      Registers a backward hook.
     |      
     |      The hook will be called every time a gradient with respect to the
     |      Tensor is computed. The hook should have the following signature::
     |      
     |          hook(grad) -> Tensor or None
     |      
     |      
     |      The hook should not modify its argument, but it can optionally return
     |      a new gradient which will be used in place of :attr:`grad`.
     |      
     |      This function returns a handle with a method ``handle.remove()``
     |      that removes the hook from the module.
     |      
     |      Example::
     |      
     |          >>> v = torch.tensor([0., 0., 0.], requires_grad=True)
     |          >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient
     |          >>> v.backward(torch.tensor([1., 2., 3.]))
     |          >>> v.grad
     |      
     |           2
     |           4
     |           6
     |          [torch.FloatTensor of size (3,)]
     |      
     |          >>> h.remove()  # removes the hook
     |  
     |  rreeiinnffoorrccee(self, reward)
     |  
     |  rreennaammee(self, *names, **rename_map)
     |      Renames dimension names of :attr:`self`.
     |      
     |      There are two main usages:
     |      
     |      ``self.rename(**rename_map)`` returns a view on tensor that has dims
     |      renamed as specified in the mapping :attr:`rename_map`.
     |      
     |      ``self.rename(*names)`` returns a view on tensor, renaming all
     |      dimensions positionally using :attr:`names`.
     |      Use ``self.rename(None)`` to drop names on a tensor.
     |      
     |      One cannot specify both positional args :attr:`names` and keyword args
     |      :attr:`rename_map`.
     |      
     |      Examples::
     |      
     |          >>> imgs = torch.rand(2, 3, 5, 7, names=('N', 'C', 'H', 'W'))
     |          >>> renamed_imgs = imgs.rename(N='batch', C='channels')
     |          >>> renamed_imgs.names
     |          ('batch', 'channels', 'H', 'W')
     |      
     |          >>> renamed_imgs = imgs.rename(None)
     |          >>> renamed_imgs.names
     |          (None,)
     |      
     |          >>> renamed_imgs = imgs.rename('batch', 'channel', 'height', 'width')
     |          >>> renamed_imgs.names
     |          ('batch', 'channel', 'height', 'width')
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  rreennaammee__(self, *names, **rename_map)
     |      In-place version of :meth:`~Tensor.rename`.
     |  
     |  rreessiizzee(self, *sizes)
     |  
     |  rreessiizzee__aass(self, tensor)
     |  
     |  rreettaaiinn__ggrraadd(self)
     |      Enables .grad attribute for non-leaf Tensors.
     |  
     |  sshhaarree__mmeemmoorryy__(self)
     |      Moves the underlying storage to shared memory.
     |      
     |      This is a no-op if the underlying storage is already in shared memory
     |      and for CUDA tensors. Tensors in shared memory cannot be resized.
     |  
     |  sspplliitt(self, split_size, dim=0)
     |      See :func:`torch.split`
     |  
     |  ssttfftt(self, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None)
     |      See :func:`torch.stft`
     |      
     |      .. warning::
     |        This function changed signature at version 0.4.1. Calling with
     |        the previous signature may cause error or return incorrect result.
     |  
     |  uunnffllaatttteenn(self, dim, sizes)
     |      Expands the dimension :attr:`dim` of the :attr:`self` tensor over multiple dimensions
     |      of sizes given by :attr:`sizes`.
     |      
     |      * :attr:`sizes` is the new shape of the unflattened dimension and it can be a `Tuple[int]` as well
     |        as `torch.Size` if :attr:`self` is a `Tensor`, or `namedshape` (Tuple[(name: str, size: int)])
     |        if :attr:`self` is a `NamedTensor`. The total number of elements in sizes must match the number
     |        of elements in the original dim being unflattened.
     |      
     |      Args:
     |          dim (Union[int, str]): Dimension to unflatten
     |          sizes (Union[Tuple[int] or torch.Size, Tuple[Tuple[str, int]]]): New shape of the unflattened dimension
     |      
     |      Examples:
     |          >>> torch.randn(3, 4, 1).unflatten(1, (2, 2)).shape
     |          torch.Size([3, 2, 2, 1])
     |          >>> torch.randn(2, 4, names=('A', 'B')).unflatten('B', (('B1', 2), ('B2', 2)))
     |          tensor([[[-1.1772,  0.0180],
     |                  [ 0.2412,  0.1431]],
     |      
     |                  [[-1.1819, -0.8899],
     |                  [ 1.5813,  0.2274]]], names=('A', 'B1', 'B2'))
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  uunniiqquuee(self, sorted=True, return_inverse=False, return_counts=False, dim=None)
     |      Returns the unique elements of the input tensor.
     |      
     |      See :func:`torch.unique`
     |  
     |  uunniiqquuee__ccoonnsseeccuuttiivvee(self, return_inverse=False, return_counts=False, dim=None)
     |      Eliminates all but the first element from every consecutive group of equivalent elements.
     |      
     |      See :func:`torch.unique_consecutive`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ____ttoorrcchh__ffuunnccttiioonn____(func, types, args=(), kwargs=None) from builtins.type
     |      This __torch_function__ implementation wraps subclasses such that
     |      methods called on subclasses return a subclass instance instead of
     |      a ``torch.Tensor`` instance.
     |      
     |      One corollary to this is that you need coverage for torch.Tensor
     |      methods if implementing __torch_function__ for subclasses.
     |      
     |      We recommend always calling ``super().__torch_function__`` as the base
     |      case when doing the above.
     |      
     |      While not mandatory, we recommend making `__torch_function__` a classmethod.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ____ccuuddaa__aarrrraayy__iinntteerrffaaccee____
     |      Array view description for cuda tensors.
     |      
     |      See:
     |      https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ggrraadd
     |      This attribute is ``None`` by default and becomes a Tensor the first time a call to
     |      :func:`backward` computes gradients for ``self``.
     |      The attribute will then contain the gradients computed and future calls to
     |      :func:`backward` will accumulate (add) gradients into it.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aarrrraayy__pprriioorriittyy____ = 1000
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from torch._C._TensorBase:
     |  
     |  ____aadddd____(...)
     |  
     |  ____aanndd____(...)
     |  
     |  ____bbooooll____(...)
     |  
     |  ____ccoommpplleexx____(...)
     |  
     |  ____ddeelliitteemm____(self, key, /)
     |      Delete self[key].
     |  
     |  ____ddiivv____(...)
     |  
     |  ____eeqq____(...)
     |      Return self==value.
     |  
     |  ____ffllooaatt____(...)
     |  
     |  ____ggee____(...)
     |      Return self>=value.
     |  
     |  ____ggeettiitteemm____(self, key, /)
     |      Return self[key].
     |  
     |  ____ggtt____(...)
     |      Return self>value.
     |  
     |  ____iiaadddd____(...)
     |  
     |  ____iiaanndd____(...)
     |  
     |  ____iiddiivv____(...)
     |  
     |  ____iifflloooorrddiivv____(...)
     |  
     |  ____iillsshhiifftt____(...)
     |  
     |  ____iimmoodd____(...)
     |  
     |  ____iimmuull____(...)
     |  
     |  ____iinnddeexx____(...)
     |  
     |  ____iinntt____(...)
     |  
     |  ____iinnvveerrtt____(...)
     |  
     |  ____iioorr____(...)
     |  
     |  ____iirrsshhiifftt____(...)
     |  
     |  ____iissuubb____(...)
     |  
     |  ____iixxoorr____(...)
     |  
     |  ____llee____(...)
     |      Return self<=value.
     |  
     |  ____lloonngg____(...)
     |  
     |  ____llsshhiifftt____(...)
     |  
     |  ____lltt____(...)
     |      Return self<value.
     |  
     |  ____mmaattmmuull____(...)
     |  
     |  ____mmoodd____(...)
     |  
     |  ____mmuull____(...)
     |  
     |  ____nnee____(...)
     |      Return self!=value.
     |  
     |  ____nnoonnzzeerroo____(...)
     |  
     |  ____oorr____(...)
     |  
     |  ____rraadddd____(...)
     |  
     |  ____rrmmuull____(...)
     |  
     |  ____rrsshhiifftt____(...)
     |  
     |  ____sseettiitteemm____(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  ____ssuubb____(...)
     |  
     |  ____ttrruueeddiivv____(...)
     |  
     |  ____xxoorr____(...)
     |  
     |  aabbss(...)
     |      abs() -> Tensor
     |      
     |      See :func:`torch.abs`
     |  
     |  aabbss__(...)
     |      abs_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.abs`
     |  
     |  aabbssoolluuttee(...)
     |      absolute() -> Tensor
     |      
     |      Alias for :func:`abs`
     |  
     |  aabbssoolluuttee__(...)
     |      absolute_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.absolute`
     |      Alias for :func:`abs_`
     |  
     |  aaccooss(...)
     |      acos() -> Tensor
     |      
     |      See :func:`torch.acos`
     |  
     |  aaccooss__(...)
     |      acos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acos`
     |  
     |  aaccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.acosh`
     |  
     |  aaccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.acosh`
     |  
     |  aadddd(...)
     |      add(other, *, alpha=1) -> Tensor
     |      
     |      Add a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`
     |      and :attr:`other` are specified, each element of :attr:`other` is scaled by
     |      :attr:`alpha` before being used.
     |      
     |      When :attr:`other` is a tensor, the shape of :attr:`other` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor
     |      
     |      See :func:`torch.add`
     |  
     |  aadddd__(...)
     |      add_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.add`
     |  
     |  aaddddbbmmmm(...)
     |      addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addbmm`
     |  
     |  aaddddbbmmmm__(...)
     |      addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addbmm`
     |  
     |  aaddddccddiivv(...)
     |      addcdiv(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcdiv`
     |  
     |  aaddddccddiivv__(...)
     |      addcdiv_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcdiv`
     |  
     |  aaddddccmmuull(...)
     |      addcmul(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      See :func:`torch.addcmul`
     |  
     |  aaddddccmmuull__(...)
     |      addcmul_(tensor1, tensor2, *, value=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addcmul`
     |  
     |  aaddddmmmm(...)
     |      addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmm`
     |  
     |  aaddddmmmm__(...)
     |      addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmm`
     |  
     |  aaddddmmvv(...)
     |      addmv(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addmv`
     |  
     |  aaddddmmvv__(...)
     |      addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addmv`
     |  
     |  aaddddrr(...)
     |      addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.addr`
     |  
     |  aaddddrr__(...)
     |      addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.addr`
     |  
     |  aalliiggnn__aass(...)
     |      align_as(other) -> Tensor
     |      
     |      Permutes the dimensions of the :attr:`self` tensor to match the dimension order
     |      in the :attr:`other` tensor, adding size-one dims for any new names.
     |      
     |      This operation is useful for explicit broadcasting by names (see examples).
     |      
     |      All of the dims of :attr:`self` must be named in order to use this method.
     |      The resulting tensor is a view on the original tensor.
     |      
     |      All dimension names of :attr:`self` must be present in ``other.names``.
     |      :attr:`other` may contain named dimensions that are not in ``self.names``;
     |      the output tensor has a size-one dimension for each of those new names.
     |      
     |      To align a tensor to a specific order, use :meth:`~Tensor.align_to`.
     |      
     |      Examples::
     |      
     |          # Example 1: Applying a mask
     |          >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')
     |          >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))
     |          >>> imgs.masked_fill_(mask.align_as(imgs), 0)
     |      
     |      
     |          # Example 2: Applying a per-channel-scale
     |          >>> def scale_channels(input, scale):
     |          >>>    scale = scale.refine_names('C')
     |          >>>    return input * scale.align_as(input)
     |      
     |          >>> num_channels = 3
     |          >>> scale = torch.randn(num_channels, names=('C',))
     |          >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))
     |          >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))
     |          >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))
     |      
     |          # scale_channels is agnostic to the dimension order of the input
     |          >>> scale_channels(imgs, scale)
     |          >>> scale_channels(more_imgs, scale)
     |          >>> scale_channels(videos, scale)
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  aallll(...)
     |      all(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.all`
     |  
     |  aallllcclloossee(...)
     |      allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.allclose`
     |  
     |  aammaaxx(...)
     |      amax(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amax`
     |  
     |  aammiinn(...)
     |      amin(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.amin`
     |  
     |  aannggllee(...)
     |      angle() -> Tensor
     |      
     |      See :func:`torch.angle`
     |  
     |  aannyy(...)
     |      any(dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.any`
     |  
     |  aappppllyy__(...)
     |      apply_(callable) -> Tensor
     |      
     |      Applies the function :attr:`callable` to each element in the tensor, replacing
     |      each element with the value returned by :attr:`callable`.
     |      
     |      .. note::
     |      
     |          This function only works with CPU tensors and should not be used in code
     |          sections that require high performance.
     |  
     |  aarrccccooss(...)
     |      arccos() -> Tensor
     |      
     |      See :func:`torch.arccos`
     |  
     |  aarrccccooss__(...)
     |      arccos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccos`
     |  
     |  aarrccccoosshh(...)
     |      acosh() -> Tensor
     |      
     |      See :func:`torch.arccosh`
     |  
     |  aarrccccoosshh__(...)
     |      acosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arccosh`
     |  
     |  aarrccssiinn(...)
     |      arcsin() -> Tensor
     |      
     |      See :func:`torch.arcsin`
     |  
     |  aarrccssiinn__(...)
     |      arcsin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsin`
     |  
     |  aarrccssiinnhh(...)
     |      arcsinh() -> Tensor
     |      
     |      See :func:`torch.arcsinh`
     |  
     |  aarrccssiinnhh__(...)
     |      arcsinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arcsinh`
     |  
     |  aarrccttaann(...)
     |      arctan() -> Tensor
     |      
     |      See :func:`torch.arctan`
     |  
     |  aarrccttaann__(...)
     |      arctan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctan`
     |  
     |  aarrccttaannhh(...)
     |      arctanh() -> Tensor
     |      
     |      See :func:`torch.arctanh`
     |  
     |  aarrccttaannhh__(...)
     |      arctanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.arctanh`
     |  
     |  aarrggmmaaxx(...)
     |      argmax(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmax`
     |  
     |  aarrggmmiinn(...)
     |      argmin(dim=None, keepdim=False) -> LongTensor
     |      
     |      See :func:`torch.argmin`
     |  
     |  aarrggssoorrtt(...)
     |      argsort(dim=-1, descending=False) -> LongTensor
     |      
     |      See :func:`torch.argsort`
     |  
     |  aass__ssttrriiddeedd(...)
     |      as_strided(size, stride, storage_offset=0) -> Tensor
     |      
     |      See :func:`torch.as_strided`
     |  
     |  aass__ssttrriiddeedd__(...)
     |  
     |  aass__ssuubbccllaassss(...)
     |      as_subclass(cls) -> Tensor
     |      
     |      Makes a ``cls`` instance with the same data pointer as ``self``. Changes
     |      in the output mirror changes in ``self``, and the output stays attached
     |      to the autograd graph. ``cls`` must be a subclass of ``Tensor``.
     |  
     |  aassiinn(...)
     |      asin() -> Tensor
     |      
     |      See :func:`torch.asin`
     |  
     |  aassiinn__(...)
     |      asin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asin`
     |  
     |  aassiinnhh(...)
     |      asinh() -> Tensor
     |      
     |      See :func:`torch.asinh`
     |  
     |  aassiinnhh__(...)
     |      asinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.asinh`
     |  
     |  aattaann(...)
     |      atan() -> Tensor
     |      
     |      See :func:`torch.atan`
     |  
     |  aattaann22(...)
     |      atan2(other) -> Tensor
     |      
     |      See :func:`torch.atan2`
     |  
     |  aattaann22__(...)
     |      atan2_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan2`
     |  
     |  aattaann__(...)
     |      atan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atan`
     |  
     |  aattaannhh(...)
     |      atanh() -> Tensor
     |      
     |      See :func:`torch.atanh`
     |  
     |  aattaannhh__(...)
     |      atanh_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.atanh`
     |  
     |  bbaaddddbbmmmm(...)
     |      baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.baddbmm`
     |  
     |  bbaaddddbbmmmm__(...)
     |      baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.baddbmm`
     |  
     |  bbeerrnnoouullllii(...)
     |      bernoulli(*, generator=None) -> Tensor
     |      
     |      Returns a result tensor where each :math:`\texttt{result[i]}` is independently
     |      sampled from :math:`\text{Bernoulli}(\texttt{self[i]})`. :attr:`self` must have
     |      floating point ``dtype``, and the result will have the same ``dtype``.
     |      
     |      See :func:`torch.bernoulli`
     |  
     |  bbeerrnnoouullllii__(...)
     |      .. function:: bernoulli_(p=0.5, *, generator=None) -> Tensor
     |      
     |          Fills each location of :attr:`self` with an independent sample from
     |          :math:`\text{Bernoulli}(\texttt{p})`. :attr:`self` can have integral
     |          ``dtype``.
     |      
     |      .. function:: bernoulli_(p_tensor, *, generator=None) -> Tensor
     |      
     |          :attr:`p_tensor` should be a tensor containing probabilities to be used for
     |          drawing the binary random number.
     |      
     |          The :math:`\text{i}^{th}` element of :attr:`self` tensor will be set to a
     |          value sampled from :math:`\text{Bernoulli}(\texttt{p\_tensor[i]})`.
     |      
     |          :attr:`self` can have integral ``dtype``, but :attr:`p_tensor` must have
     |          floating point ``dtype``.
     |      
     |      See also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`
     |  
     |  bbffllooaatt1166(...)
     |      bfloat16(memory_format=torch.preserve_format) -> Tensor
     |      ``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbiinnccoouunntt(...)
     |      bincount(weights=None, minlength=0) -> Tensor
     |      
     |      See :func:`torch.bincount`
     |  
     |  bbiittwwiissee__aanndd(...)
     |      bitwise_and() -> Tensor
     |      
     |      See :func:`torch.bitwise_and`
     |  
     |  bbiittwwiissee__aanndd__(...)
     |      bitwise_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_and`
     |  
     |  bbiittwwiissee__nnoott(...)
     |      bitwise_not() -> Tensor
     |      
     |      See :func:`torch.bitwise_not`
     |  
     |  bbiittwwiissee__nnoott__(...)
     |      bitwise_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_not`
     |  
     |  bbiittwwiissee__oorr(...)
     |      bitwise_or() -> Tensor
     |      
     |      See :func:`torch.bitwise_or`
     |  
     |  bbiittwwiissee__oorr__(...)
     |      bitwise_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_or`
     |  
     |  bbiittwwiissee__xxoorr(...)
     |      bitwise_xor() -> Tensor
     |      
     |      See :func:`torch.bitwise_xor`
     |  
     |  bbiittwwiissee__xxoorr__(...)
     |      bitwise_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.bitwise_xor`
     |  
     |  bbmmmm(...)
     |      bmm(batch2) -> Tensor
     |      
     |      See :func:`torch.bmm`
     |  
     |  bbooooll(...)
     |      bool(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  bbrrooaaddccaasstt__ttoo(...)
     |      broadcast_to(shape) -> Tensor
     |      
     |      See :func:`torch.broadcast_to`.
     |  
     |  bbyyttee(...)
     |      byte(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccaauucchhyy__(...)
     |      cauchy_(median=0, sigma=1, *, generator=None) -> Tensor
     |      
     |      Fills the tensor with numbers drawn from the Cauchy distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{\pi} \dfrac{\sigma}{(x - \text{median})^2 + \sigma^2}
     |  
     |  cceeiill(...)
     |      ceil() -> Tensor
     |      
     |      See :func:`torch.ceil`
     |  
     |  cceeiill__(...)
     |      ceil_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ceil`
     |  
     |  cchhaarr(...)
     |      char(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  cchhoolleesskkyy(...)
     |      cholesky(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky`
     |  
     |  cchhoolleesskkyy__iinnvveerrssee(...)
     |      cholesky_inverse(upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_inverse`
     |  
     |  cchhoolleesskkyy__ssoollvvee(...)
     |      cholesky_solve(input2, upper=False) -> Tensor
     |      
     |      See :func:`torch.cholesky_solve`
     |  
     |  cchhuunnkk(...)
     |      chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.chunk`
     |  
     |  ccllaammpp(...)
     |      clamp(min, max) -> Tensor
     |      
     |      See :func:`torch.clamp`
     |  
     |  ccllaammpp__(...)
     |      clamp_(min, max) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.clamp`
     |  
     |  ccllaammpp__mmaaxx(...)
     |  
     |  ccllaammpp__mmaaxx__(...)
     |  
     |  ccllaammpp__mmiinn(...)
     |  
     |  ccllaammpp__mmiinn__(...)
     |  
     |  cclliipp(...)
     |      clip(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp`.
     |  
     |  cclliipp__(...)
     |      clip_(min, max) -> Tensor
     |      
     |      Alias for :meth:`~Tensor.clamp_`.
     |  
     |  cclloonnee(...)
     |      clone(*, memory_format=torch.preserve_format) -> Tensor
     |      
     |      See :func:`torch.clone`
     |  
     |  ccooaalleessccee(...)
     |      coalesce() -> Tensor
     |      
     |      Returns a coalesced copy of :attr:`self` if :attr:`self` is an
     |      :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
     |      
     |      Returns :attr:`self` if :attr:`self` is a coalesced tensor.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |  
     |  ccoonnjj(...)
     |      conj() -> Tensor
     |      
     |      See :func:`torch.conj`
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Returns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If
     |      :attr:`self` tensor is already in the specified memory format, this function returns the
     |      :attr:`self` tensor.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.contiguous_format``.
     |  
     |  ccooppyy__(...)
     |      copy_(src, non_blocking=False) -> Tensor
     |      
     |      Copies the elements from :attr:`src` into :attr:`self` tensor and returns
     |      :attr:`self`.
     |      
     |      The :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the :attr:`self` tensor. It may be of a different data type or reside on a
     |      different device.
     |      
     |      Args:
     |          src (Tensor): the source tensor to copy from
     |          non_blocking (bool): if ``True`` and this copy is between CPU and GPU,
     |              the copy may occur asynchronously with respect to the host. For other
     |              cases, this argument has no effect.
     |  
     |  ccooppyyssiiggnn(...)
     |      copysign(other) -> Tensor
     |      
     |      See :func:`torch.copysign`
     |  
     |  ccooppyyssiiggnn__(...)
     |      copysign_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.copysign`
     |  
     |  ccooss(...)
     |      cos() -> Tensor
     |      
     |      See :func:`torch.cos`
     |  
     |  ccooss__(...)
     |      cos_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cos`
     |  
     |  ccoosshh(...)
     |      cosh() -> Tensor
     |      
     |      See :func:`torch.cosh`
     |  
     |  ccoosshh__(...)
     |      cosh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cosh`
     |  
     |  ccoouunntt__nnoonnzzeerroo(...)
     |      count_nonzero(dim=None) -> Tensor
     |      
     |      See :func:`torch.count_nonzero`
     |  
     |  ccppuu(...)
     |      cpu(memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CPU memory.
     |      
     |      If this object is already in CPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccrroossss(...)
     |      cross(other, dim=-1) -> Tensor
     |      
     |      See :func:`torch.cross`
     |  
     |  ccuuddaa(...)
     |      cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in CUDA memory.
     |      
     |      If this object is already in CUDA memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination GPU device.
     |              Defaults to the current CUDA device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ccuummmmaaxx(...)
     |      cummax(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummax`
     |  
     |  ccuummmmiinn(...)
     |      cummin(dim) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.cummin`
     |  
     |  ccuummpprroodd(...)
     |      cumprod(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumprod`
     |  
     |  ccuummpprroodd__(...)
     |      cumprod_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumprod`
     |  
     |  ccuummssuumm(...)
     |      cumsum(dim, dtype=None) -> Tensor
     |      
     |      See :func:`torch.cumsum`
     |  
     |  ccuummssuumm__(...)
     |      cumsum_(dim, dtype=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.cumsum`
     |  
     |  ddaattaa__ppttrr(...)
     |      data_ptr() -> int
     |      
     |      Returns the address of the first element of :attr:`self` tensor.
     |  
     |  ddeegg22rraadd(...)
     |      deg2rad() -> Tensor
     |      
     |      See :func:`torch.deg2rad`
     |  
     |  ddeegg22rraadd__(...)
     |      deg2rad_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.deg2rad`
     |  
     |  ddeennssee__ddiimm(...)
     |      dense_dim() -> int
     |      
     |      Return the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ddeeqquuaannttiizzee(...)
     |      dequantize() -> Tensor
     |      
     |      Given a quantized Tensor, dequantize it and return the dequantized float Tensor.
     |  
     |  ddeett(...)
     |      det() -> Tensor
     |      
     |      See :func:`torch.det`
     |  
     |  ddiiaagg(...)
     |      diag(diagonal=0) -> Tensor
     |      
     |      See :func:`torch.diag`
     |  
     |  ddiiaagg__eemmbbeedd(...)
     |      diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor
     |      
     |      See :func:`torch.diag_embed`
     |  
     |  ddiiaaggffllaatt(...)
     |      diagflat(offset=0) -> Tensor
     |      
     |      See :func:`torch.diagflat`
     |  
     |  ddiiaaggoonnaall(...)
     |      diagonal(offset=0, dim1=0, dim2=1) -> Tensor
     |      
     |      See :func:`torch.diagonal`
     |  
     |  ddiiffff(...)
     |      diff(n=1, dim=-1, prepend=None, append=None) -> Tensor
     |      
     |      See :func:`torch.diff`
     |  
     |  ddiiggaammmmaa(...)
     |      digamma() -> Tensor
     |      
     |      See :func:`torch.digamma`
     |  
     |  ddiiggaammmmaa__(...)
     |      digamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.digamma`
     |  
     |  ddiimm(...)
     |      dim() -> int
     |      
     |      Returns the number of dimensions of :attr:`self` tensor.
     |  
     |  ddiisstt(...)
     |      dist(other, p=2) -> Tensor
     |      
     |      See :func:`torch.dist`
     |  
     |  ddiivv(...)
     |      div(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.div`
     |  
     |  ddiivv__(...)
     |      div_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.div`
     |  
     |  ddiivviiddee(...)
     |      divide(value, *, rounding_mode=None) -> Tensor
     |      
     |      See :func:`torch.divide`
     |  
     |  ddiivviiddee__(...)
     |      divide_(value, *, rounding_mode=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.divide`
     |  
     |  ddoott(...)
     |      dot(other) -> Tensor
     |      
     |      See :func:`torch.dot`
     |  
     |  ddoouubbllee(...)
     |      double(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  eeiigg(...)
     |      eig(eigenvectors=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.eig`
     |  
     |  eelleemmeenntt__ssiizzee(...)
     |      element_size() -> int
     |      
     |      Returns the size in bytes of an individual element.
     |      
     |      Example::
     |      
     |          >>> torch.tensor([]).element_size()
     |          4
     |          >>> torch.tensor([], dtype=torch.uint8).element_size()
     |          1
     |  
     |  eeqq(...)
     |      eq(other) -> Tensor
     |      
     |      See :func:`torch.eq`
     |  
     |  eeqq__(...)
     |      eq_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.eq`
     |  
     |  eeqquuaall(...)
     |      equal(other) -> bool
     |      
     |      See :func:`torch.equal`
     |  
     |  eerrff(...)
     |      erf() -> Tensor
     |      
     |      See :func:`torch.erf`
     |  
     |  eerrff__(...)
     |      erf_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erf`
     |  
     |  eerrffcc(...)
     |      erfc() -> Tensor
     |      
     |      See :func:`torch.erfc`
     |  
     |  eerrffcc__(...)
     |      erfc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfc`
     |  
     |  eerrffiinnvv(...)
     |      erfinv() -> Tensor
     |      
     |      See :func:`torch.erfinv`
     |  
     |  eerrffiinnvv__(...)
     |      erfinv_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.erfinv`
     |  
     |  eexxpp(...)
     |      exp() -> Tensor
     |      
     |      See :func:`torch.exp`
     |  
     |  eexxpp22(...)
     |      exp2() -> Tensor
     |      
     |      See :func:`torch.exp2`
     |  
     |  eexxpp22__(...)
     |      exp2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp2`
     |  
     |  eexxpp__(...)
     |      exp_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.exp`
     |  
     |  eexxppaanndd(...)
     |      expand(*sizes) -> Tensor
     |      
     |      Returns a new view of the :attr:`self` tensor with singleton dimensions expanded
     |      to a larger size.
     |      
     |      Passing -1 as the size for a dimension means not changing the size of
     |      that dimension.
     |      
     |      Tensor can be also expanded to a larger number of dimensions, and the
     |      new ones will be appended at the front. For the new dimensions, the
     |      size cannot be set to -1.
     |      
     |      Expanding a tensor does not allocate new memory, but only creates a
     |      new view on the existing tensor where a dimension of size one is
     |      expanded to a larger size by setting the ``stride`` to 0. Any dimension
     |      of size 1 can be expanded to an arbitrary value without allocating new
     |      memory.
     |      
     |      Args:
     |          *sizes (torch.Size or int...): the desired expanded size
     |      
     |      .. warning::
     |      
     |          More than one element of an expanded tensor may refer to a single
     |          memory location. As a result, in-place operations (especially ones that
     |          are vectorized) may result in incorrect behavior. If you need to write
     |          to the tensors, please clone them first.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1], [2], [3]])
     |          >>> x.size()
     |          torch.Size([3, 1])
     |          >>> x.expand(3, 4)
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |          >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension
     |          tensor([[ 1,  1,  1,  1],
     |                  [ 2,  2,  2,  2],
     |                  [ 3,  3,  3,  3]])
     |  
     |  eexxppaanndd__aass(...)
     |      expand_as(other) -> Tensor
     |      
     |      Expand this tensor to the same size as :attr:`other`.
     |      ``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.
     |      
     |      Please see :meth:`~Tensor.expand` for more information about ``expand``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  eexxppmm11(...)
     |      expm1() -> Tensor
     |      
     |      See :func:`torch.expm1`
     |  
     |  eexxppmm11__(...)
     |      expm1_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.expm1`
     |  
     |  eexxppoonneennttiiaall__(...)
     |      exponential_(lambd=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the exponential distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \lambda e^{-\lambda x}
     |  
     |  ffiillll__(...)
     |      fill_(value) -> Tensor
     |      
     |      Fills :attr:`self` tensor with the specified value.
     |  
     |  ffiillll__ddiiaaggoonnaall__(...)
     |      fill_diagonal_(fill_value, wrap=False) -> Tensor
     |      
     |      Fill the main diagonal of a tensor that has at least 2-dimensions.
     |      When dims>2, all dimensions of input must be of equal length.
     |      This function modifies the input tensor in-place, and returns the input tensor.
     |      
     |      Arguments:
     |          fill_value (Scalar): the fill value
     |          wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.
     |      
     |      Example::
     |      
     |          >>> a = torch.zeros(3, 3)
     |          >>> a.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |          >>> b = torch.zeros(7, 3)
     |          >>> b.fill_diagonal_(5)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.],
     |                  [0., 0., 0.]])
     |          >>> c = torch.zeros(7, 3)
     |          >>> c.fill_diagonal_(5, wrap=True)
     |          tensor([[5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.],
     |                  [0., 0., 0.],
     |                  [5., 0., 0.],
     |                  [0., 5., 0.],
     |                  [0., 0., 5.]])
     |  
     |  ffiixx(...)
     |      fix() -> Tensor
     |      
     |      See :func:`torch.fix`.
     |  
     |  ffiixx__(...)
     |      fix_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fix`
     |  
     |  ffllaatttteenn(...)
     |      flatten(input, start_dim=0, end_dim=-1) -> Tensor
     |      
     |      see :func:`torch.flatten`
     |  
     |  fflliipp(...)
     |      flip(dims) -> Tensor
     |      
     |      See :func:`torch.flip`
     |  
     |  fflliippllrr(...)
     |      fliplr() -> Tensor
     |      
     |      See :func:`torch.fliplr`
     |  
     |  fflliippuudd(...)
     |      flipud() -> Tensor
     |      
     |      See :func:`torch.flipud`
     |  
     |  ffllooaatt(...)
     |      float(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ffllooaatt__ppoowweerr(...)
     |      float_power(exponent) -> Tensor
     |      
     |      See :func:`torch.float_power`
     |  
     |  ffllooaatt__ppoowweerr__(...)
     |      float_power_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.float_power`
     |  
     |  fflloooorr(...)
     |      floor() -> Tensor
     |      
     |      See :func:`torch.floor`
     |  
     |  fflloooorr__(...)
     |      floor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor`
     |  
     |  fflloooorr__ddiivviiddee(...)
     |      floor_divide(value) -> Tensor
     |      
     |      See :func:`torch.floor_divide`
     |  
     |  fflloooorr__ddiivviiddee__(...)
     |      floor_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.floor_divide`
     |  
     |  ffmmaaxx(...)
     |      fmax(other) -> Tensor
     |      
     |      See :func:`torch.fmax`
     |  
     |  ffmmiinn(...)
     |      fmin(other) -> Tensor
     |      
     |      See :func:`torch.fmin`
     |  
     |  ffmmoodd(...)
     |      fmod(divisor) -> Tensor
     |      
     |      See :func:`torch.fmod`
     |  
     |  ffmmoodd__(...)
     |      fmod_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.fmod`
     |  
     |  ffrraacc(...)
     |      frac() -> Tensor
     |      
     |      See :func:`torch.frac`
     |  
     |  ffrraacc__(...)
     |      frac_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.frac`
     |  
     |  ggaatthheerr(...)
     |      gather(dim, index) -> Tensor
     |      
     |      See :func:`torch.gather`
     |  
     |  ggccdd(...)
     |      gcd(other) -> Tensor
     |      
     |      See :func:`torch.gcd`
     |  
     |  ggccdd__(...)
     |      gcd_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gcd`
     |  
     |  ggee(...)
     |      ge(other) -> Tensor
     |      
     |      See :func:`torch.ge`.
     |  
     |  ggee__(...)
     |      ge_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ge`.
     |  
     |  ggeeoommeettrriicc__(...)
     |      geometric_(p, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements drawn from the geometric distribution:
     |      
     |      .. math::
     |      
     |          f(X=k) = p^{k - 1} (1 - p)
     |  
     |  ggeeqqrrff(...)
     |      geqrf() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.geqrf`
     |  
     |  ggeerr(...)
     |      ger(vec2) -> Tensor
     |      
     |      See :func:`torch.ger`
     |  
     |  ggeett__ddeevviiccee(...)
     |      get_device() -> Device ordinal (Integer)
     |      
     |      For CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.
     |      For CPU tensors, an error is thrown.
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(3, 4, 5, device='cuda:0')
     |          >>> x.get_device()
     |          0
     |          >>> x.cpu().get_device()  # RuntimeError: get_device is not implemented for type torch.FloatTensor
     |  
     |  ggrreeaatteerr(...)
     |      greater(other) -> Tensor
     |      
     |      See :func:`torch.greater`.
     |  
     |  ggrreeaatteerr__(...)
     |      greater_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater`.
     |  
     |  ggrreeaatteerr__eeqquuaall(...)
     |      greater_equal(other) -> Tensor
     |      
     |      See :func:`torch.greater_equal`.
     |  
     |  ggrreeaatteerr__eeqquuaall__(...)
     |      greater_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.greater_equal`.
     |  
     |  ggtt(...)
     |      gt(other) -> Tensor
     |      
     |      See :func:`torch.gt`.
     |  
     |  ggtt__(...)
     |      gt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.gt`.
     |  
     |  hhaallff(...)
     |      half(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  hhaarrddsshhrriinnkk(...)
     |      hardshrink(lambd=0.5) -> Tensor
     |      
     |      See :func:`torch.nn.functional.hardshrink`
     |  
     |  hhaass__nnaammeess(...)
     |      Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.
     |  
     |  hheeaavviissiiddee(...)
     |      heaviside(values) -> Tensor
     |      
     |      See :func:`torch.heaviside`
     |  
     |  hheeaavviissiiddee__(...)
     |      heaviside_(values) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.heaviside`
     |  
     |  hhiissttcc(...)
     |      histc(bins=100, min=0, max=0) -> Tensor
     |      
     |      See :func:`torch.histc`
     |  
     |  hhyyppoott(...)
     |      hypot(other) -> Tensor
     |      
     |      See :func:`torch.hypot`
     |  
     |  hhyyppoott__(...)
     |      hypot_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.hypot`
     |  
     |  ii00(...)
     |      i0() -> Tensor
     |      
     |      See :func:`torch.i0`
     |  
     |  ii00__(...)
     |      i0_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.i0`
     |  
     |  iiggaammmmaa(...)
     |      igamma(other) -> Tensor
     |      
     |      See :func:`torch.igamma`
     |  
     |  iiggaammmmaa__(...)
     |      igamma_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.igamma`
     |  
     |  iiggaammmmaacc(...)
     |      igammac(other) -> Tensor
     |      See :func:`torch.igammac`
     |  
     |  iiggaammmmaacc__(...)
     |      igammac_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.igammac`
     |  
     |  iinnddeexx__aadddd(...)
     |      index_add(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_add_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_add_`.
     |  
     |  iinnddeexx__aadddd__(...)
     |      index_add_(dim, index, tensor) -> Tensor
     |      
     |      Accumulate the elements of :attr:`tensor` into the :attr:`self` tensor by adding
     |      to the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is added to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (IntTensor or LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to add
     |      
     |      Example::
     |      
     |          >>> x = torch.ones(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_add_(0, index, t)
     |          tensor([[  2.,   3.,   4.],
     |                  [  1.,   1.,   1.],
     |                  [  8.,   9.,  10.],
     |                  [  1.,   1.,   1.],
     |                  [  5.,   6.,   7.]])
     |  
     |  iinnddeexx__ccooppyy(...)
     |      index_copy(tensor1, dim, index, tensor2) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_copy_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_copy_`.
     |  
     |  iinnddeexx__ccooppyy__(...)
     |      index_copy_(dim, index, tensor) -> Tensor
     |      
     |      Copies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting
     |      the indices in the order given in :attr:`index`. For example, if ``dim == 0``
     |      and ``index[i] == j``, then the ``i``\ th row of :attr:`tensor` is copied to the
     |      ``j``\ th row of :attr:`self`.
     |      
     |      The :attr:`dim`\ th dimension of :attr:`tensor` must have the same size as the
     |      length of :attr:`index` (which must be a vector), and all other dimensions must
     |      match :attr:`self`, or an error will be raised.
     |      
     |      .. note::
     |          If :attr:`index` contains duplicate entries, multiple elements from
     |          :attr:`tensor` will be copied to the same index of :attr:`self`. The result
     |          is nondeterministic since it depends on which copy occurs last.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`tensor` to select from
     |          tensor (Tensor): the tensor containing values to copy
     |      
     |      Example::
     |      
     |          >>> x = torch.zeros(5, 3)
     |          >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 4, 2])
     |          >>> x.index_copy_(0, index, t)
     |          tensor([[ 1.,  2.,  3.],
     |                  [ 0.,  0.,  0.],
     |                  [ 7.,  8.,  9.],
     |                  [ 0.,  0.,  0.],
     |                  [ 4.,  5.,  6.]])
     |  
     |  iinnddeexx__ffiillll(...)
     |      index_fill(tensor1, dim, index, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.index_fill_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_fill_`.
     |  
     |  iinnddeexx__ffiillll__(...)
     |      index_fill_(dim, index, val) -> Tensor
     |      
     |      Fills the elements of the :attr:`self` tensor with value :attr:`val` by
     |      selecting the indices in the order given in :attr:`index`.
     |      
     |      Args:
     |          dim (int): dimension along which to index
     |          index (LongTensor): indices of :attr:`self` tensor to fill in
     |          val (float): the value to fill with
     |      
     |      Example::
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)
     |          >>> index = torch.tensor([0, 2])
     |          >>> x.index_fill_(1, index, -1)
     |          tensor([[-1.,  2., -1.],
     |                  [-1.,  5., -1.],
     |                  [-1.,  8., -1.]])
     |  
     |  iinnddeexx__ppuutt(...)
     |      index_put(tensor1, indices, values, accumulate=False) -> Tensor
     |      
     |      Out-place version of :meth:`~Tensor.index_put_`.
     |      `tensor1` corresponds to `self` in :meth:`torch.Tensor.index_put_`.
     |  
     |  iinnddeexx__ppuutt__(...)
     |      index_put_(indices, values, accumulate=False) -> Tensor
     |      
     |      Puts values from the tensor :attr:`values` into the tensor :attr:`self` using
     |      the indices specified in :attr:`indices` (which is a tuple of Tensors). The
     |      expression ``tensor.index_put_(indices, values)`` is equivalent to
     |      ``tensor[indices] = values``. Returns :attr:`self`.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (tuple of LongTensor): tensors used to index into `self`.
     |          values (Tensor): tensor of same dtype as `self`.
     |          accumulate (bool): whether to accumulate into self
     |  
     |  iinnddeexx__sseelleecctt(...)
     |      index_select(dim, index) -> Tensor
     |      
     |      See :func:`torch.index_select`
     |  
     |  iinnddiicceess(...)
     |      indices() -> Tensor
     |      
     |      Return the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.values`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  iinnnneerr(...)
     |      inner(other) -> Tensor
     |      
     |      See :func:`torch.inner`.
     |  
     |  iinntt(...)
     |      int(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  iinntt__rreepprr(...)
     |      int_repr() -> Tensor
     |      
     |      Given a quantized Tensor,
     |      ``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the
     |      underlying uint8_t values of the given Tensor.
     |  
     |  iinnvveerrssee(...)
     |      inverse() -> Tensor
     |      
     |      See :func:`torch.inverse`
     |  
     |  iiss__ccooaalleesscceedd(...)
     |      is_coalesced() -> bool
     |      
     |      Returns ``True`` if :attr:`self` is a :ref:`sparse COO tensor
     |      <sparse-coo-docs>` that is coalesced, ``False`` otherwise.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.
     |  
     |  iiss__ccoommpplleexx(...)
     |      is_complex() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a complex data type.
     |  
     |  iiss__ccoonnttiigguuoouuss(...)
     |      is_contiguous(memory_format=torch.contiguous_format) -> bool
     |      
     |      Returns True if :attr:`self` tensor is contiguous in memory in the order specified
     |      by memory format.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation
     |              order. Default: ``torch.contiguous_format``.
     |  
     |  iiss__ddiissttrriibbuutteedd(...)
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt(...)
     |      is_floating_point() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a floating point data type.
     |  
     |  iiss__nnoonnzzeerroo(...)
     |  
     |  iiss__ppiinnnneedd(...)
     |      Returns true if this tensor resides in pinned memory.
     |  
     |  iiss__ssaammee__ssiizzee(...)
     |  
     |  iiss__sseett__ttoo(...)
     |      is_set_to(tensor) -> bool
     |      
     |      Returns True if both tensors are pointing to the exact same memory (same
     |      storage, offset, size and stride).
     |  
     |  iiss__ssiiggnneedd(...)
     |      is_signed() -> bool
     |      
     |      Returns True if the data type of :attr:`self` is a signed data type.
     |  
     |  iisscclloossee(...)
     |      isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
     |      
     |      See :func:`torch.isclose`
     |  
     |  iissffiinniittee(...)
     |      isfinite() -> Tensor
     |      
     |      See :func:`torch.isfinite`
     |  
     |  iissiinnff(...)
     |      isinf() -> Tensor
     |      
     |      See :func:`torch.isinf`
     |  
     |  iissnnaann(...)
     |      isnan() -> Tensor
     |      
     |      See :func:`torch.isnan`
     |  
     |  iissnneeggiinnff(...)
     |      isneginf() -> Tensor
     |      
     |      See :func:`torch.isneginf`
     |  
     |  iissppoossiinnff(...)
     |      isposinf() -> Tensor
     |      
     |      See :func:`torch.isposinf`
     |  
     |  iissrreeaall(...)
     |      isreal() -> Tensor
     |      
     |      See :func:`torch.isreal`
     |  
     |  iitteemm(...)
     |      item() -> number
     |      
     |      Returns the value of this tensor as a standard Python number. This only works
     |      for tensors with one element. For other cases, see :meth:`~Tensor.tolist`.
     |      
     |      This operation is not differentiable.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1.0])
     |          >>> x.item()
     |          1.0
     |  
     |  kkrroonn(...)
     |      kron(other) -> Tensor
     |      
     |      See :func:`torch.kron`
     |  
     |  kktthhvvaalluuee(...)
     |      kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.kthvalue`
     |  
     |  llccmm(...)
     |      lcm(other) -> Tensor
     |      
     |      See :func:`torch.lcm`
     |  
     |  llccmm__(...)
     |      lcm_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lcm`
     |  
     |  llddeexxpp(...)
     |      ldexp(other) -> Tensor
     |      
     |      See :func:`torch.ldexp`
     |  
     |  llddeexxpp__(...)
     |      ldexp_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ldexp`
     |  
     |  llee(...)
     |      le(other) -> Tensor
     |      
     |      See :func:`torch.le`.
     |  
     |  llee__(...)
     |      le_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.le`.
     |  
     |  lleerrpp(...)
     |      lerp(end, weight) -> Tensor
     |      
     |      See :func:`torch.lerp`
     |  
     |  lleerrpp__(...)
     |      lerp_(end, weight) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lerp`
     |  
     |  lleessss(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.less`.
     |  
     |  lleessss__(...)
     |      less_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less`.
     |  
     |  lleessss__eeqquuaall(...)
     |      less_equal(other) -> Tensor
     |      
     |      See :func:`torch.less_equal`.
     |  
     |  lleessss__eeqquuaall__(...)
     |      less_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.less_equal`.
     |  
     |  llggaammmmaa(...)
     |      lgamma() -> Tensor
     |      
     |      See :func:`torch.lgamma`
     |  
     |  llggaammmmaa__(...)
     |      lgamma_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lgamma`
     |  
     |  lloogg(...)
     |      log() -> Tensor
     |      
     |      See :func:`torch.log`
     |  
     |  lloogg1100(...)
     |      log10() -> Tensor
     |      
     |      See :func:`torch.log10`
     |  
     |  lloogg1100__(...)
     |      log10_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log10`
     |  
     |  lloogg11pp(...)
     |      log1p() -> Tensor
     |      
     |      See :func:`torch.log1p`
     |  
     |  lloogg11pp__(...)
     |      log1p_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log1p`
     |  
     |  lloogg22(...)
     |      log2() -> Tensor
     |      
     |      See :func:`torch.log2`
     |  
     |  lloogg22__(...)
     |      log2_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log2`
     |  
     |  lloogg__(...)
     |      log_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.log`
     |  
     |  lloogg__nnoorrmmaall__(...)
     |      log_normal_(mean=1, std=2, *, generator=None)
     |      
     |      Fills :attr:`self` tensor with numbers samples from the log-normal distribution
     |      parameterized by the given mean :math:`\mu` and standard deviation
     |      :math:`\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and
     |      standard deviation of the underlying normal distribution, and not of the
     |      returned distribution:
     |      
     |      .. math::
     |      
     |          f(x) = \dfrac{1}{x \sigma \sqrt{2\pi}}\ e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}
     |  
     |  lloogg__ssooffttmmaaxx(...)
     |  
     |  llooggaaddddeexxpp(...)
     |      logaddexp(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp`
     |  
     |  llooggaaddddeexxpp22(...)
     |      logaddexp2(other) -> Tensor
     |      
     |      See :func:`torch.logaddexp2`
     |  
     |  llooggccuummssuummeexxpp(...)
     |      logcumsumexp(dim) -> Tensor
     |      
     |      See :func:`torch.logcumsumexp`
     |  
     |  llooggddeett(...)
     |      logdet() -> Tensor
     |      
     |      See :func:`torch.logdet`
     |  
     |  llooggiiccaall__aanndd(...)
     |      logical_and() -> Tensor
     |      
     |      See :func:`torch.logical_and`
     |  
     |  llooggiiccaall__aanndd__(...)
     |      logical_and_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_and`
     |  
     |  llooggiiccaall__nnoott(...)
     |      logical_not() -> Tensor
     |      
     |      See :func:`torch.logical_not`
     |  
     |  llooggiiccaall__nnoott__(...)
     |      logical_not_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_not`
     |  
     |  llooggiiccaall__oorr(...)
     |      logical_or() -> Tensor
     |      
     |      See :func:`torch.logical_or`
     |  
     |  llooggiiccaall__oorr__(...)
     |      logical_or_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_or`
     |  
     |  llooggiiccaall__xxoorr(...)
     |      logical_xor() -> Tensor
     |      
     |      See :func:`torch.logical_xor`
     |  
     |  llooggiiccaall__xxoorr__(...)
     |      logical_xor_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logical_xor`
     |  
     |  llooggiitt(...)
     |      logit() -> Tensor
     |      
     |      See :func:`torch.logit`
     |  
     |  llooggiitt__(...)
     |      logit_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.logit`
     |  
     |  llooggssuummeexxpp(...)
     |      logsumexp(dim, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.logsumexp`
     |  
     |  lloonngg(...)
     |      long(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  llssttssqq(...)
     |      lstsq(A) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.lstsq`
     |  
     |  lltt(...)
     |      lt(other) -> Tensor
     |      
     |      See :func:`torch.lt`.
     |  
     |  lltt__(...)
     |      lt_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.lt`.
     |  
     |  lluu__ssoollvvee(...)
     |      lu_solve(LU_data, LU_pivots) -> Tensor
     |      
     |      See :func:`torch.lu_solve`
     |  
     |  mmaapp22__(...)
     |  
     |  mmaapp__(...)
     |      map_(tensor, callable)
     |      
     |      Applies :attr:`callable` for each element in :attr:`self` tensor and the given
     |      :attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and
     |      the given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.
     |      
     |      The :attr:`callable` should have the signature::
     |      
     |          def callable(a, b) -> number
     |  
     |  mmaasskkeedd__ffiillll(...)
     |      masked_fill(mask, value) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_fill_`
     |  
     |  mmaasskkeedd__ffiillll__(...)
     |      masked_fill_(mask, value)
     |      
     |      Fills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is
     |      True. The shape of :attr:`mask` must be
     |      :ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying
     |      tensor.
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          value (float): the value to fill in with
     |  
     |  mmaasskkeedd__ssccaatttteerr(...)
     |      masked_scatter(mask, tensor) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.masked_scatter_`
     |  
     |  mmaasskkeedd__ssccaatttteerr__(...)
     |      masked_scatter_(mask, source)
     |      
     |      Copies elements from :attr:`source` into :attr:`self` tensor at positions where
     |      the :attr:`mask` is True.
     |      The shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`
     |      with the shape of the underlying tensor. The :attr:`source` should have at least
     |      as many elements as the number of ones in :attr:`mask`
     |      
     |      Args:
     |          mask (BoolTensor): the boolean mask
     |          source (Tensor): the tensor to copy from
     |      
     |      .. note::
     |      
     |          The :attr:`mask` operates on the :attr:`self` tensor, not on the given
     |          :attr:`source` tensor.
     |  
     |  mmaasskkeedd__sseelleecctt(...)
     |      masked_select(mask) -> Tensor
     |      
     |      See :func:`torch.masked_select`
     |  
     |  mmaattmmuull(...)
     |      matmul(tensor2) -> Tensor
     |      
     |      See :func:`torch.matmul`
     |  
     |  mmaattrriixx__eexxpp(...)
     |      matrix_exp() -> Tensor
     |      
     |      See :func:`torch.matrix_exp`
     |  
     |  mmaattrriixx__ppoowweerr(...)
     |      matrix_power(n) -> Tensor
     |      
     |      See :func:`torch.matrix_power`
     |  
     |  mmaaxx(...)
     |      max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.max`
     |  
     |  mmaaxxiimmuumm(...)
     |      maximum(other) -> Tensor
     |      
     |      See :func:`torch.maximum`
     |  
     |  mmeeaann(...)
     |      mean(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.mean`
     |  
     |  mmeeddiiaann(...)
     |      median(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.median`
     |  
     |  mmiinn(...)
     |      min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)
     |      
     |      See :func:`torch.min`
     |  
     |  mmiinniimmuumm(...)
     |      minimum(other) -> Tensor
     |      
     |      See :func:`torch.minimum`
     |  
     |  mmmm(...)
     |      mm(mat2) -> Tensor
     |      
     |      See :func:`torch.mm`
     |  
     |  mmooddee(...)
     |      mode(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.mode`
     |  
     |  mmoovveeaaxxiiss(...)
     |      moveaxis(source, destination) -> Tensor
     |      
     |      See :func:`torch.moveaxis`
     |  
     |  mmoovveeddiimm(...)
     |      movedim(source, destination) -> Tensor
     |      
     |      See :func:`torch.movedim`
     |  
     |  mmssoorrtt(...)
     |      msort() -> Tensor
     |      
     |      See :func:`torch.msort`
     |  
     |  mmuull(...)
     |      mul(value) -> Tensor
     |      
     |      See :func:`torch.mul`.
     |  
     |  mmuull__(...)
     |      mul_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mul`.
     |  
     |  mmuullttiinnoommiiaall(...)
     |      multinomial(num_samples, replacement=False, *, generator=None) -> Tensor
     |      
     |      See :func:`torch.multinomial`
     |  
     |  mmuullttiippllyy(...)
     |      multiply(value) -> Tensor
     |      
     |      See :func:`torch.multiply`.
     |  
     |  mmuullttiippllyy__(...)
     |      multiply_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.multiply`.
     |  
     |  mmvv(...)
     |      mv(vec) -> Tensor
     |      
     |      See :func:`torch.mv`
     |  
     |  mmvvllggaammmmaa(...)
     |      mvlgamma(p) -> Tensor
     |      
     |      See :func:`torch.mvlgamma`
     |  
     |  mmvvllggaammmmaa__(...)
     |      mvlgamma_(p) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.mvlgamma`
     |  
     |  nnaann__ttoo__nnuumm(...)
     |      nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      See :func:`torch.nan_to_num`.
     |  
     |  nnaann__ttoo__nnuumm__(...)
     |      nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.nan_to_num`.
     |  
     |  nnaannmmeeddiiaann(...)
     |      nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.nanmedian`
     |  
     |  nnaannqquuaannttiillee(...)
     |      nanquantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.nanquantile`
     |  
     |  nnaannssuumm(...)
     |      nansum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.nansum`
     |  
     |  nnaarrrrooww(...)
     |      narrow(dimension, start, length) -> Tensor
     |      
     |      See :func:`torch.narrow`
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
     |          >>> x.narrow(0, 0, 2)
     |          tensor([[ 1,  2,  3],
     |                  [ 4,  5,  6]])
     |          >>> x.narrow(1, 1, 2)
     |          tensor([[ 2,  3],
     |                  [ 5,  6],
     |                  [ 8,  9]])
     |  
     |  nnaarrrrooww__ccooppyy(...)
     |      narrow_copy(dimension, start, length) -> Tensor
     |      
     |      Same as :meth:`Tensor.narrow` except returning a copy rather
     |      than shared storage.  This is primarily for sparse tensors, which
     |      do not have a shared-storage narrow method.  Calling ```narrow_copy``
     |      with ```dimemsion > self.sparse_dim()``` will return a copy with the
     |      relevant dense dimension narrowed, and ```self.shape``` updated accordingly.
     |  
     |  nnddiimmeennssiioonn(...)
     |      ndimension() -> int
     |      
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  nnee(...)
     |      ne(other) -> Tensor
     |      
     |      See :func:`torch.ne`.
     |  
     |  nnee__(...)
     |      ne_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.ne`.
     |  
     |  nneegg(...)
     |      neg() -> Tensor
     |      
     |      See :func:`torch.neg`
     |  
     |  nneegg__(...)
     |      neg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.neg`
     |  
     |  nneeggaattiivvee(...)
     |      negative() -> Tensor
     |      
     |      See :func:`torch.negative`
     |  
     |  nneeggaattiivvee__(...)
     |      negative_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.negative`
     |  
     |  nneelleemmeenntt(...)
     |      nelement() -> int
     |      
     |      Alias for :meth:`~Tensor.numel`
     |  
     |  nneeww(...)
     |  
     |  nneeww__eemmppttyy(...)
     |      new_empty(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with uninitialized data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty((2, 3))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__eemmppttyy__ssttrriiddeedd(...)
     |      new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` and strides :attr:`stride` filled with
     |      uninitialized data. By default, the returned Tensor has the same
     |      :class:`torch.dtype` and :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones(())
     |          >>> tensor.new_empty_strided((2, 3), (3, 1))
     |          tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],
     |                  [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])
     |  
     |  nneeww__ffuullll(...)
     |      new_full(size, fill_value, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with :attr:`fill_value`.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          fill_value (scalar): the number to fill the output tensor with.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.float64)
     |          >>> tensor.new_full((3, 4), 3.141592)
     |          tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416],
     |                  [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)
     |  
     |  nneeww__oonneess(...)
     |      new_ones(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``1``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.int32)
     |          >>> tensor.new_ones((2, 3))
     |          tensor([[ 1,  1,  1],
     |                  [ 1,  1,  1]], dtype=torch.int32)
     |  
     |  nneeww__tteennssoorr(...)
     |      new_tensor(data, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a new Tensor with :attr:`data` as the tensor data.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      .. warning::
     |      
     |          :func:`new_tensor` always copies :attr:`data`. If you have a Tensor
     |          ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
     |          or :func:`torch.Tensor.detach`.
     |          If you have a numpy array and want to avoid a copy, use
     |          :func:`torch.from_numpy`.
     |      
     |      .. warning::
     |      
     |          When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,
     |          and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``
     |          and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
     |          The equivalents using ``clone()`` and ``detach()`` are recommended.
     |      
     |      Args:
     |          data (array_like): The returned Tensor copies :attr:`data`.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.ones((2,), dtype=torch.int8)
     |          >>> data = [[0, 1], [2, 3]]
     |          >>> tensor.new_tensor(data)
     |          tensor([[ 0,  1],
     |                  [ 2,  3]], dtype=torch.int8)
     |  
     |  nneeww__zzeerrooss(...)
     |      new_zeros(size, dtype=None, device=None, requires_grad=False) -> Tensor
     |      
     |      Returns a Tensor of size :attr:`size` filled with ``0``.
     |      By default, the returned Tensor has the same :class:`torch.dtype` and
     |      :class:`torch.device` as this tensor.
     |      
     |      Args:
     |          size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
     |              shape of the output tensor.
     |          dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.
     |              Default: if None, same :class:`torch.dtype` as this tensor.
     |          device (:class:`torch.device`, optional): the desired device of returned tensor.
     |              Default: if None, same :class:`torch.device` as this tensor.
     |          requires_grad (bool, optional): If autograd should record operations on the
     |              returned tensor. Default: ``False``.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.tensor((), dtype=torch.float64)
     |          >>> tensor.new_zeros((2, 3))
     |          tensor([[ 0.,  0.,  0.],
     |                  [ 0.,  0.,  0.]], dtype=torch.float64)
     |  
     |  nneexxttaafftteerr(...)
     |      nextafter(other) -> Tensor
     |      See :func:`torch.nextafter`
     |  
     |  nneexxttaafftteerr__(...)
     |      nextafter_(other) -> Tensor
     |      In-place version of :meth:`~Tensor.nextafter`
     |  
     |  nnoonnzzeerroo(...)
     |      nonzero() -> LongTensor
     |      
     |      See :func:`torch.nonzero`
     |  
     |  nnoorrmmaall__(...)
     |      normal_(mean=0, std=1, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with elements samples from the normal distribution
     |      parameterized by :attr:`mean` and :attr:`std`.
     |  
     |  nnoott__eeqquuaall(...)
     |      not_equal(other) -> Tensor
     |      
     |      See :func:`torch.not_equal`.
     |  
     |  nnoott__eeqquuaall__(...)
     |      not_equal_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.not_equal`.
     |  
     |  nnuummeell(...)
     |      numel() -> int
     |      
     |      See :func:`torch.numel`
     |  
     |  nnuummppyy(...)
     |      numpy() -> numpy.ndarray
     |      
     |      Returns :attr:`self` tensor as a NumPy :class:`ndarray`. This tensor and the
     |      returned :class:`ndarray` share the same underlying storage. Changes to
     |      :attr:`self` tensor will be reflected in the :class:`ndarray` and vice versa.
     |  
     |  oorrggqqrr(...)
     |      orgqr(input2) -> Tensor
     |      
     |      See :func:`torch.orgqr`
     |  
     |  oorrmmqqrr(...)
     |      ormqr(input2, input3, left=True, transpose=False) -> Tensor
     |      
     |      See :func:`torch.ormqr`
     |  
     |  oouutteerr(...)
     |      outer(vec2) -> Tensor
     |      
     |      See :func:`torch.outer`.
     |  
     |  ppeerrmmuuttee(...)
     |      permute(*dims) -> Tensor
     |      
     |      Returns a view of the original tensor with its dimensions permuted.
     |      
     |      Args:
     |          *dims (int...): The desired ordering of dimensions
     |      
     |      Example:
     |          >>> x = torch.randn(2, 3, 5)
     |          >>> x.size()
     |          torch.Size([2, 3, 5])
     |          >>> x.permute(2, 0, 1).size()
     |          torch.Size([5, 2, 3])
     |  
     |  ppiinn__mmeemmoorryy(...)
     |      pin_memory() -> Tensor
     |      
     |      Copies the tensor to pinned memory, if it's not already pinned.
     |  
     |  ppiinnvveerrssee(...)
     |      pinverse() -> Tensor
     |      
     |      See :func:`torch.pinverse`
     |  
     |  ppoollyyggaammmmaa(...)
     |      polygamma(n) -> Tensor
     |      
     |      See :func:`torch.polygamma`
     |  
     |  ppoollyyggaammmmaa__(...)
     |      polygamma_(n) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.polygamma`
     |  
     |  ppooww(...)
     |      pow(exponent) -> Tensor
     |      
     |      See :func:`torch.pow`
     |  
     |  ppooww__(...)
     |      pow_(exponent) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.pow`
     |  
     |  pprreelluu(...)
     |  
     |  pprroodd(...)
     |      prod(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.prod`
     |  
     |  ppuutt__(...)
     |      put_(indices, tensor, accumulate=False) -> Tensor
     |      
     |      Copies the elements from :attr:`tensor` into the positions specified by
     |      indices. For the purpose of indexing, the :attr:`self` tensor is treated as if
     |      it were a 1-D tensor.
     |      
     |      If :attr:`accumulate` is ``True``, the elements in :attr:`tensor` are added to
     |      :attr:`self`. If accumulate is ``False``, the behavior is undefined if indices
     |      contain duplicate elements.
     |      
     |      Args:
     |          indices (LongTensor): the indices into self
     |          tensor (Tensor): the tensor containing values to copy from
     |          accumulate (bool): whether to accumulate into self
     |      
     |      Example::
     |      
     |          >>> src = torch.tensor([[4, 3, 5],
     |          ...                     [6, 7, 8]])
     |          >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))
     |          tensor([[  4,   9,   5],
     |                  [ 10,   7,   8]])
     |  
     |  qq__ppeerr__cchhaannnneell__aaxxiiss(...)
     |      q_per_channel_axis() -> int
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns the index of dimension on which per-channel quantization is applied.
     |  
     |  qq__ppeerr__cchhaannnneell__ssccaalleess(...)
     |      q_per_channel_scales() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a Tensor of scales of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
     |      q_per_channel_zero_points() -> Tensor
     |      
     |      Given a Tensor quantized by linear (affine) per-channel quantization,
     |      returns a tensor of zero_points of the underlying quantizer. It has the number of
     |      elements that matches the corresponding dimensions (from q_per_channel_axis) of
     |      the tensor.
     |  
     |  qq__ssccaallee(...)
     |      q_scale() -> float
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the scale of the underlying quantizer().
     |  
     |  qq__zzeerroo__ppooiinntt(...)
     |      q_zero_point() -> int
     |      
     |      Given a Tensor quantized by linear(affine) quantization,
     |      returns the zero_point of the underlying quantizer().
     |  
     |  qqrr(...)
     |      qr(some=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.qr`
     |  
     |  qqsscchheemmee(...)
     |      qscheme() -> torch.qscheme
     |      
     |      Returns the quantization scheme of a given QTensor.
     |  
     |  qquuaannttiillee(...)
     |      quantile(q, dim=None, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.quantile`
     |  
     |  rraadd22ddeegg(...)
     |      rad2deg() -> Tensor
     |      
     |      See :func:`torch.rad2deg`
     |  
     |  rraadd22ddeegg__(...)
     |      rad2deg_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rad2deg`
     |  
     |  rraannddoomm__(...)
     |      random_(from=0, to=None, *, generator=None) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the discrete uniform
     |      distribution over ``[from, to - 1]``. If not specified, the values are usually
     |      only bounded by :attr:`self` tensor's data type. However, for floating point
     |      types, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every
     |      value is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`
     |      will be uniform in ``[0, 2^53]``.
     |  
     |  rraavveell(...)
     |      ravel(input) -> Tensor
     |      
     |      see :func:`torch.ravel`
     |  
     |  rreecciipprrooccaall(...)
     |      reciprocal() -> Tensor
     |      
     |      See :func:`torch.reciprocal`
     |  
     |  rreecciipprrooccaall__(...)
     |      reciprocal_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.reciprocal`
     |  
     |  rreeccoorrdd__ssttrreeaamm(...)
     |      record_stream(stream)
     |      
     |      Ensures that the tensor memory is not reused for another tensor until all
     |      current work queued on :attr:`stream` are complete.
     |      
     |      .. note::
     |      
     |          The caching allocator is aware of only the stream where a tensor was
     |          allocated. Due to the awareness, it already correctly manages the life
     |          cycle of tensors on only one stream. But if a tensor is used on a stream
     |          different from the stream of origin, the allocator might reuse the memory
     |          unexpectedly. Calling this method lets the allocator know which streams
     |          have used the tensor.
     |  
     |  rreelluu(...)
     |  
     |  rreelluu__(...)
     |  
     |  rreemmaaiinnddeerr(...)
     |      remainder(divisor) -> Tensor
     |      
     |      See :func:`torch.remainder`
     |  
     |  rreemmaaiinnddeerr__(...)
     |      remainder_(divisor) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.remainder`
     |  
     |  rreennoorrmm(...)
     |      renorm(p, dim, maxnorm) -> Tensor
     |      
     |      See :func:`torch.renorm`
     |  
     |  rreennoorrmm__(...)
     |      renorm_(p, dim, maxnorm) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.renorm`
     |  
     |  rreeppeeaatt(...)
     |      repeat(*sizes) -> Tensor
     |      
     |      Repeats this tensor along the specified dimensions.
     |      
     |      Unlike :meth:`~Tensor.expand`, this function copies the tensor's data.
     |      
     |      .. warning::
     |      
     |          :meth:`~Tensor.repeat` behaves differently from
     |          `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,
     |          but is more similar to
     |          `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.
     |          For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): The number of times to repeat this tensor along each
     |              dimension
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3])
     |          >>> x.repeat(4, 2)
     |          tensor([[ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3],
     |                  [ 1,  2,  3,  1,  2,  3]])
     |          >>> x.repeat(4, 2, 1).size()
     |          torch.Size([4, 2, 3])
     |  
     |  rreeppeeaatt__iinntteerrlleeaavvee(...)
     |      repeat_interleave(repeats, dim=None) -> Tensor
     |      
     |      See :func:`torch.repeat_interleave`.
     |  
     |  rreeqquuiirreess__ggrraadd__(...)
     |      requires_grad_(requires_grad=True) -> Tensor
     |      
     |      Change if autograd should record operations on this tensor: sets this tensor's
     |      :attr:`requires_grad` attribute in-place. Returns this tensor.
     |      
     |      :func:`requires_grad_`'s main use case is to tell autograd to begin recording
     |      operations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``
     |      (because it was obtained through a DataLoader, or required preprocessing or
     |      initialization), ``tensor.requires_grad_()`` makes it so that autograd will
     |      begin to record operations on ``tensor``.
     |      
     |      Args:
     |          requires_grad (bool): If autograd should record operations on this tensor.
     |              Default: ``True``.
     |      
     |      Example::
     |      
     |          >>> # Let's say we want to preprocess some saved weights and use
     |          >>> # the result as new weights.
     |          >>> saved_weights = [0.1, 0.2, 0.3, 0.25]
     |          >>> loaded_weights = torch.tensor(saved_weights)
     |          >>> weights = preprocess(loaded_weights)  # some function
     |          >>> weights
     |          tensor([-0.5503,  0.4926, -2.1158, -0.8303])
     |      
     |          >>> # Now, start to record operations done to weights
     |          >>> weights.requires_grad_()
     |          >>> out = weights.pow(2).sum()
     |          >>> out.backward()
     |          >>> weights.grad
     |          tensor([-1.1007,  0.9853, -4.2316, -1.6606])
     |  
     |  rreesshhaappee(...)
     |      reshape(*shape) -> Tensor
     |      
     |      Returns a tensor with the same data and number of elements as :attr:`self`
     |      but with the specified shape. This method returns a view if :attr:`shape` is
     |      compatible with the current shape. See :meth:`torch.Tensor.view` on when it is
     |      possible to return a view.
     |      
     |      See :func:`torch.reshape`
     |      
     |      Args:
     |          shape (tuple of ints or int...): the desired shape
     |  
     |  rreesshhaappee__aass(...)
     |      reshape_as(other) -> Tensor
     |      
     |      Returns this tensor as the same shape as :attr:`other`.
     |      ``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.
     |      This method returns a view if ``other.sizes()`` is compatible with the current
     |      shape. See :meth:`torch.Tensor.view` on when it is possible to return a view.
     |      
     |      Please see :meth:`reshape` for more information about ``reshape``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same shape
     |              as :attr:`other`.
     |  
     |  rreessiizzee__(...)
     |      resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes :attr:`self` tensor to the specified size. If the number of elements is
     |      larger than the current storage size, then the underlying storage is resized
     |      to fit the new number of elements. If the number of elements is smaller, the
     |      underlying storage is not changed. Existing elements are preserved but any new
     |      memory is uninitialized.
     |      
     |      .. warning::
     |      
     |          This is a low-level method. The storage is reinterpreted as C-contiguous,
     |          ignoring the current strides (unless the target size equals the current
     |          size, in which case the tensor is left unchanged). For most purposes, you
     |          will instead want to use :meth:`~Tensor.view()`, which checks for
     |          contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To
     |          change the size in-place with custom strides, see :meth:`~Tensor.set_()`.
     |      
     |      Args:
     |          sizes (torch.Size or int...): the desired size
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])
     |          >>> x.resize_(2, 2)
     |          tensor([[ 1,  2],
     |                  [ 3,  4]])
     |  
     |  rreessiizzee__aass__(...)
     |      resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor
     |      
     |      Resizes the :attr:`self` tensor to be the same size as the specified
     |      :attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              Tensor. Default: ``torch.contiguous_format``. Note that memory format of
     |              :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.
     |  
     |  rroollll(...)
     |      roll(shifts, dims) -> Tensor
     |      
     |      See :func:`torch.roll`
     |  
     |  rroott9900(...)
     |      rot90(k, dims) -> Tensor
     |      
     |      See :func:`torch.rot90`
     |  
     |  rroouunndd(...)
     |      round() -> Tensor
     |      
     |      See :func:`torch.round`
     |  
     |  rroouunndd__(...)
     |      round_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.round`
     |  
     |  rrssqqrrtt(...)
     |      rsqrt() -> Tensor
     |      
     |      See :func:`torch.rsqrt`
     |  
     |  rrssqqrrtt__(...)
     |      rsqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.rsqrt`
     |  
     |  ssccaatttteerr(...)
     |      scatter(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_`
     |  
     |  ssccaatttteerr__(...)
     |      scatter_(dim, index, src, reduce=None) -> Tensor
     |      
     |      Writes all values from the tensor :attr:`src` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor. For each value in :attr:`src`, its output
     |      index is specified by its index in :attr:`src` for ``dimension != dim`` and by
     |      the corresponding value in :attr:`index` for ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2
     |      
     |      This is the reverse operation of the manner described in :meth:`~Tensor.gather`.
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have
     |      the same number of dimensions. It is also required that
     |      ``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that
     |      ``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.
     |      Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Moreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be
     |      between ``0`` and ``self.size(dim) - 1`` inclusive.
     |      
     |      .. warning::
     |      
     |          When indices are not unique, the behavior is non-deterministic (one of the
     |          values from ``src`` will be picked arbitrarily) and the gradient will be
     |          incorrect (it will be propagated to all locations in the source that
     |          correspond to the same index)!
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Additionally accepts an optional :attr:`reduce` argument that allows
     |      specification of an optional reduction operation, which is applied to all
     |      values in the tensor :attr:`src` into :attr:`self` at the indicies
     |      specified in the :attr:`index`. For each value in :attr:`src`, the reduction
     |      operation is applied to an index in :attr:`self` which is specified by
     |      its index in :attr:`src` for ``dimension != dim`` and by the corresponding
     |      value in :attr:`index` for ``dimension = dim``.
     |      
     |      Given a 3-D tensor and reduction using the multiplication operation, :attr:`self`
     |      is updated as::
     |      
     |          self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2
     |      
     |      Reducing with the addition operation is the same as using
     |      :meth:`~torch.Tensor.scatter_add_`.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter, can be either empty
     |              or of the same dimensionality as ``src``. When empty, the operation
     |              returns ``self`` unchanged.
     |          src (Tensor or float): the source element(s) to scatter.
     |          reduce (str, optional): reduction operation to apply, can be either
     |              ``'add'`` or ``'multiply'``.
     |      
     |      Example::
     |      
     |          >>> src = torch.arange(1, 11).reshape((2, 5))
     |          >>> src
     |          tensor([[ 1,  2,  3,  4,  5],
     |                  [ 6,  7,  8,  9, 10]])
     |          >>> index = torch.tensor([[0, 1, 2, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)
     |          tensor([[1, 0, 0, 4, 0],
     |                  [0, 2, 0, 0, 0],
     |                  [0, 0, 3, 0, 0]])
     |          >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)
     |          tensor([[1, 2, 3, 0, 0],
     |                  [6, 7, 0, 0, 8],
     |                  [0, 0, 0, 0, 0]])
     |      
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='multiply')
     |          tensor([[2.0000, 2.0000, 2.4600, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 2.4600]])
     |          >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),
     |          ...            1.23, reduce='add')
     |          tensor([[2.0000, 2.0000, 3.2300, 2.0000],
     |                  [2.0000, 2.0000, 2.0000, 3.2300]])
     |  
     |  ssccaatttteerr__aadddd(...)
     |      scatter_add(dim, index, src) -> Tensor
     |      
     |      Out-of-place version of :meth:`torch.Tensor.scatter_add_`
     |  
     |  ssccaatttteerr__aadddd__(...)
     |      scatter_add_(dim, index, src) -> Tensor
     |      
     |      Adds all values from the tensor :attr:`other` into :attr:`self` at the indices
     |      specified in the :attr:`index` tensor in a similar fashion as
     |      :meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to
     |      an index in :attr:`self` which is specified by its index in :attr:`src`
     |      for ``dimension != dim`` and by the corresponding value in :attr:`index` for
     |      ``dimension = dim``.
     |      
     |      For a 3-D tensor, :attr:`self` is updated as::
     |      
     |          self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0
     |          self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1
     |          self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2
     |      
     |      :attr:`self`, :attr:`index` and :attr:`src` should have same number of
     |      dimensions. It is also required that ``index.size(d) <= src.size(d)`` for all
     |      dimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions
     |      ``d != dim``. Note that ``index`` and ``src`` do not broadcast.
     |      
     |      Note:
     |          This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
     |      
     |      .. note::
     |      
     |          The backward pass is implemented only for ``src.shape == index.shape``.
     |      
     |      Args:
     |          dim (int): the axis along which to index
     |          index (LongTensor): the indices of elements to scatter and add, can be
     |              either empty or of the same dimensionality as ``src``. When empty, the
     |              operation returns ``self`` unchanged.
     |          src (Tensor): the source elements to scatter and add
     |      
     |      Example::
     |      
     |          >>> src = torch.ones((2, 5))
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[1., 0., 0., 1., 1.],
     |                  [0., 1., 0., 0., 0.],
     |                  [0., 0., 1., 0., 0.]])
     |          >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])
     |          >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)
     |          tensor([[2., 0., 0., 1., 1.],
     |                  [0., 2., 0., 0., 0.],
     |                  [0., 0., 2., 1., 1.]])
     |  
     |  sseelleecctt(...)
     |      select(dim, index) -> Tensor
     |      
     |      Slices the :attr:`self` tensor along the selected dimension at the given index.
     |      This function returns a view of the original tensor with the given dimension removed.
     |      
     |      Args:
     |          dim (int): the dimension to slice
     |          index (int): the index to select with
     |      
     |      .. note::
     |      
     |          :meth:`select` is equivalent to slicing. For example,
     |          ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and
     |          ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.
     |  
     |  sseett__(...)
     |      set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor
     |      
     |      Sets the underlying storage, size, and strides. If :attr:`source` is a tensor,
     |      :attr:`self` tensor will share the same storage and have the same size and
     |      strides as :attr:`source`. Changes to elements in one tensor will be reflected
     |      in the other.
     |      
     |      If :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying
     |      storage, offset, size, and stride.
     |      
     |      Args:
     |          source (Tensor or Storage): the tensor or storage to use
     |          storage_offset (int, optional): the offset in the storage
     |          size (torch.Size, optional): the desired size. Defaults to the size of the source.
     |          stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.
     |  
     |  ssggnn(...)
     |      sgn() -> Tensor
     |      
     |      See :func:`torch.sgn`
     |  
     |  ssggnn__(...)
     |      sgn_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sgn`
     |  
     |  sshhoorrtt(...)
     |      short(memory_format=torch.preserve_format) -> Tensor
     |      
     |      ``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.
     |      
     |      Args:
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  ssiiggmmooiidd(...)
     |      sigmoid() -> Tensor
     |      
     |      See :func:`torch.sigmoid`
     |  
     |  ssiiggmmooiidd__(...)
     |      sigmoid_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sigmoid`
     |  
     |  ssiiggnn(...)
     |      sign() -> Tensor
     |      
     |      See :func:`torch.sign`
     |  
     |  ssiiggnn__(...)
     |      sign_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sign`
     |  
     |  ssiiggnnbbiitt(...)
     |      signbit() -> Tensor
     |      
     |      See :func:`torch.signbit`
     |  
     |  ssiinn(...)
     |      sin() -> Tensor
     |      
     |      See :func:`torch.sin`
     |  
     |  ssiinn__(...)
     |      sin_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sin`
     |  
     |  ssiinncc(...)
     |      sinc() -> Tensor
     |      
     |      See :func:`torch.sinc`
     |  
     |  ssiinncc__(...)
     |      sinc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinc`
     |  
     |  ssiinnhh(...)
     |      sinh() -> Tensor
     |      
     |      See :func:`torch.sinh`
     |  
     |  ssiinnhh__(...)
     |      sinh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sinh`
     |  
     |  ssiizzee(...)
     |      size() -> torch.Size
     |      
     |      Returns the size of the :attr:`self` tensor. The returned value is a subclass of
     |      :class:`tuple`.
     |      
     |      Example::
     |      
     |          >>> torch.empty(3, 4, 5).size()
     |          torch.Size([3, 4, 5])
     |  
     |  ssllooggddeett(...)
     |      slogdet() -> (Tensor, Tensor)
     |      
     |      See :func:`torch.slogdet`
     |  
     |  ssmmmm(...)
     |      smm(mat) -> Tensor
     |      
     |      See :func:`torch.smm`
     |  
     |  ssooffttmmaaxx(...)
     |  
     |  ssoollvvee(...)
     |      solve(A) -> Tensor, Tensor
     |      
     |      See :func:`torch.solve`
     |  
     |  ssoorrtt(...)
     |      sort(dim=-1, descending=False) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.sort`
     |  
     |  ssppaarrssee__ddiimm(...)
     |      sparse_dim() -> int
     |      
     |      Return the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      See also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.
     |  
     |  ssppaarrssee__mmaasskk(...)
     |      sparse_mask(mask) -> Tensor
     |      
     |      Returns a new :ref:`sparse tensor <sparse-docs>` with values from a
     |      strided tensor :attr:`self` filtered by the indices of the sparse
     |      tensor :attr:`mask`. The values of :attr:`mask` sparse tensor are
     |      ignored. :attr:`self` and :attr:`mask` tensors must have the same
     |      shape.
     |      
     |      .. note::
     |      
     |        The returned sparse tensor has the same indices as the sparse tensor
     |        :attr:`mask`, even when the corresponding values in :attr:`self` are
     |        zeros.
     |      
     |      Args:
     |          mask (Tensor): a sparse tensor whose indices are used as a filter
     |      
     |      Example::
     |      
     |          >>> nse = 5
     |          >>> dims = (5, 5, 2, 2)
     |          >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),
     |          ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)
     |          >>> V = torch.randn(nse, dims[2], dims[3])
     |          >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()
     |          >>> D = torch.randn(dims)
     |          >>> D.sparse_mask(S)
     |          tensor(indices=tensor([[0, 0, 0, 2],
     |                                 [0, 1, 4, 3]]),
     |                 values=tensor([[[ 1.6550,  0.2397],
     |                                 [-0.1611, -0.0779]],
     |      
     |                                [[ 0.2326, -1.0558],
     |                                 [ 1.4711,  1.9678]],
     |      
     |                                [[-0.5138, -0.0411],
     |                                 [ 1.9417,  0.5158]],
     |      
     |                                [[ 0.0793,  0.0036],
     |                                 [-0.2569, -0.1055]]]),
     |                 size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)
     |  
     |  ssppaarrssee__rreessiizzee__(...)
     |      sparse_resize_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Resizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. note::
     |        If the number of specified elements in :attr:`self` is zero, then
     |        :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any
     |        size and positive integers such that ``len(size) == sparse_dim +
     |        dense_dim``.
     |      
     |        If :attr:`self` specifies one or more elements, however, then each
     |        dimension in :attr:`size` must not be smaller than the corresponding
     |        dimension of :attr:`self`, :attr:`sparse_dim` must equal the number
     |        of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must
     |        equal the number of dense dimensions in :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size. If :attr:`self` is non-empty
     |            sparse tensor, the desired size cannot be smaller than the
     |            original size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  ssppaarrssee__rreessiizzee__aanndd__cclleeaarr__(...)
     |      sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor
     |      
     |      Removes all specified elements from a :ref:`sparse tensor
     |      <sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired
     |      size and the number of sparse and dense dimensions.
     |      
     |      .. warning:
     |        Throws an error if :attr:`self` is not a sparse tensor.
     |      
     |      Args:
     |          size (torch.Size): the desired size.
     |          sparse_dim (int): the number of sparse dimensions
     |          dense_dim (int): the number of dense dimensions
     |  
     |  sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  ssqqrrtt(...)
     |      sqrt() -> Tensor
     |      
     |      See :func:`torch.sqrt`
     |  
     |  ssqqrrtt__(...)
     |      sqrt_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sqrt`
     |  
     |  ssqquuaarree(...)
     |      square() -> Tensor
     |      
     |      See :func:`torch.square`
     |  
     |  ssqquuaarree__(...)
     |      square_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.square`
     |  
     |  ssqquueeeezzee(...)
     |      squeeze(dim=None) -> Tensor
     |      
     |      See :func:`torch.squeeze`
     |  
     |  ssqquueeeezzee__(...)
     |      squeeze_(dim=None) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.squeeze`
     |  
     |  ssssppaaddddmmmm(...)
     |      sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sspaddmm`
     |  
     |  ssttdd(...)
     |      std(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.std`
     |  
     |  ssttoorraaggee(...)
     |      storage() -> torch.Storage
     |      
     |      Returns the underlying storage.
     |  
     |  ssttoorraaggee__ooffffsseett(...)
     |      storage_offset() -> int
     |      
     |      Returns :attr:`self` tensor's offset in the underlying storage in terms of
     |      number of storage elements (not bytes).
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([1, 2, 3, 4, 5])
     |          >>> x.storage_offset()
     |          0
     |          >>> x[3:].storage_offset()
     |          3
     |  
     |  ssttoorraaggee__ttyyppee(...)
     |      storage_type() -> type
     |      
     |      Returns the type of the underlying storage.
     |  
     |  ssttrriiddee(...)
     |      stride(dim) -> tuple or int
     |      
     |      Returns the stride of :attr:`self` tensor.
     |      
     |      Stride is the jump necessary to go from one element to the next one in the
     |      specified dimension :attr:`dim`. A tuple of all strides is returned when no
     |      argument is passed in. Otherwise, an integer value is returned as the stride in
     |      the particular dimension :attr:`dim`.
     |      
     |      Args:
     |          dim (int, optional): the desired dimension in which stride is required
     |      
     |      Example::
     |      
     |          >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
     |          >>> x.stride()
     |          (5, 1)
     |          >>> x.stride(0)
     |          5
     |          >>> x.stride(-1)
     |          1
     |  
     |  ssuubb(...)
     |      sub(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.sub`.
     |  
     |  ssuubb__(...)
     |      sub_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.sub`
     |  
     |  ssuubbttrraacctt(...)
     |      subtract(other, *, alpha=1) -> Tensor
     |      
     |      See :func:`torch.subtract`.
     |  
     |  ssuubbttrraacctt__(...)
     |      subtract_(other, *, alpha=1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.subtract`.
     |  
     |  ssuumm(...)
     |      sum(dim=None, keepdim=False, dtype=None) -> Tensor
     |      
     |      See :func:`torch.sum`
     |  
     |  ssuumm__ttoo__ssiizzee(...)
     |      sum_to_size(*size) -> Tensor
     |      
     |      Sum ``this`` tensor to :attr:`size`.
     |      :attr:`size` must be broadcastable to ``this`` tensor size.
     |      
     |      Args:
     |          size (int...): a sequence of integers defining the shape of the output tensor.
     |  
     |  ssvvdd(...)
     |      svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)
     |      
     |      See :func:`torch.svd`
     |  
     |  sswwaappaaxxeess(...)
     |      swapaxes(axis0, axis1) -> Tensor
     |      
     |      See :func:`torch.swapaxes`
     |  
     |  sswwaappaaxxeess__(...)
     |      swapaxes_(axis0, axis1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapaxes`
     |  
     |  sswwaappddiimmss(...)
     |      swapdims(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.swapdims`
     |  
     |  sswwaappddiimmss__(...)
     |      swapdims_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.swapdims`
     |  
     |  ssyymmeeiigg(...)
     |      symeig(eigenvectors=False, upper=True) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.symeig`
     |  
     |  tt(...)
     |      t() -> Tensor
     |      
     |      See :func:`torch.t`
     |  
     |  tt__(...)
     |      t_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.t`
     |  
     |  ttaakkee(...)
     |      take(indices) -> Tensor
     |      
     |      See :func:`torch.take`
     |  
     |  ttaann(...)
     |      tan() -> Tensor
     |      
     |      See :func:`torch.tan`
     |  
     |  ttaann__(...)
     |      tan_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tan`
     |  
     |  ttaannhh(...)
     |      tanh() -> Tensor
     |      
     |      See :func:`torch.tanh`
     |  
     |  ttaannhh__(...)
     |      tanh_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tanh`
     |  
     |  tteennssoorr__sspplliitt(...)
     |      tensor_split(indices_or_sections, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.tensor_split`
     |  
     |  ttiillee(...)
     |      tile(*reps) -> Tensor
     |      
     |      See :func:`torch.tile`
     |  
     |  ttoo(...)
     |      to(*args, **kwargs) -> Tensor
     |      
     |      Performs Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are
     |      inferred from the arguments of ``self.to(*args, **kwargs)``.
     |      
     |      .. note::
     |      
     |          If the ``self`` Tensor already
     |          has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.
     |          Otherwise, the returned tensor is a copy of ``self`` with the desired
     |          :class:`torch.dtype` and :class:`torch.device`.
     |      
     |      Here are the ways to call ``to``:
     |      
     |      .. function:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`dtype`
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |          Returns a Tensor with the specified :attr:`device` and (optional)
     |          :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.
     |          When :attr:`non_blocking`, tries to convert asynchronously with respect to
     |          the host if possible, e.g., converting a CPU Tensor with pinned memory to a
     |          CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |          Args:
     |              memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |      
     |      .. function:: to(other, non_blocking=False, copy=False) -> Tensor
     |      
     |          Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as
     |          the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert
     |          asynchronously with respect to the host if possible, e.g., converting a CPU
     |          Tensor with pinned memory to a CUDA Tensor.
     |          When :attr:`copy` is set, a new Tensor is created even when the Tensor
     |          already matches the desired conversion.
     |      
     |      Example::
     |      
     |          >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu
     |          >>> tensor.to(torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64)
     |      
     |          >>> cuda0 = torch.device('cuda:0')
     |          >>> tensor.to(cuda0)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], device='cuda:0')
     |      
     |          >>> tensor.to(cuda0, dtype=torch.float64)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |      
     |          >>> other = torch.randn((), dtype=torch.float64, device=cuda0)
     |          >>> tensor.to(other, non_blocking=True)
     |          tensor([[-0.5044,  0.0005],
     |                  [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')
     |  
     |  ttoo__ddeennssee(...)
     |      to_dense() -> Tensor
     |      
     |      Creates a strided copy of :attr:`self`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is a strided tensor.
     |      
     |      Example::
     |      
     |          >>> s = torch.sparse_coo_tensor(
     |          ...        torch.tensor([[1, 1],
     |          ...                      [0, 2]]),
     |          ...        torch.tensor([9, 10]),
     |          ...        size=(3, 3))
     |          >>> s.to_dense()
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |  
     |  ttoo__mmkkllddnnnn(...)
     |      to_mkldnn() -> Tensor
     |      Returns a copy of the tensor in ``torch.mkldnn`` layout.
     |  
     |  ttoo__ssppaarrssee(...)
     |      to_sparse(sparseDims) -> Tensor
     |      Returns a sparse copy of the tensor.  PyTorch supports sparse tensors in
     |      :ref:`coordinate format <sparse-coo-docs>`.
     |      
     |      Args:
     |          sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor
     |      
     |      Example::
     |      
     |          >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])
     |          >>> d
     |          tensor([[ 0,  0,  0],
     |                  [ 9,  0, 10],
     |                  [ 0,  0,  0]])
     |          >>> d.to_sparse()
     |          tensor(indices=tensor([[1, 1],
     |                                 [0, 2]]),
     |                 values=tensor([ 9, 10]),
     |                 size=(3, 3), nnz=2, layout=torch.sparse_coo)
     |          >>> d.to_sparse(1)
     |          tensor(indices=tensor([[1]]),
     |                 values=tensor([[ 9,  0, 10]]),
     |                 size=(3, 3), nnz=1, layout=torch.sparse_coo)
     |  
     |  ttoolliisstt(...)
     |      tolist() -> list or number
     |      
     |      Returns the tensor as a (nested) list. For scalars, a standard
     |      Python number is returned, just like with :meth:`~Tensor.item`.
     |      Tensors are automatically moved to the CPU first if necessary.
     |      
     |      This operation is not differentiable.
     |      
     |      Examples::
     |      
     |          >>> a = torch.randn(2, 2)
     |          >>> a.tolist()
     |          [[0.012766935862600803, 0.5415473580360413],
     |           [-0.08909505605697632, 0.7729271650314331]]
     |          >>> a[0,0].tolist()
     |          0.012766935862600803
     |  
     |  ttooppkk(...)
     |      topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)
     |      
     |      See :func:`torch.topk`
     |  
     |  ttrraaccee(...)
     |      trace() -> Tensor
     |      
     |      See :func:`torch.trace`
     |  
     |  ttrraannssppoossee(...)
     |      transpose(dim0, dim1) -> Tensor
     |      
     |      See :func:`torch.transpose`
     |  
     |  ttrraannssppoossee__(...)
     |      transpose_(dim0, dim1) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.transpose`
     |  
     |  ttrriiaanngguullaarr__ssoollvvee(...)
     |      triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
     |      
     |      See :func:`torch.triangular_solve`
     |  
     |  ttrriill(...)
     |      tril(k=0) -> Tensor
     |      
     |      See :func:`torch.tril`
     |  
     |  ttrriill__(...)
     |      tril_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.tril`
     |  
     |  ttrriiuu(...)
     |      triu(k=0) -> Tensor
     |      
     |      See :func:`torch.triu`
     |  
     |  ttrriiuu__(...)
     |      triu_(k=0) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.triu`
     |  
     |  ttrruuee__ddiivviiddee(...)
     |      true_divide(value) -> Tensor
     |      
     |      See :func:`torch.true_divide`
     |  
     |  ttrruuee__ddiivviiddee__(...)
     |      true_divide_(value) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.true_divide_`
     |  
     |  ttrruunncc(...)
     |      trunc() -> Tensor
     |      
     |      See :func:`torch.trunc`
     |  
     |  ttrruunncc__(...)
     |      trunc_() -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.trunc`
     |  
     |  ttyyppee(...)
     |      type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor
     |      Returns the type if `dtype` is not provided, else casts this object to
     |      the specified type.
     |      
     |      If this is already of the correct type, no copy is performed and the
     |      original object is returned.
     |      
     |      Args:
     |          dtype (type or string): The desired type
     |          non_blocking (bool): If ``True``, and the source is in pinned memory
     |              and destination is on the GPU or vice versa, the copy is performed
     |              asynchronously with respect to the host. Otherwise, the argument
     |              has no effect.
     |          **kwargs: For compatibility, may contain the key ``async`` in place of
     |              the ``non_blocking`` argument. The ``async`` arg is deprecated.
     |  
     |  ttyyppee__aass(...)
     |      type_as(tensor) -> Tensor
     |      
     |      Returns this tensor cast to the type of the given tensor.
     |      
     |      This is a no-op if the tensor is already of the correct type. This is
     |      equivalent to ``self.type(tensor.type())``
     |      
     |      Args:
     |          tensor (Tensor): the tensor which has the desired type
     |  
     |  uunnbbiinndd(...)
     |      unbind(dim=0) -> seq
     |      
     |      See :func:`torch.unbind`
     |  
     |  uunnffoolldd(...)
     |      unfold(dimension, size, step) -> Tensor
     |      
     |      Returns a view of the original tensor which contains all slices of size :attr:`size` from
     |      :attr:`self` tensor in the dimension :attr:`dimension`.
     |      
     |      Step between two slices is given by :attr:`step`.
     |      
     |      If `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of
     |      dimension :attr:`dimension` in the returned tensor will be
     |      `(sizedim - size) / step + 1`.
     |      
     |      An additional dimension of size :attr:`size` is appended in the returned tensor.
     |      
     |      Args:
     |          dimension (int): dimension in which unfolding happens
     |          size (int): the size of each slice that is unfolded
     |          step (int): the step between each slice
     |      
     |      Example::
     |      
     |          >>> x = torch.arange(1., 8)
     |          >>> x
     |          tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
     |          >>> x.unfold(0, 2, 1)
     |          tensor([[ 1.,  2.],
     |                  [ 2.,  3.],
     |                  [ 3.,  4.],
     |                  [ 4.,  5.],
     |                  [ 5.,  6.],
     |                  [ 6.,  7.]])
     |          >>> x.unfold(0, 2, 2)
     |          tensor([[ 1.,  2.],
     |                  [ 3.,  4.],
     |                  [ 5.,  6.]])
     |  
     |  uunniiffoorrmm__(...)
     |      uniform_(from=0, to=1) -> Tensor
     |      
     |      Fills :attr:`self` tensor with numbers sampled from the continuous uniform
     |      distribution:
     |      
     |      .. math::
     |          P(x) = \dfrac{1}{\text{to} - \text{from}}
     |  
     |  uunnssaaffee__cchhuunnkk(...)
     |      unsafe_chunk(chunks, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_chunk`
     |  
     |  uunnssaaffee__sspplliitt(...)
     |      unsafe_split(split_size, dim=0) -> List of Tensors
     |      
     |      See :func:`torch.unsafe_split`
     |  
     |  uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
     |  
     |  uunnssqquueeeezzee(...)
     |      unsqueeze(dim) -> Tensor
     |      
     |      See :func:`torch.unsqueeze`
     |  
     |  uunnssqquueeeezzee__(...)
     |      unsqueeze_(dim) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.unsqueeze`
     |  
     |  vvaalluueess(...)
     |      values() -> Tensor
     |      
     |      Return the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.
     |      
     |      .. warning::
     |        Throws an error if :attr:`self` is not a sparse COO tensor.
     |      
     |      See also :meth:`Tensor.indices`.
     |      
     |      .. note::
     |        This method can only be called on a coalesced sparse tensor. See
     |        :meth:`Tensor.coalesce` for details.
     |  
     |  vvaarr(...)
     |      var(dim=None, unbiased=True, keepdim=False) -> Tensor
     |      
     |      See :func:`torch.var`
     |  
     |  vvddoott(...)
     |      vdot(other) -> Tensor
     |      
     |      See :func:`torch.vdot`
     |  
     |  vviieeww(...)
     |      view(*shape) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`shape`.
     |      
     |      The returned tensor shares the same data and must have the same number
     |      of elements, but may have a different size. For a tensor to be viewed, the new
     |      view size must be compatible with its original size and stride, i.e., each new
     |      view dimension must either be a subspace of an original dimension, or only span
     |      across original dimensions :math:`d, d+1, \dots, d+k` that satisfy the following
     |      contiguity-like condition that :math:`\forall i = d, \dots, d+k-1`,
     |      
     |      .. math::
     |      
     |        \text{stride}[i] = \text{stride}[i+1] \times \text{size}[i+1]
     |      
     |      Otherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`
     |      without copying it (e.g., via :meth:`contiguous`). When it is unclear whether a
     |      :meth:`view` can be performed, it is advisable to use :meth:`reshape`, which
     |      returns a view if the shapes are compatible, and copies (equivalent to calling
     |      :meth:`contiguous`) otherwise.
     |      
     |      Args:
     |          shape (torch.Size or int...): the desired size
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x.size()
     |          torch.Size([4, 4])
     |          >>> y = x.view(16)
     |          >>> y.size()
     |          torch.Size([16])
     |          >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
     |          >>> z.size()
     |          torch.Size([2, 8])
     |      
     |          >>> a = torch.randn(1, 2, 3, 4)
     |          >>> a.size()
     |          torch.Size([1, 2, 3, 4])
     |          >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension
     |          >>> b.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory
     |          >>> c.size()
     |          torch.Size([1, 3, 2, 4])
     |          >>> torch.equal(b, c)
     |          False
     |      
     |      
     |      .. function:: view(dtype) -> Tensor
     |      
     |      Returns a new tensor with the same data as the :attr:`self` tensor but of a
     |      different :attr:`dtype`. :attr:`dtype` must have the same number of bytes per
     |      element as :attr:`self`'s dtype.
     |      
     |      .. warning::
     |      
     |          This overload is not supported by TorchScript, and using it in a Torchscript
     |          program will cause undefined behavior.
     |      
     |      
     |      Args:
     |          dtype (:class:`torch.dtype`): the desired dtype
     |      
     |      Example::
     |      
     |          >>> x = torch.randn(4, 4)
     |          >>> x
     |          tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |          >>> x.dtype
     |          torch.float32
     |      
     |          >>> y = x.view(torch.int32)
     |          >>> y
     |          tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],
     |                  [-1105482831,  1061112040,  1057999968, -1084397505],
     |                  [-1071760287, -1123489973, -1097310419, -1084649136],
     |                  [-1101533110,  1073668768, -1082790149, -1088634448]],
     |              dtype=torch.int32)
     |          >>> y[0, 0] = 1000000000
     |          >>> x
     |          tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],
     |                  [-0.1520,  0.7472,  0.5617, -0.8649],
     |                  [-2.4724, -0.0334, -0.2976, -0.8499],
     |                  [-0.2109,  1.9913, -0.9607, -0.6123]])
     |      
     |          >>> x.view(torch.int16)
     |          Traceback (most recent call last):
     |            File "<stdin>", line 1, in <module>
     |          RuntimeError: Viewing a tensor as a new dtype with a different number of bytes per element is not supported.
     |  
     |  vviieeww__aass(...)
     |      view_as(other) -> Tensor
     |      
     |      View this tensor as the same size as :attr:`other`.
     |      ``self.view_as(other)`` is equivalent to ``self.view(other.size())``.
     |      
     |      Please see :meth:`~Tensor.view` for more information about ``view``.
     |      
     |      Args:
     |          other (:class:`torch.Tensor`): The result tensor has the same size
     |              as :attr:`other`.
     |  
     |  wwhheerree(...)
     |      where(condition, y) -> Tensor
     |      
     |      ``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.
     |      See :func:`torch.where`
     |  
     |  xxllooggyy(...)
     |      xlogy(other) -> Tensor
     |      
     |      See :func:`torch.xlogy`
     |  
     |  xxllooggyy__(...)
     |      xlogy_(other) -> Tensor
     |      
     |      In-place version of :meth:`~Tensor.xlogy`
     |  
     |  xxppuu(...)
     |      xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor
     |      
     |      Returns a copy of this object in XPU memory.
     |      
     |      If this object is already in XPU memory and on the correct device,
     |      then no copy is performed and the original object is returned.
     |      
     |      Args:
     |          device (:class:`torch.device`): The destination XPU device.
     |              Defaults to the current XPU device.
     |          non_blocking (bool): If ``True`` and the source is in pinned memory,
     |              the copy will be asynchronous with respect to the host.
     |              Otherwise, the argument has no effect. Default: ``False``.
     |          memory_format (:class:`torch.memory_format`, optional): the desired memory format of
     |              returned Tensor. Default: ``torch.preserve_format``.
     |  
     |  zzeerroo__(...)
     |      zero_() -> Tensor
     |      
     |      Fills :attr:`self` tensor with zeros.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from torch._C._TensorBase:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from torch._C._TensorBase:
     |  
     |  TT
     |      Is this Tensor with its dimensions reversed.
     |      
     |      If ``n`` is the number of dimensions in ``x``,
     |      ``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.
     |  
     |  ddaattaa
     |  
     |  ddeevviiccee
     |      Is the :class:`torch.device` where this Tensor is.
     |  
     |  ddttyyppee
     |  
     |  ggrraadd__ffnn
     |  
     |  iimmaagg
     |      Returns a new tensor containing imaginary values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`imag` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.imag
     |          tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
     |  
     |  iiss__ccuuddaa
     |      Is ``True`` if the Tensor is stored on the GPU, ``False`` otherwise.
     |  
     |  iiss__lleeaaff
     |      All Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.
     |      
     |      For Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were
     |      created by the user. This means that they are not the result of an operation and so
     |      :attr:`grad_fn` is None.
     |      
     |      Only leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.
     |      To get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.
     |      
     |      Example::
     |      
     |          >>> a = torch.rand(10, requires_grad=True)
     |          >>> a.is_leaf
     |          True
     |          >>> b = torch.rand(10, requires_grad=True).cuda()
     |          >>> b.is_leaf
     |          False
     |          # b was created by the operation that cast a cpu Tensor into a cuda Tensor
     |          >>> c = torch.rand(10, requires_grad=True) + 2
     |          >>> c.is_leaf
     |          False
     |          # c was created by the addition operation
     |          >>> d = torch.rand(10).cuda()
     |          >>> d.is_leaf
     |          True
     |          # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)
     |          >>> e = torch.rand(10).cuda().requires_grad_()
     |          >>> e.is_leaf
     |          True
     |          # e requires gradients and has no operations creating it
     |          >>> f = torch.rand(10, requires_grad=True, device="cuda")
     |          >>> f.is_leaf
     |          True
     |          # f requires grad, has no operation creating it
     |  
     |  iiss__mmeettaa
     |      Is ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors
     |      are like normal tensors, but they carry no data.
     |  
     |  iiss__mmkkllddnnnn
     |  
     |  iiss__qquuaannttiizzeedd
     |      Is ``True`` if the Tensor is quantized, ``False`` otherwise.
     |  
     |  iiss__ssppaarrssee
     |      Is ``True`` if the Tensor uses sparse storage layout, ``False`` otherwise.
     |  
     |  iiss__vvuullkkaann
     |  
     |  iiss__xxppuu
     |      Is ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.
     |  
     |  llaayyoouutt
     |  
     |  nnaammee
     |  
     |  nnaammeess
     |      Stores names for each of this tensor's dimensions.
     |      
     |      ``names[idx]`` corresponds to the name of tensor dimension ``idx``.
     |      Names are either a string if the dimension is named or ``None`` if the
     |      dimension is unnamed.
     |      
     |      Dimension names may contain characters or underscore. Furthermore, a dimension
     |      name must be a valid Python variable name (i.e., does not start with underscore).
     |      
     |      Tensors may not have two named dimensions with the same name.
     |      
     |      .. warning::
     |          The named tensor API is experimental and subject to change.
     |  
     |  nnddiimm
     |      Alias for :meth:`~Tensor.dim()`
     |  
     |  oouuttppuutt__nnrr
     |  
     |  rreeaall
     |      Returns a new tensor containing real values of the :attr:`self` tensor.
     |      The returned tensor and :attr:`self` share the same underlying storage.
     |      
     |      .. warning::
     |          :func:`real` is only supported for tensors with complex dtypes.
     |      
     |      Example::
     |          >>> x=torch.randn(4, dtype=torch.cfloat)
     |          >>> x
     |          tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
     |          >>> x.real
     |          tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
     |  
     |  rreeqquuiirreess__ggrraadd
     |      Is ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.
     |      
     |      .. note::
     |      
     |          The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`
     |          attribute will be populated, see :attr:`is_leaf` for more details.
     |  
     |  sshhaappee
     |  
     |  vvoollaattiillee
    
    class TTeennssoorrTTyyppee(Type)
     |  Method resolution order:
     |      TensorType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett(...) from builtins.PyCapsule
     |      get() -> torch._C.TensorType
     |  
     |  ggeettIInnffeerrrreedd(...) from builtins.PyCapsule
     |      getInferred() -> torch._C.TensorType
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class TThhrroouugghhppuuttBBeenncchhmmaarrkk(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ThroughputBenchmark
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: torch._C.ThroughputBenchmark, arg0: torch._C.ScriptModule) -> None
     |      
     |      2. __init__(self: torch._C.ThroughputBenchmark, arg0: object) -> None
     |  
     |  aadddd__iinnppuutt(...)
     |      add_input(self: torch._C.ThroughputBenchmark, *args, **kwargs) -> None
     |  
     |  bbeenncchhmmaarrkk(...)
     |      benchmark(self: torch._C.ThroughputBenchmark, arg0: torch._C.BenchmarkConfig) -> torch._C.BenchmarkExecutionStats
     |  
     |  rruunn__oonnccee(...)
     |      run_once(self: torch._C.ThroughputBenchmark, *args, **kwargs) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class TTrraacciinnggSSttaattee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      TracingState
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.TracingState) -> str
     |  
     |  ____ssttrr____(...)
     |      __str__(self: torch._C.TracingState) -> str
     |  
     |  ccuurrrreenntt__ssccooppee(...)
     |      current_scope(self: torch._C.TracingState) -> str
     |  
     |  ggrraapphh(...)
     |      graph(self: torch._C.TracingState) -> torch._C.Graph
     |  
     |  ppoopp__ssccooppee(...)
     |      pop_scope(self: torch._C.TracingState) -> None
     |  
     |  ppuusshh__ssccooppee(...)
     |      push_scope(self: torch._C.TracingState, arg0: str) -> None
     |  
     |  sseett__ggrraapphh(...)
     |      set_graph(self: torch._C.TracingState, arg0: torch._C.Graph) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class TTuupplleeTTyyppee(Type)
     |  Method resolution order:
     |      TupleType
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |      __init__(self: torch._C.TupleType, arg0: List[torch._C.Type]) -> None
     |  
     |  eelleemmeennttss(...)
     |      elements(self: torch._C.TupleType) -> List[torch._C.Type]
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Type:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Type:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class TTyyppee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Type
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(...)
     |      __eq__(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Type) -> str
     |  
     |  ccoonnttiigguuoouuss(...)
     |      contiguous(self: torch._C.Type) -> torch._C.Type
     |  
     |  ddiimm(...)
     |      dim(self: torch._C.Type) -> object
     |  
     |  iissSSuubbttyyppeeOOff(...)
     |      isSubtypeOf(self: torch._C.Type, arg0: torch._C.Type) -> bool
     |  
     |  iiss__iinntteerrffaaccee__ttyyppee(...)
     |      is_interface_type(self: torch._C.Type) -> bool
     |  
     |  kkiinndd(...)
     |      kind(self: torch._C.Type) -> str
     |  
     |  ssccaallaarrTTyyppee(...)
     |      scalarType(self: torch._C.Type) -> str
     |  
     |  ssiizzeess(...)
     |      sizes(self: torch._C.Type) -> object
     |  
     |  ssttrr(...)
     |      str(self: torch._C.Type) -> str
     |  
     |  ssttrriiddeess(...)
     |      strides(self: torch._C.Type) -> object
     |  
     |  uunnddeeffiinneedd(...)
     |      undefined(self: torch._C.Type) -> object
     |  
     |  vvaarryyiinnggSSiizzeess(...)
     |      varyingSizes(self: torch._C.Type) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class UUssee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Use
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  iissAAfftteerr(...)
     |      isAfter(self: torch._C.Use, arg0: torch._C.Use) -> bool
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ooffffsseett
     |  
     |  uusseerr
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class VVaalluuee(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Value
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(...)
     |      __repr__(self: torch._C.Value) -> str
     |  
     |  ccooppyyMMeettaaddaattaa(...)
     |      copyMetadata(self: torch._C.Value, arg0: torch._C.Value) -> torch._C.Value
     |  
     |  ddeebbuuggNNaammee(...)
     |      debugName(self: torch._C.Value) -> str
     |  
     |  iinnffeerrTTyyppeeFFrroomm(...)
     |      inferTypeFrom(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. inferTypeFrom(self: torch._C.Value, arg0: at::Tensor) -> None
     |      
     |      2. inferTypeFrom(self: torch._C.Value, arg0: c10::ivalue::Object) -> None
     |  
     |  iissCCoommpplleetteeTTeennssoorr(...)
     |      isCompleteTensor(self: torch._C.Value) -> bool
     |  
     |  nnooddee(...)
     |      node(self: torch._C.Value) -> torch::jit::Node
     |  
     |  ooffffsseett(...)
     |      offset(self: torch._C.Value) -> int
     |  
     |  rreeppllaacceeAAllllUUsseessAAfftteerrNNooddeeWWiitthh(...)
     |      replaceAllUsesAfterNodeWith(self: torch._C.Value, arg0: torch::jit::Node, arg1: torch._C.Value) -> None
     |  
     |  rreeppllaacceeAAllllUUsseessWWiitthh(...)
     |      replaceAllUsesWith(self: torch._C.Value, arg0: torch._C.Value) -> None
     |  
     |  rreeqquuiirreessGGrraadd(...)
     |      requiresGrad(self: torch._C.Value) -> None
     |  
     |  rreeqquuiirreess__ggrraadd(...)
     |      requires_grad(self: torch._C.Value) -> bool
     |  
     |  sseettDDeebbuuggNNaammee(...)
     |      setDebugName(self: torch._C.Value, arg0: str) -> torch._C.Value
     |  
     |  sseettTTyyppee(...)
     |      setType(self: torch._C.Value, arg0: c10::Type) -> torch._C.Value
     |  
     |  sseettTTyyppeeAAss(...)
     |      setTypeAs(self: torch._C.Value, arg0: torch._C.Value) -> torch._C.Value
     |  
     |  ttooIIVVaalluuee(...)
     |      toIValue(self: torch._C.Value) -> Optional[IValue]
     |  
     |  ttyyppee(...)
     |      type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. type(self: torch._C.Value) -> c10::Type
     |      
     |      2. type(self: torch._C.Value) -> c10::Type
     |  
     |  uunniiqquuee(...)
     |      unique(self: torch._C.Value) -> int
     |  
     |  uusseess(...)
     |      uses(self: torch._C.Value) -> List[torch::jit::Use]
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  ____nneeww____(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class ddeevviiccee(builtins.object)
     |  Methods defined here:
     |  
     |  ____eeqq____(self, value, /)
     |      Return self==value.
     |  
     |  ____ggee____(self, value, /)
     |      Return self>=value.
     |  
     |  ____ggtt____(self, value, /)
     |      Return self>value.
     |  
     |  ____hhaasshh____(self, /)
     |      Return hash(self).
     |  
     |  ____llee____(self, value, /)
     |      Return self<=value.
     |  
     |  ____lltt____(self, value, /)
     |      Return self<value.
     |  
     |  ____nnee____(self, value, /)
     |      Return self!=value.
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iinnddeexx
     |  
     |  ttyyppee
    
    class ddttyyppee(builtins.object)
     |  Methods defined here:
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iiss__ccoommpplleexx
     |  
     |  iiss__ffllooaattiinngg__ppooiinntt
     |  
     |  iiss__ssiiggnneedd
    
    class eennaabbllee__ggrraadd(_DecoratorContextManager)
     |  Context-manager that enables gradient calculation.
     |  
     |  Enables gradient calculation, if it has been disabled via :class:`~no_grad`
     |  or :class:`~set_grad_enabled`.
     |  
     |  This context manager is thread local; it will not affect computation
     |  in other threads.
     |  
     |  Also functions as a decorator. (Make sure to instantiate with parenthesis.)
     |  
     |  
     |  Example::
     |  
     |      >>> x = torch.tensor([1], requires_grad=True)
     |      >>> with torch.no_grad():
     |      ...   with torch.enable_grad():
     |      ...     y = x * 2
     |      >>> y.requires_grad
     |      True
     |      >>> y.backward()
     |      >>> x.grad
     |      >>> @torch.enable_grad()
     |      ... def doubler(x):
     |      ...     return x * 2
     |      >>> with torch.no_grad():
     |      ...     z = doubler(x)
     |      >>> z.requires_grad
     |      True
     |  
     |  Method resolution order:
     |      enable_grad
     |      _DecoratorContextManager
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eenntteerr____(self) -> None
     |  
     |  ____eexxiitt____(self, exc_type: Any, exc_value: Any, traceback: Any) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _DecoratorContextManager:
     |  
     |  ____ccaallll____(self, func: ~F) -> ~F
     |      Call self as a function.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DecoratorContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class ffiinnffoo(builtins.object)
     |  Methods defined here:
     |  
     |  ____eeqq____(self, value, /)
     |      Return self==value.
     |  
     |  ____ggee____(self, value, /)
     |      Return self>=value.
     |  
     |  ____ggtt____(self, value, /)
     |      Return self>value.
     |  
     |  ____llee____(self, value, /)
     |      Return self<=value.
     |  
     |  ____lltt____(self, value, /)
     |      Return self<value.
     |  
     |  ____nnee____(self, value, /)
     |      Return self!=value.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bbiittss
     |  
     |  ddttyyppee
     |  
     |  eeppss
     |  
     |  mmaaxx
     |  
     |  mmiinn
     |  
     |  rreessoolluuttiioonn
     |  
     |  ttiinnyy
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
    
    class iiiinnffoo(builtins.object)
     |  Methods defined here:
     |  
     |  ____eeqq____(self, value, /)
     |      Return self==value.
     |  
     |  ____ggee____(self, value, /)
     |      Return self>=value.
     |  
     |  ____ggtt____(self, value, /)
     |      Return self>value.
     |  
     |  ____llee____(self, value, /)
     |      Return self<=value.
     |  
     |  ____lltt____(self, value, /)
     |      Return self<value.
     |  
     |  ____nnee____(self, value, /)
     |      Return self!=value.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bbiittss
     |  
     |  ddttyyppee
     |  
     |  mmaaxx
     |  
     |  mmiinn
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
    
    class llaayyoouutt(builtins.object)
     |  Methods defined here:
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
    
    class mmeemmoorryy__ffoorrmmaatt(builtins.object)
     |  Methods defined here:
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
    
    class nnoo__ggrraadd(_DecoratorContextManager)
     |  Context-manager that disabled gradient calculation.
     |  
     |  Disabling gradient calculation is useful for inference, when you are sure
     |  that you will not call :meth:`Tensor.backward()`. It will reduce memory
     |  consumption for computations that would otherwise have `requires_grad=True`.
     |  
     |  In this mode, the result of every computation will have
     |  `requires_grad=False`, even when the inputs have `requires_grad=True`.
     |  
     |  This context manager is thread local; it will not affect computation
     |  in other threads.
     |  
     |  Also functions as a decorator. (Make sure to instantiate with parenthesis.)
     |  
     |  
     |  Example::
     |  
     |      >>> x = torch.tensor([1], requires_grad=True)
     |      >>> with torch.no_grad():
     |      ...   y = x * 2
     |      >>> y.requires_grad
     |      False
     |      >>> @torch.no_grad()
     |      ... def doubler(x):
     |      ...     return x * 2
     |      >>> z = doubler(x)
     |      >>> z.requires_grad
     |      False
     |  
     |  Method resolution order:
     |      no_grad
     |      _DecoratorContextManager
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, exc_type: Any, exc_value: Any, traceback: Any) -> None
     |  
     |  ____iinniitt____(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _DecoratorContextManager:
     |  
     |  ____ccaallll____(self, func: ~F) -> ~F
     |      Call self as a function.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DecoratorContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class qqsscchheemmee(builtins.object)
     |  Methods defined here:
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).

FFUUNNCCTTIIOONNSS
    __aaddaappttiivvee__aavvgg__ppooooll22dd(...)
    
    __aadddd__bbaattcchh__ddiimm(...)
    
    __aadddd__rreelluu(...)
    
    __aadddd__rreelluu__(...)
    
    __aaddddmmvv__iimmppll__(...)
    
    __aammiinnmmaaxx(...)
    
    __aammpp__ffoorreeaacchh__nnoonn__ffiinniittee__cchheecckk__aanndd__uunnssccaallee__(...)
    
    __aammpp__uuppddaattee__ssccaallee(...)
    
    __bbaaddddbbmmmm__mmkkll__(...)
    
    __bbaattcchh__nnoorrmm__iimmppll__iinnddeexx(...)
    
    __bbmmmm(...)
    
    __ccaasstt__BByyttee(...)
    
    __ccaasstt__CChhaarr(...)
    
    __ccaasstt__DDoouubbllee(...)
    
    __ccaasstt__FFllooaatt(...)
    
    __ccaasstt__HHaallff(...)
    
    __ccaasstt__IInntt(...)
    
    __ccaasstt__LLoonngg(...)
    
    __ccaasstt__SShhoorrtt(...)
    
    __ccaatt(...)
    
    __cchhoooossee__qqppaarraammss__ppeerr__tteennssoorr(...)
    
    __ccoommppuuttee__lliinneeaarr__ccoommbbiinnaattiioonn(...)
    
    __ccoonnjj(...)
    
    __ccoonnvvoolluuttiioonn(...)
    
    __ccoonnvvoolluuttiioonn__nnooggrroouupp(...)
    
    __ccooppyy__ffrroomm(...)
    
    __ccttcc__lloossss(...)
    
    __ccuuddnnnn__ccttcc__lloossss(...)
    
    __ccuuddnnnn__iinniitt__ddrrooppoouutt__ssttaattee(...)
    
    __ccuuddnnnn__rrnnnn(...)
    
    __ccuuddnnnn__rrnnnn__ffllaatttteenn__wweeiigghhtt(...)
    
    __ccuufffftt__cclleeaarr__ppllaann__ccaacchhee(...)
    
    __ccuufffftt__ggeett__ppllaann__ccaacchhee__mmaaxx__ssiizzee(...)
    
    __ccuufffftt__ggeett__ppllaann__ccaacchhee__ssiizzee(...)
    
    __ccuufffftt__sseett__ppllaann__ccaacchhee__mmaaxx__ssiizzee(...)
    
    __ccuummmmaaxx__hheellppeerr(...)
    
    __ccuummmmiinn__hheellppeerr(...)
    
    __ddeebbuugg__hhaass__iinntteerrnnaall__oovveerrllaapp(...)
    
    __ddiimm__aarraannggee(...)
    
    __ddiirriicchhlleett__ggrraadd(...)
    
    __eemmbbeeddddiinngg__bbaagg(...)
    
    __eemmbbeeddddiinngg__bbaagg__ffoorrwwaarrdd__oonnllyy(...)
    
    __eemmppttyy__aaffffiinnee__qquuaannttiizzeedd(...)
    
    __eemmppttyy__ppeerr__cchhaannnneell__aaffffiinnee__qquuaannttiizzeedd(...)
    
    __eeuucclliiddeeaann__ddiisstt(...)
    
    __ffaakkee__qquuaannttiizzee__lleeaarrnnaabbllee__ppeerr__cchhaannnneell__aaffffiinnee(...)
    
    __ffaakkee__qquuaannttiizzee__lleeaarrnnaabbllee__ppeerr__tteennssoorr__aaffffiinnee(...)
    
    __fffftt__cc22cc(...)
    
    __fffftt__cc22rr(...)
    
    __fffftt__rr22cc(...)
    
    __ffoorreeaacchh__aabbss(...)
    
    __ffoorreeaacchh__aabbss__(...)
    
    __ffoorreeaacchh__aaccooss(...)
    
    __ffoorreeaacchh__aaccooss__(...)
    
    __ffoorreeaacchh__aadddd(...)
    
    __ffoorreeaacchh__aadddd__(...)
    
    __ffoorreeaacchh__aaddddccddiivv(...)
    
    __ffoorreeaacchh__aaddddccddiivv__(...)
    
    __ffoorreeaacchh__aaddddccmmuull(...)
    
    __ffoorreeaacchh__aaddddccmmuull__(...)
    
    __ffoorreeaacchh__aassiinn(...)
    
    __ffoorreeaacchh__aassiinn__(...)
    
    __ffoorreeaacchh__aattaann(...)
    
    __ffoorreeaacchh__aattaann__(...)
    
    __ffoorreeaacchh__cceeiill(...)
    
    __ffoorreeaacchh__cceeiill__(...)
    
    __ffoorreeaacchh__ccooss(...)
    
    __ffoorreeaacchh__ccooss__(...)
    
    __ffoorreeaacchh__ccoosshh(...)
    
    __ffoorreeaacchh__ccoosshh__(...)
    
    __ffoorreeaacchh__ddiivv(...)
    
    __ffoorreeaacchh__ddiivv__(...)
    
    __ffoorreeaacchh__eerrff(...)
    
    __ffoorreeaacchh__eerrff__(...)
    
    __ffoorreeaacchh__eerrffcc(...)
    
    __ffoorreeaacchh__eerrffcc__(...)
    
    __ffoorreeaacchh__eexxpp(...)
    
    __ffoorreeaacchh__eexxpp__(...)
    
    __ffoorreeaacchh__eexxppmm11(...)
    
    __ffoorreeaacchh__eexxppmm11__(...)
    
    __ffoorreeaacchh__fflloooorr(...)
    
    __ffoorreeaacchh__fflloooorr__(...)
    
    __ffoorreeaacchh__ffrraacc(...)
    
    __ffoorreeaacchh__ffrraacc__(...)
    
    __ffoorreeaacchh__llggaammmmaa(...)
    
    __ffoorreeaacchh__llggaammmmaa__(...)
    
    __ffoorreeaacchh__lloogg(...)
    
    __ffoorreeaacchh__lloogg1100(...)
    
    __ffoorreeaacchh__lloogg1100__(...)
    
    __ffoorreeaacchh__lloogg11pp(...)
    
    __ffoorreeaacchh__lloogg11pp__(...)
    
    __ffoorreeaacchh__lloogg22(...)
    
    __ffoorreeaacchh__lloogg22__(...)
    
    __ffoorreeaacchh__lloogg__(...)
    
    __ffoorreeaacchh__mmaaxxiimmuumm(...)
    
    __ffoorreeaacchh__mmiinniimmuumm(...)
    
    __ffoorreeaacchh__mmuull(...)
    
    __ffoorreeaacchh__mmuull__(...)
    
    __ffoorreeaacchh__nneegg(...)
    
    __ffoorreeaacchh__nneegg__(...)
    
    __ffoorreeaacchh__rreecciipprrooccaall(...)
    
    __ffoorreeaacchh__rreecciipprrooccaall__(...)
    
    __ffoorreeaacchh__rroouunndd(...)
    
    __ffoorreeaacchh__rroouunndd__(...)
    
    __ffoorreeaacchh__ssiiggmmooiidd(...)
    
    __ffoorreeaacchh__ssiiggmmooiidd__(...)
    
    __ffoorreeaacchh__ssiinn(...)
    
    __ffoorreeaacchh__ssiinn__(...)
    
    __ffoorreeaacchh__ssiinnhh(...)
    
    __ffoorreeaacchh__ssiinnhh__(...)
    
    __ffoorreeaacchh__ssqqrrtt(...)
    
    __ffoorreeaacchh__ssqqrrtt__(...)
    
    __ffoorreeaacchh__ssuubb(...)
    
    __ffoorreeaacchh__ssuubb__(...)
    
    __ffoorreeaacchh__ttaann(...)
    
    __ffoorreeaacchh__ttaann__(...)
    
    __ffoorreeaacchh__ttaannhh(...)
    
    __ffoorreeaacchh__ttaannhh__(...)
    
    __ffoorreeaacchh__ttrruunncc(...)
    
    __ffoorreeaacchh__ttrruunncc__(...)
    
    __ffoorreeaacchh__zzeerroo__(...)
    
    __ffuusseedd__ddrrooppoouutt(...)
    
    __ggrriidd__ssaammpplleerr__22dd__ccppuu__ffaallllbbaacckk(...)
    
    __hhaass__ccoommppaattiibbllee__sshhaallllooww__ccooppyy__ttyyppee(...)
    
    __iinnddeexx__ccooppyy__(...)
    
    __iinnddeexx__ppuutt__iimmppll__(...)
    
    __lliinnaallgg__iinnvv__oouutt__hheellppeerr__(...)
    
    __lliinnaallgg__qqrr__hheellppeerr(...)
    
    __lliinnaallgg__ssoollvvee__oouutt__hheellppeerr__(...)
    
    __lloogg__ssooffttmmaaxx(...)
    
    __lloogg__ssooffttmmaaxx__bbaacckkwwaarrdd__ddaattaa(...)
    
    __llooggccuummssuummeexxpp(...)
    
    __lluu__ssoollvvee__hheellppeerr(...)
    
    __lluu__wwiitthh__iinnffoo(...)
    
    __mmaakkee__dduuaall(...)
    
    __mmaakkee__ppeerr__cchhaannnneell__qquuaannttiizzeedd__tteennssoorr(...)
    
    __mmaakkee__ppeerr__tteennssoorr__qquuaannttiizzeedd__tteennssoorr(...)
    
    __mmaasskkeedd__ssccaallee(...)
    
    __mmkkllddnnnn__rreesshhaappee(...)
    
    __mmkkllddnnnn__ttrraannssppoossee(...)
    
    __mmkkllddnnnn__ttrraannssppoossee__(...)
    
    __mmooddee(...)
    
    __nnnnppaacckk__aavvaaiillaabbllee(...)
    
    __nnnnppaacckk__ssppaattiiaall__ccoonnvvoolluuttiioonn(...)
    
    __ppaacckk__ppaaddddeedd__sseeqquueennccee(...)
    
    __ppaadd__ppaacckkeedd__sseeqquueennccee(...)
    
    __rreemmoovvee__bbaattcchh__ddiimm(...)
    
    __rreesshhaappee__ffrroomm__tteennssoorr(...)
    
    __rroowwwwiissee__pprruunnee(...)
    
    __ss__wwhheerree(...)
    
    __ssaammppllee__ddiirriicchhlleett(...)
    
    __ssaattuurraattee__wweeiigghhtt__ttoo__ffpp1166(...)
    
    __sshhaappee__aass__tteennssoorr(...)
    
    __ssoobbooll__eennggiinnee__ddrraaww(...)
    
    __ssoobbooll__eennggiinnee__ffff__(...)
    
    __ssoobbooll__eennggiinnee__iinniittiiaalliizzee__ssttaattee__(...)
    
    __ssoobbooll__eennggiinnee__ssccrraammbbllee__(...)
    
    __ssooffttmmaaxx(...)
    
    __ssooffttmmaaxx__bbaacckkwwaarrdd__ddaattaa(...)
    
    __ssppaarrssee__aaddddmmmm(...)
    
    __ssppaarrssee__ccoooo__tteennssoorr__uunnssaaffee(...)
    
    __ssppaarrssee__lloogg__ssooffttmmaaxx(...)
    
    __ssppaarrssee__lloogg__ssooffttmmaaxx__bbaacckkwwaarrdd__ddaattaa(...)
    
    __ssppaarrssee__mmaattrriixx__mmaasskk__hheellppeerr(...)
    
    __ssppaarrssee__mmmm(...)
    
    __ssppaarrssee__ssooffttmmaaxx(...)
    
    __ssppaarrssee__ssooffttmmaaxx__bbaacckkwwaarrdd__ddaattaa(...)
    
    __ssppaarrssee__ssppaarrssee__mmaattmmuull(...)
    
    __ssppaarrssee__ssuumm(...)
    
    __ssttaacckk(...)
    
    __ssttaannddaarrdd__ggaammmmaa(...)
    
    __ssttaannddaarrdd__ggaammmmaa__ggrraadd(...)
    
    __ssttdd(...)
    
    __ssyyeevvdd__hheellppeerr(...)
    
    __tteesstt__sseerriiaalliizzaattiioonn__ssuubbccmmuull(...)
    
    __ttrriilliinneeaarr(...)
    
    __uunniiqquuee(...)
    
    __uunniiqquuee22(...)
    
    __uunnppaacckk__dduuaall(...)
    
    __uussee__ccuuddnnnn__ccttcc__lloossss(...)
    
    __uussee__ccuuddnnnn__rrnnnn__ffllaatttteenn__wweeiigghhtt(...)
    
    __vvaalliiddaattee__ssppaarrssee__ccoooo__tteennssoorr__aarrggss(...)
    
    __vvaarr(...)
    
    __wweeiigghhtt__nnoorrmm(...)
    
    __wweeiigghhtt__nnoorrmm__ccuuddaa__iinntteerrffaaccee(...)
    
    aabbss(...)
        abs(input, *, out=None) -> Tensor
        
        Computes the absolute value of each element in :attr:`input`.
        
        .. math::
            \text{out}_{i} = |\text{input}_{i}|
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.abs(torch.tensor([-1, -2, 3]))
            tensor([ 1,  2,  3])
    
    aabbss__(...)
    
    aabbssoolluuttee(...)
        absolute(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.abs`
    
    aaccooss(...)
        acos(input, *, out=None) -> Tensor
        
        Computes the inverse cosine of each element in :attr:`input`.
        
        .. math::
            \text{out}_{i} = \cos^{-1}(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.3348, -0.5889,  0.2005, -0.1584])
            >>> torch.acos(a)
            tensor([ 1.2294,  2.2004,  1.3690,  1.7298])
    
    aaccooss__(...)
    
    aaccoosshh(...)
        acosh(input, *, out=None) -> Tensor
        
        Returns a new tensor with the inverse hyperbolic cosine of the elements of :attr:`input`.
        
        Note:
            The domain of the inverse hyperbolic cosine is `[1, inf)` and values outside this range
            will be mapped to ``NaN``, except for `+ INF` for which the output is mapped to `+ INF`.
        
        .. math::
            \text{out}_{i} = \cosh^{-1}(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4).uniform_(1, 2)
            >>> a
            tensor([ 1.3192, 1.9915, 1.9674, 1.7151 ])
            >>> torch.acosh(a)
            tensor([ 0.7791, 1.3120, 1.2979, 1.1341 ])
    
    aaccoosshh__(...)
    
    aaddaappttiivvee__aavvgg__ppooooll11dd(...)
        adaptive_avg_pool1d(input, output_size) -> Tensor
        
        Applies a 1D adaptive average pooling over an input signal composed of
        several input planes.
        
        See :class:`~torch.nn.AdaptiveAvgPool1d` for details and output shape.
        
        Args:
            output_size: the target output size (single integer)
    
    aaddaappttiivvee__mmaaxx__ppooooll11dd(...)
    
    aadddd(...)
        add(input, other, *, out=None)
        
        Adds the scalar :attr:`other` to each element of the input :attr:`input`
        and returns a new resulting tensor.
        
        .. math::
            \text{out} = \text{input} + \text{other}
        
        If :attr:`input` is of type FloatTensor or DoubleTensor, :attr:`other` must be
        a real number, otherwise it should be an integer.
        
        Args:
            input (Tensor): the input tensor.
            value (Number): the number to be added to each element of :attr:`input`
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.0202,  1.0985,  1.3506, -0.6056])
            >>> torch.add(a, 20)
            tensor([ 20.0202,  21.0985,  21.3506,  19.3944])
        
        .. function:: add(input, other, *, alpha=1, out=None)
        
        Each element of the tensor :attr:`other` is multiplied by the scalar
        :attr:`alpha` and added to each element of the tensor :attr:`input`.
        The resulting tensor is returned.
        
        The shapes of :attr:`input` and :attr:`other` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        .. math::
            \text{out} = \text{input} + \text{alpha} \times \text{other}
        
        If :attr:`other` is of type FloatTensor or DoubleTensor, :attr:`alpha` must be
        a real number, otherwise it should be an integer.
        
        Args:
            input (Tensor): the first input tensor
            other (Tensor): the second input tensor
        
        Keyword args:
            alpha (Number): the scalar multiplier for :attr:`other`
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.9732, -0.3497,  0.6245,  0.4022])
            >>> b = torch.randn(4, 1)
            >>> b
            tensor([[ 0.3743],
                    [-1.7724],
                    [-0.5811],
                    [-0.8017]])
            >>> torch.add(a, b, alpha=10)
            tensor([[  2.7695,   3.3930,   4.3672,   4.1450],
                    [-18.6971, -18.0736, -17.0994, -17.3216],
                    [ -6.7845,  -6.1610,  -5.1868,  -5.4090],
                    [ -8.9902,  -8.3667,  -7.3925,  -7.6147]])
    
    aaddddbbmmmm(...)
        addbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None) -> Tensor
        
        Performs a batch matrix-matrix product of matrices stored
        in :attr:`batch1` and :attr:`batch2`,
        with a reduced add step (all matrix multiplications get accumulated
        along the first dimension).
        :attr:`input` is added to the final result.
        
        :attr:`batch1` and :attr:`batch2` must be 3-D tensors each containing the
        same number of matrices.
        
        If :attr:`batch1` is a :math:`(b \times n \times m)` tensor, :attr:`batch2` is a
        :math:`(b \times m \times p)` tensor, :attr:`input` must be
        :ref:`broadcastable <broadcasting-semantics>` with a :math:`(n \times p)` tensor
        and :attr:`out` will be a :math:`(n \times p)` tensor.
        
        .. math::
            out = \beta\ \text{input} + \alpha\ (\sum_{i=0}^{b-1} \text{batch1}_i \mathbin{@} \text{batch2}_i)
        
        If :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in
        it will not be propagated.
        
        For inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and :attr:`alpha`
        must be real numbers, otherwise they should be integers.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        Args:
            batch1 (Tensor): the first batch of matrices to be multiplied
            batch2 (Tensor): the second batch of matrices to be multiplied
        
        Keyword args:
            beta (Number, optional): multiplier for :attr:`input` (:math:`\beta`)
            input (Tensor): matrix to be added
            alpha (Number, optional): multiplier for `batch1 @ batch2` (:math:`\alpha`)
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> M = torch.randn(3, 5)
            >>> batch1 = torch.randn(10, 3, 4)
            >>> batch2 = torch.randn(10, 4, 5)
            >>> torch.addbmm(M, batch1, batch2)
            tensor([[  6.6311,   0.0503,   6.9768, -12.0362,  -2.1653],
                    [ -4.8185,  -1.4255,  -6.6760,   8.9453,   2.5743],
                    [ -3.8202,   4.3691,   1.0943,  -1.1109,   5.4730]])
    
    aaddddccddiivv(...)
        addcdiv(input, tensor1, tensor2, *, value=1, out=None) -> Tensor
        
        Performs the element-wise division of :attr:`tensor1` by :attr:`tensor2`,
        multiply the result by the scalar :attr:`value` and add it to :attr:`input`.
        
        .. warning::
            Integer division with addcdiv is no longer supported, and in a future
            release addcdiv will perform a true division of tensor1 and tensor2.
            The historic addcdiv behavior can be implemented as
            (input + value * torch.trunc(tensor1 / tensor2)).to(input.dtype)
            for integer inputs and as (input + value * tensor1 / tensor2) for float inputs.
            The future addcdiv behavior is just the latter implementation:
            (input + value * tensor1 / tensor2), for all dtypes.
        
        .. math::
            \text{out}_i = \text{input}_i + \text{value} \times \frac{\text{tensor1}_i}{\text{tensor2}_i}
        
        
        The shapes of :attr:`input`, :attr:`tensor1`, and :attr:`tensor2` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        For inputs of type `FloatTensor` or `DoubleTensor`, :attr:`value` must be
        a real number, otherwise an integer.
        
        Args:
            input (Tensor): the tensor to be added
            tensor1 (Tensor): the numerator tensor
            tensor2 (Tensor): the denominator tensor
        
        Keyword args:
            value (Number, optional): multiplier for :math:`\text{tensor1} / \text{tensor2}`
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> t = torch.randn(1, 3)
            >>> t1 = torch.randn(3, 1)
            >>> t2 = torch.randn(1, 3)
            >>> torch.addcdiv(t, t1, t2, value=0.1)
            tensor([[-0.2312, -3.6496,  0.1312],
                    [-1.0428,  3.4292, -0.1030],
                    [-0.5369, -0.9829,  0.0430]])
    
    aaddddccmmuull(...)
        addcmul(input, tensor1, tensor2, *, value=1, out=None) -> Tensor
        
        Performs the element-wise multiplication of :attr:`tensor1`
        by :attr:`tensor2`, multiply the result by the scalar :attr:`value`
        and add it to :attr:`input`.
        
        .. math::
            \text{out}_i = \text{input}_i + \text{value} \times \text{tensor1}_i \times \text{tensor2}_i
        
        The shapes of :attr:`tensor`, :attr:`tensor1`, and :attr:`tensor2` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        For inputs of type `FloatTensor` or `DoubleTensor`, :attr:`value` must be
        a real number, otherwise an integer.
        
        Args:
            input (Tensor): the tensor to be added
            tensor1 (Tensor): the tensor to be multiplied
            tensor2 (Tensor): the tensor to be multiplied
        
        Keyword args:
            value (Number, optional): multiplier for :math:`tensor1 .* tensor2`
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> t = torch.randn(1, 3)
            >>> t1 = torch.randn(3, 1)
            >>> t2 = torch.randn(1, 3)
            >>> torch.addcmul(t, t1, t2, value=0.1)
            tensor([[-0.8635, -0.6391,  1.6174],
                    [-0.7617, -0.5879,  1.7388],
                    [-0.8353, -0.6249,  1.6511]])
    
    aaddddmmmm(...)
        addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) -> Tensor
        
        Performs a matrix multiplication of the matrices :attr:`mat1` and :attr:`mat2`.
        The matrix :attr:`input` is added to the final result.
        
        If :attr:`mat1` is a :math:`(n \times m)` tensor, :attr:`mat2` is a
        :math:`(m \times p)` tensor, then :attr:`input` must be
        :ref:`broadcastable <broadcasting-semantics>` with a :math:`(n \times p)` tensor
        and :attr:`out` will be a :math:`(n \times p)` tensor.
        
        :attr:`alpha` and :attr:`beta` are scaling factors on matrix-vector product between
        :attr:`mat1` and :attr:`mat2` and the added matrix :attr:`input` respectively.
        
        .. math::
            \text{out} = \beta\ \text{input} + \alpha\ (\text{mat1}_i \mathbin{@} \text{mat2}_i)
        
        If :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in
        it will not be propagated.
        
        For inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and
        :attr:`alpha` must be real numbers, otherwise they should be integers.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        Args:
            input (Tensor): matrix to be added
            mat1 (Tensor): the first matrix to be matrix multiplied
            mat2 (Tensor): the second matrix to be matrix multiplied
        
        Keyword args:
            beta (Number, optional): multiplier for :attr:`input` (:math:`\beta`)
            alpha (Number, optional): multiplier for :math:`mat1 @ mat2` (:math:`\alpha`)
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> M = torch.randn(2, 3)
            >>> mat1 = torch.randn(2, 3)
            >>> mat2 = torch.randn(3, 3)
            >>> torch.addmm(M, mat1, mat2)
            tensor([[-4.8716,  1.4671, -1.3746],
                    [ 0.7573, -3.9555, -2.8681]])
    
    aaddddmmvv(...)
        addmv(input, mat, vec, *, beta=1, alpha=1, out=None) -> Tensor
        
        Performs a matrix-vector product of the matrix :attr:`mat` and
        the vector :attr:`vec`.
        The vector :attr:`input` is added to the final result.
        
        If :attr:`mat` is a :math:`(n \times m)` tensor, :attr:`vec` is a 1-D tensor of
        size `m`, then :attr:`input` must be
        :ref:`broadcastable <broadcasting-semantics>` with a 1-D tensor of size `n` and
        :attr:`out` will be 1-D tensor of size `n`.
        
        :attr:`alpha` and :attr:`beta` are scaling factors on matrix-vector product between
        :attr:`mat` and :attr:`vec` and the added tensor :attr:`input` respectively.
        
        .. math::
            \text{out} = \beta\ \text{input} + \alpha\ (\text{mat} \mathbin{@} \text{vec})
        
        If :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in
        it will not be propagated.
        
        For inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and
        :attr:`alpha` must be real numbers, otherwise they should be integers
        
        Args:
            input (Tensor): vector to be added
            mat (Tensor): matrix to be matrix multiplied
            vec (Tensor): vector to be matrix multiplied
        
        Keyword args:
            beta (Number, optional): multiplier for :attr:`input` (:math:`\beta`)
            alpha (Number, optional): multiplier for :math:`mat @ vec` (:math:`\alpha`)
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> M = torch.randn(2)
            >>> mat = torch.randn(2, 3)
            >>> vec = torch.randn(3)
            >>> torch.addmv(M, mat, vec)
            tensor([-0.3768, -5.5565])
    
    aaddddmmvv__(...)
    
    aaddddrr(...)
        addr(input, vec1, vec2, *, beta=1, alpha=1, out=None) -> Tensor
        
        Performs the outer-product of vectors :attr:`vec1` and :attr:`vec2`
        and adds it to the matrix :attr:`input`.
        
        Optional values :attr:`beta` and :attr:`alpha` are scaling factors on the
        outer product between :attr:`vec1` and :attr:`vec2` and the added matrix
        :attr:`input` respectively.
        
        .. math::
            \text{out} = \beta\ \text{input} + \alpha\ (\text{vec1} \otimes \text{vec2})
        
        If :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in
        it will not be propagated.
        
        If :attr:`vec1` is a vector of size `n` and :attr:`vec2` is a vector
        of size `m`, then :attr:`input` must be
        :ref:`broadcastable <broadcasting-semantics>` with a matrix of size
        :math:`(n \times m)` and :attr:`out` will be a matrix of size
        :math:`(n \times m)`.
        
        Args:
            input (Tensor): matrix to be added
            vec1 (Tensor): the first vector of the outer product
            vec2 (Tensor): the second vector of the outer product
        
        Keyword args:
            beta (Number, optional): multiplier for :attr:`input` (:math:`\beta`)
            alpha (Number, optional): multiplier for :math:`\text{vec1} \otimes \text{vec2}` (:math:`\alpha`)
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> vec1 = torch.arange(1., 4.)
            >>> vec2 = torch.arange(1., 3.)
            >>> M = torch.zeros(3, 2)
            >>> torch.addr(M, vec1, vec2)
            tensor([[ 1.,  2.],
                    [ 2.,  4.],
                    [ 3.,  6.]])
    
    aaffffiinnee__ggrriidd__ggeenneerraattoorr(...)
    
    aalliiggnn__tteennssoorrss(*tensors)
    
    aallll(...)
        all(input) -> Tensor
        
        Tests if all elements in :attr:`input` evaluate to `True`.
        
        .. note:: This function matches the behaviour of NumPy in returning
                  output of dtype `bool` for all supported dtypes except `uint8`.
                  For `uint8` the dtype of output is `uint8` itself.
        
        Example::
        
            >>> a = torch.rand(1, 2).bool()
            >>> a
            tensor([[False, True]], dtype=torch.bool)
            >>> torch.all(a)
            tensor(False, dtype=torch.bool)
            >>> a = torch.arange(0, 3)
            >>> a
            tensor([0, 1, 2])
            >>> torch.all(a)
            tensor(False)
        
        .. function:: all(input, dim, keepdim=False, *, out=None) -> Tensor
        
        For each row of :attr:`input` in the given dimension :attr:`dim`,
        returns `True` if all elements in the row evaluate to `True` and `False` otherwise.
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in
        the output tensor having 1 fewer dimension than :attr:`input`.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.rand(4, 2).bool()
            >>> a
            tensor([[True, True],
                    [True, False],
                    [True, True],
                    [True, True]], dtype=torch.bool)
            >>> torch.all(a, dim=1)
            tensor([ True, False,  True,  True], dtype=torch.bool)
            >>> torch.all(a, dim=0)
            tensor([ True, False], dtype=torch.bool)
    
    aallllcclloossee(...)
        allclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False) -> bool
        
        This function checks if all :attr:`input` and :attr:`other` satisfy the condition:
        
        .. math::
            \lvert \text{input} - \text{other} \rvert \leq \texttt{atol} + \texttt{rtol} \times \lvert \text{other} \rvert
        
        elementwise, for all elements of :attr:`input` and :attr:`other`. The behaviour of this function is analogous to
        `numpy.allclose <https://docs.scipy.org/doc/numpy/reference/generated/numpy.allclose.html>`_
        
        Args:
            input (Tensor): first tensor to compare
            other (Tensor): second tensor to compare
            atol (float, optional): absolute tolerance. Default: 1e-08
            rtol (float, optional): relative tolerance. Default: 1e-05
            equal_nan (bool, optional): if ``True``, then two ``NaN`` s will be considered equal. Default: ``False``
        
        Example::
        
            >>> torch.allclose(torch.tensor([10000., 1e-07]), torch.tensor([10000.1, 1e-08]))
            False
            >>> torch.allclose(torch.tensor([10000., 1e-08]), torch.tensor([10000.1, 1e-09]))
            True
            >>> torch.allclose(torch.tensor([1.0, float('nan')]), torch.tensor([1.0, float('nan')]))
            False
            >>> torch.allclose(torch.tensor([1.0, float('nan')]), torch.tensor([1.0, float('nan')]), equal_nan=True)
            True
    
    aallpphhaa__ddrrooppoouutt(...)
    
    aallpphhaa__ddrrooppoouutt__(...)
    
    aammaaxx(...)
        amax(input, dim, keepdim=False, *, out=None) -> Tensor
        
        Returns the maximum value of each slice of the :attr:`input` tensor in the given
        dimension(s) :attr:`dim`.
        
        .. note::
            The difference between ``max``/``min`` and ``amax``/``amin`` is:
                - ``amax``/``amin`` supports reducing on multiple dimensions,
                - ``amax``/``amin`` does not return indices,
                - ``amax``/``amin`` evenly distributes gradient between equal values,
                  while ``max(dim)``/``min(dim)`` propagates gradient only to a single
                  index in the source tensor.
        
        If :attr:`keepdim is ``True``, the output tensors are of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where they are of size 1.
        Otherwise, :attr:`dim`s are squeezed (see :func:`torch.squeeze`), resulting
        in the output tensors having fewer dimension than :attr:`input`.
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
          out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.8177,  1.4878, -0.2491,  0.9130],
                    [-0.7158,  1.1775,  2.0992,  0.4817],
                    [-0.0053,  0.0164, -1.3738, -0.0507],
                    [ 1.9700,  1.1106, -1.0318, -1.0816]])
            >>> torch.amax(a, 1)
            tensor([1.4878, 2.0992, 0.0164, 1.9700])
    
    aammiinn(...)
        amin(input, dim, keepdim=False, *, out=None) -> Tensor
        
        Returns the minimum value of each slice of the :attr:`input` tensor in the given
        dimension(s) :attr:`dim`.
        
        .. note::
            The difference between ``max``/``min`` and ``amax``/``amin`` is:
                - ``amax``/``amin`` supports reducing on multiple dimensions,
                - ``amax``/``amin`` does not return indices,
                - ``amax``/``amin`` evenly distributes gradient between equal values,
                  while ``max(dim)``/``min(dim)`` propagates gradient only to a single
                  index in the source tensor.
        
        If :attr:`keepdim` is ``True``, the output tensors are of the same size as
        :attr:`input` except in the dimension(s) :attr:`dim` where they are of size 1.
        Otherwise, :attr:`dim`s are squeezed (see :func:`torch.squeeze`), resulting in
        the output tensors having fewer dimensions than :attr:`input`.
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
          out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.6451, -0.4866,  0.2987, -1.3312],
                    [-0.5744,  1.2980,  1.8397, -0.2713],
                    [ 0.9128,  0.9214, -1.7268, -0.2995],
                    [ 0.9023,  0.4853,  0.9075, -1.6165]])
            >>> torch.amin(a, 1)
            tensor([-1.3312, -0.5744, -1.7268, -1.6165])
    
    aannggllee(...)
        angle(input, *, out=None) -> Tensor
        
        Computes the element-wise angle (in radians) of the given :attr:`input` tensor.
        
        .. math::
            \text{out}_{i} = angle(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        .. note:: Starting in PyTorch 1.8, angle returns pi for negative real numbers,
                  zero for non-negative real numbers, and propagates NaNs. Previously
                  the function would return zero for all real numbers and not propagate
                  floating-point NaNs.
        
        Example::
        
            >>> torch.angle(torch.tensor([-1 + 1j, -2 + 2j, 3 - 3j]))*180/3.14159
            tensor([ 135.,  135,  -45])
    
    aannyy(...)
        any(input) -> Tensor
        
        Args:
            input (Tensor): the input tensor.
        
        Tests if any element in :attr:`input` evaluates to `True`.
        
        .. note:: This function matches the behaviour of NumPy in returning
                  output of dtype `bool` for all supported dtypes except `uint8`.
                  For `uint8` the dtype of output is `uint8` itself.
        
        Example::
        
            >>> a = torch.rand(1, 2).bool()
            >>> a
            tensor([[False, True]], dtype=torch.bool)
            >>> torch.any(a)
            tensor(True, dtype=torch.bool)
            >>> a = torch.arange(0, 3)
            >>> a
            tensor([0, 1, 2])
            >>> torch.any(a)
            tensor(True)
        
        .. function:: any(input, dim, keepdim=False, *, out=None) -> Tensor
        
        For each row of :attr:`input` in the given dimension :attr:`dim`,
        returns `True` if any element in the row evaluate to `True` and `False` otherwise.
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in
        the output tensor having 1 fewer dimension than :attr:`input`.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 2) < 0
            >>> a
            tensor([[ True,  True],
                    [False,  True],
                    [ True,  True],
                    [False, False]])
            >>> torch.any(a, 1)
            tensor([ True,  True,  True, False])
            >>> torch.any(a, 0)
            tensor([True, True])
    
    aarraannggee(...)
        arange(start=0, end, step=1, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a 1-D tensor of size :math:`\left\lceil \frac{\text{end} - \text{start}}{\text{step}} \right\rceil`
        with values from the interval ``[start, end)`` taken with common difference
        :attr:`step` beginning from `start`.
        
        Note that non-integer :attr:`step` is subject to floating point rounding errors when
        comparing against :attr:`end`; to avoid inconsistency, we advise adding a small epsilon to :attr:`end`
        in such cases.
        
        .. math::
            \text{out}_{{i+1}} = \text{out}_{i} + \text{step}
        
        Args:
            start (Number): the starting value for the set of points. Default: ``0``.
            end (Number): the ending value for the set of points
            step (Number): the gap between each pair of adjacent points. Default: ``1``.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`). If `dtype` is not given, infer the data type from the other input
                arguments. If any of `start`, `end`, or `stop` are floating-point, the
                `dtype` is inferred to be the default dtype, see
                :meth:`~torch.get_default_dtype`. Otherwise, the `dtype` is inferred to
                be `torch.int64`.
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.arange(5)
            tensor([ 0,  1,  2,  3,  4])
            >>> torch.arange(1, 4)
            tensor([ 1,  2,  3])
            >>> torch.arange(1, 2.5, 0.5)
            tensor([ 1.0000,  1.5000,  2.0000])
    
    aarrccccooss(...)
        arccos(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.acos`.
    
    aarrccccooss__(...)
    
    aarrccccoosshh(...)
        arccosh(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.acosh`.
    
    aarrccccoosshh__(...)
    
    aarrccssiinn(...)
        arcsin(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.asin`.
    
    aarrccssiinn__(...)
    
    aarrccssiinnhh(...)
        arcsinh(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.asinh`.
    
    aarrccssiinnhh__(...)
    
    aarrccttaann(...)
        arctan(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.atan`.
    
    aarrccttaann__(...)
    
    aarrccttaannhh(...)
        arctanh(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.atanh`.
    
    aarrccttaannhh__(...)
    
    aarree__ddeetteerrmmiinniissttiicc__aallggoorriitthhmmss__eennaabblleedd()
        Returns True if the global deterministic flag is turned on. Refer to
        :func:`torch.use_deterministic_algorithms` documentation for more details.
    
    aarrggmmaaxx(...)
        argmax(input) -> LongTensor
        
        Returns the indices of the maximum value of all elements in the :attr:`input` tensor.
        
        This is the second value returned by :meth:`torch.max`. See its
        documentation for the exact semantics of this method.
        
        .. note:: If there are multiple minimal values then the indices of the first minimal value are returned.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],
                    [-0.7401, -0.8805, -0.3402, -1.1936],
                    [ 0.4907, -1.3948, -1.0691, -0.3132],
                    [-1.6092,  0.5419, -0.2993,  0.3195]])
            >>> torch.argmax(a)
            tensor(0)
        
        .. function:: argmax(input, dim, keepdim=False) -> LongTensor
        
        Returns the indices of the maximum values of a tensor across a dimension.
        
        This is the second value returned by :meth:`torch.max`. See its
        documentation for the exact semantics of this method.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce. If ``None``, the argmax of the flattened input is returned.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Ignored if ``dim=None``.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],
                    [-0.7401, -0.8805, -0.3402, -1.1936],
                    [ 0.4907, -1.3948, -1.0691, -0.3132],
                    [-1.6092,  0.5419, -0.2993,  0.3195]])
            >>> torch.argmax(a, dim=1)
            tensor([ 0,  2,  0,  1])
    
    aarrggmmiinn(...)
        argmin(input, dim=None, keepdim=False) -> LongTensor
        
        Returns the indices of the minimum value(s) of the flattened tensor or along a dimension
        
        This is the second value returned by :meth:`torch.min`. See its
        documentation for the exact semantics of this method.
        
        .. note:: If there are multiple minimal values then the indices of the first minimal value are returned.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce. If ``None``, the argmin of the flattened input is returned.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Ignored if ``dim=None``.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.1139,  0.2254, -0.1381,  0.3687],
                    [ 1.0100, -1.1975, -0.0102, -0.4732],
                    [-0.9240,  0.1207, -0.7506, -1.0213],
                    [ 1.7809, -1.2960,  0.9384,  0.1438]])
            >>> torch.argmin(a)
            tensor(13)
            >>> torch.argmin(a, dim=1)
            tensor([ 2,  1,  3,  1])
            >>> torch.argmin(a, dim=1, keepdim=True)
            tensor([[2],
                    [1],
                    [3],
                    [1]])
    
    aarrggssoorrtt(...)
        argsort(input, dim=-1, descending=False) -> LongTensor
        
        Returns the indices that sort a tensor along a given dimension in ascending
        order by value.
        
        This is the second value returned by :meth:`torch.sort`.  See its documentation
        for the exact semantics of this method.
        
        Args:
            input (Tensor): the input tensor.
            dim (int, optional): the dimension to sort along
            descending (bool, optional): controls the sorting order (ascending or descending)
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.0785,  1.5267, -0.8521,  0.4065],
                    [ 0.1598,  0.0788, -0.0745, -1.2700],
                    [ 1.2208,  1.0722, -0.7064,  1.2564],
                    [ 0.0669, -0.2318, -0.8229, -0.9280]])
        
        
            >>> torch.argsort(a, dim=1)
            tensor([[2, 0, 3, 1],
                    [3, 2, 1, 0],
                    [2, 1, 0, 3],
                    [3, 2, 1, 0]])
    
    aass__ssttrriiddeedd(...)
        as_strided(input, size, stride, storage_offset=0) -> Tensor
        
        Create a view of an existing `torch.Tensor` :attr:`input` with specified
        :attr:`size`, :attr:`stride` and :attr:`storage_offset`.
        
        .. warning::
            More than one element of a created tensor may refer to a single memory
            location. As a result, in-place operations (especially ones that are
            vectorized) may result in incorrect behavior. If you need to write to
            the tensors, please clone them first.
        
            Many PyTorch functions, which return a view of a tensor, are internally
            implemented with this function. Those functions, like
            :meth:`torch.Tensor.expand`, are easier to read and are therefore more
            advisable to use.
        
        
        Args:
            input (Tensor): the input tensor.
            size (tuple or ints): the shape of the output tensor
            stride (tuple or ints): the stride of the output tensor
            storage_offset (int, optional): the offset in the underlying storage of the output tensor
        
        Example::
        
            >>> x = torch.randn(3, 3)
            >>> x
            tensor([[ 0.9039,  0.6291,  1.0795],
                    [ 0.1586,  2.1939, -0.4900],
                    [-0.1909, -0.7503,  1.9355]])
            >>> t = torch.as_strided(x, (2, 2), (1, 2))
            >>> t
            tensor([[0.9039, 1.0795],
                    [0.6291, 0.1586]])
            >>> t = torch.as_strided(x, (2, 2), (1, 2), 1)
            tensor([[0.6291, 0.1586],
                    [1.0795, 2.1939]])
    
    aass__ssttrriiddeedd__(...)
    
    aass__tteennssoorr(...)
        as_tensor(data, dtype=None, device=None) -> Tensor
        
        Convert the data into a `torch.Tensor`. If the data is already a `Tensor` with the same `dtype` and `device`,
        no copy will be performed, otherwise a new `Tensor` will be returned with computational graph retained if data
        `Tensor` has ``requires_grad=True``. Similarly, if the data is an ``ndarray`` of the corresponding `dtype` and
        the `device` is the cpu, no copy will be performed.
        
        Args:
            data (array_like): Initial data for the tensor. Can be a list, tuple,
                NumPy ``ndarray``, scalar, and other types.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, infers data type from :attr:`data`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
        
        Example::
        
            >>> a = numpy.array([1, 2, 3])
            >>> t = torch.as_tensor(a)
            >>> t
            tensor([ 1,  2,  3])
            >>> t[0] = -1
            >>> a
            array([-1,  2,  3])
        
            >>> a = numpy.array([1, 2, 3])
            >>> t = torch.as_tensor(a, device=torch.device('cuda'))
            >>> t
            tensor([ 1,  2,  3])
            >>> t[0] = -1
            >>> a
            array([1,  2,  3])
    
    aassiinn(...)
        asin(input, *, out=None) -> Tensor
        
        Returns a new tensor with the arcsine  of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \sin^{-1}(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.5962,  1.4985, -0.4396,  1.4525])
            >>> torch.asin(a)
            tensor([-0.6387,     nan, -0.4552,     nan])
    
    aassiinn__(...)
    
    aassiinnhh(...)
        asinh(input, *, out=None) -> Tensor
        
        Returns a new tensor with the inverse hyperbolic sine of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \sinh^{-1}(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.1606, -1.4267, -1.0899, -1.0250 ])
            >>> torch.asinh(a)
            tensor([ 0.1599, -1.1534, -0.9435, -0.8990 ])
    
    aassiinnhh__(...)
    
    aattaann(...)
        atan(input, *, out=None) -> Tensor
        
        Returns a new tensor with the arctangent  of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \tan^{-1}(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.2341,  0.2539, -0.6256, -0.6448])
            >>> torch.atan(a)
            tensor([ 0.2299,  0.2487, -0.5591, -0.5727])
    
    aattaann22(...)
        atan2(input, other, *, out=None) -> Tensor
        
        Element-wise arctangent of :math:`\text{input}_{i} / \text{other}_{i}`
        with consideration of the quadrant. Returns a new tensor with the signed angles
        in radians between vector :math:`(\text{other}_{i}, \text{input}_{i})`
        and vector :math:`(1, 0)`. (Note that :math:`\text{other}_{i}`, the second
        parameter, is the x-coordinate, while :math:`\text{input}_{i}`, the first
        parameter, is the y-coordinate.)
        
        The shapes of ``input`` and ``other`` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        Args:
            input (Tensor): the first input tensor
            other (Tensor): the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.9041,  0.0196, -0.3108, -2.4423])
            >>> torch.atan2(a, torch.randn(4))
            tensor([ 0.9833,  0.0811, -1.9743, -1.4151])
    
    aattaann__(...)
    
    aattaannhh(...)
        atanh(input, *, out=None) -> Tensor
        
        Returns a new tensor with the inverse hyperbolic tangent of the elements of :attr:`input`.
        
        Note:
            The domain of the inverse hyperbolic tangent is `(-1, 1)` and values outside this range
            will be mapped to ``NaN``, except for the values `1` and `-1` for which the output is
            mapped to `+/-INF` respectively.
        
        .. math::
            \text{out}_{i} = \tanh^{-1}(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4).uniform_(-1, 1)
            >>> a
            tensor([ -0.9385, 0.2968, -0.8591, -0.1871 ])
            >>> torch.atanh(a)
            tensor([ -1.7253, 0.3060, -1.2899, -0.1893 ])
    
    aattaannhh__(...)
    
    aattlleeaasstt__11dd(*tensors)
        Returns a 1-dimensional view of each input tensor with zero dimensions.
        Input tensors with one or more dimensions are returned as-is.
        
        Args:
            input (Tensor or list of Tensors)
        
        Returns:
            output (Tensor or tuple of Tensors)
        
        Example::
            >>> x = torch.randn(2)
            >>> x
            tensor([1.4584, 0.7583])
            >>> torch.atleast_1d(x)
            tensor([1.4584, 0.7583])
            >>> x = torch.tensor(1.)
            >>> x
            tensor(1.)
            >>> torch.atleast_1d(x)
            tensor([1.])
            >>> x = torch.tensor(0.5)
            >>> y = torch.tensor(1.)
            >>> torch.atleast_1d((x,y))
            (tensor([0.5000]), tensor([1.]))
    
    aattlleeaasstt__22dd(*tensors)
        Returns a 2-dimensional view of each input tensor with zero dimensions.
        Input tensors with two or more dimensions are returned as-is.
        Args:
            input (Tensor or list of Tensors)
        
        Returns:
            output (Tensor or tuple of Tensors)
        
        Example::
            >>> x = torch.tensor(1.)
            >>> x
            tensor(1.)
            >>> torch.atleast_2d(x)
            tensor([[1.]])
            >>> x = torch.randn(2,2)
            >>> x
            tensor([[2.2086, 2.5165],
                    [0.1757, 0.5194]])
            >>> torch.atleast_2d(x)
            tensor([[2.2086, 2.5165],
                    [0.1757, 0.5194]])
            >>> x = torch.tensor(0.5)
            >>> y = torch.tensor(1.)
            >>> torch.atleast_2d((x,y))
            (tensor([[0.5000]]), tensor([[1.]]))
    
    aattlleeaasstt__33dd(*tensors)
        Returns a 3-dimensional view of each input tensor with zero dimensions.
        Input tensors with three or more dimensions are returned as-is.
        Args:
            input (Tensor or list of Tensors)
        
        Returns:
            output (Tensor or tuple of Tensors)
        
        Example:
        
            >>> x = torch.tensor(0.5)
            >>> x
            tensor(0.5000)
            >>> torch.atleast_3d(x)
            tensor([[[0.5000]]])
            >>> y = torch.randn(2,2)
            >>> y
            tensor([[-0.8079,  0.7460],
                    [-1.1647,  1.4734]])
            >>> torch.atleast_3d(y)
            tensor([[[-0.8079],
                    [ 0.7460]],
                    <BLANKLINE>
                    [[-1.1647],
                    [ 1.4734]]])
            >>> x = torch.randn(1,1,1)
            >>> x
            tensor([[[-1.5689]]])
            >>> torch.atleast_3d(x)
            tensor([[[-1.5689]]])
            >>> x = torch.tensor(0.5)
            >>> y = torch.tensor(1.)
            >>> torch.atleast_3d((x,y))
            (tensor([[[0.5000]]]), tensor([[[1.]]]))
    
    aauuttooccaasstt__ddeeccrreemmeenntt__nneessttiinngg(...)
    
    aauuttooccaasstt__iinnccrreemmeenntt__nneessttiinngg(...)
    
    aavvgg__ppooooll11dd(...)
        avg_pool1d(input, kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True) -> Tensor
        
        Applies a 1D average pooling over an input signal composed of several
        input planes.
        
        See :class:`~torch.nn.AvgPool1d` for details and output shape.
        
        Args:
            input: input tensor of shape :math:`(\text{minibatch} , \text{in\_channels} , iW)`
            kernel_size: the size of the window. Can be a single number or a
              tuple `(kW,)`
            stride: the stride of the window. Can be a single number or a tuple
              `(sW,)`. Default: :attr:`kernel_size`
            padding: implicit zero paddings on both sides of the input. Can be a
              single number or a tuple `(padW,)`. Default: 0
            ceil_mode: when True, will use `ceil` instead of `floor` to compute the
                output shape. Default: ``False``
            count_include_pad: when True, will include the zero-padding in the
                averaging calculation. Default: ``True``
        
        Examples::
        
            >>> # pool of square window of size=3, stride=2
            >>> input = torch.tensor([[[1, 2, 3, 4, 5, 6, 7]]], dtype=torch.float32)
            >>> F.avg_pool1d(input, kernel_size=3, stride=2)
            tensor([[[ 2.,  4.,  6.]]])
    
    bbaaddddbbmmmm(...)
        baddbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None) -> Tensor
        
        Performs a batch matrix-matrix product of matrices in :attr:`batch1`
        and :attr:`batch2`.
        :attr:`input` is added to the final result.
        
        :attr:`batch1` and :attr:`batch2` must be 3-D tensors each containing the same
        number of matrices.
        
        If :attr:`batch1` is a :math:`(b \times n \times m)` tensor, :attr:`batch2` is a
        :math:`(b \times m \times p)` tensor, then :attr:`input` must be
        :ref:`broadcastable <broadcasting-semantics>` with a
        :math:`(b \times n \times p)` tensor and :attr:`out` will be a
        :math:`(b \times n \times p)` tensor. Both :attr:`alpha` and :attr:`beta` mean the
        same as the scaling factors used in :meth:`torch.addbmm`.
        
        .. math::
            \text{out}_i = \beta\ \text{input}_i + \alpha\ (\text{batch1}_i \mathbin{@} \text{batch2}_i)
        
        If :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in
        it will not be propagated.
        
        For inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and
        :attr:`alpha` must be real numbers, otherwise they should be integers.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        Args:
            input (Tensor): the tensor to be added
            batch1 (Tensor): the first batch of matrices to be multiplied
            batch2 (Tensor): the second batch of matrices to be multiplied
        
        Keyword args:
            beta (Number, optional): multiplier for :attr:`input` (:math:`\beta`)
            alpha (Number, optional): multiplier for :math:`\text{batch1} \mathbin{@} \text{batch2}` (:math:`\alpha`)
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> M = torch.randn(10, 3, 5)
            >>> batch1 = torch.randn(10, 3, 4)
            >>> batch2 = torch.randn(10, 4, 5)
            >>> torch.baddbmm(M, batch1, batch2).size()
            torch.Size([10, 3, 5])
    
    bbaarrttlleetttt__wwiinnddooww(...)
        bartlett_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Bartlett window function.
        
        .. math::
            w[n] = 1 - \left| \frac{2n}{N-1} - 1 \right| = \begin{cases}
                \frac{2n}{N - 1} & \text{if } 0 \leq n \leq \frac{N - 1}{2} \\
                2 - \frac{2n}{N - 1} & \text{if } \frac{N - 1}{2} < n < N \\
            \end{cases},
        
        where :math:`N` is the full window size.
        
        The input :attr:`window_length` is a positive integer controlling the
        returned window size. :attr:`periodic` flag determines whether the returned
        window trims off the last duplicate value from the symmetric window and is
        ready to be used as a periodic window with functions like
        :meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in
        above formula is in fact :math:`\text{window\_length} + 1`. Also, we always have
        ``torch.bartlett_window(L, periodic=True)`` equal to
        ``torch.bartlett_window(L + 1, periodic=False)[:-1])``.
        
        .. note::
            If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.
        
        Arguments:
            window_length (int): the size of returned window
            periodic (bool, optional): If True, returns a window to be used as periodic
                function. If False, return a symmetric window.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`). Only floating point types are supported.
            layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only
                  ``torch.strided`` (dense layout) is supported.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Returns:
            Tensor: A 1-D tensor of size :math:`(\text{window\_length},)` containing the window
    
    bbaattcchh__nnoorrmm(...)
    
    bbaattcchh__nnoorrmm__bbaacckkwwaarrdd__eelleemmtt(...)
    
    bbaattcchh__nnoorrmm__bbaacckkwwaarrdd__rreedduuccee(...)
    
    bbaattcchh__nnoorrmm__eelleemmtt(...)
    
    bbaattcchh__nnoorrmm__ggaatthheerr__ssttaattss(...)
    
    bbaattcchh__nnoorrmm__ggaatthheerr__ssttaattss__wwiitthh__ccoouunnttss(...)
    
    bbaattcchh__nnoorrmm__ssttaattss(...)
    
    bbaattcchh__nnoorrmm__uuppddaattee__ssttaattss(...)
    
    bbeerrnnoouullllii(...)
        bernoulli(input, *, generator=None, out=None) -> Tensor
        
        Draws binary random numbers (0 or 1) from a Bernoulli distribution.
        
        The :attr:`input` tensor should be a tensor containing probabilities
        to be used for drawing the binary random number.
        Hence, all values in :attr:`input` have to be in the range:
        :math:`0 \leq \text{input}_i \leq 1`.
        
        The :math:`\text{i}^{th}` element of the output tensor will draw a
        value :math:`1` according to the :math:`\text{i}^{th}` probability value given
        in :attr:`input`.
        
        .. math::
            \text{out}_{i} \sim \mathrm{Bernoulli}(p = \text{input}_{i})
        
        The returned :attr:`out` tensor only has values 0 or 1 and is of the same
        shape as :attr:`input`.
        
        :attr:`out` can have integral ``dtype``, but :attr:`input` must have floating
        point ``dtype``.
        
        Args:
            input (Tensor): the input tensor of probability values for the Bernoulli distribution
        
        Keyword args:
            generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.empty(3, 3).uniform_(0, 1)  # generate a uniform random matrix with range [0, 1]
            >>> a
            tensor([[ 0.1737,  0.0950,  0.3609],
                    [ 0.7148,  0.0289,  0.2676],
                    [ 0.9456,  0.8937,  0.7202]])
            >>> torch.bernoulli(a)
            tensor([[ 1.,  0.,  0.],
                    [ 0.,  0.,  0.],
                    [ 1.,  1.,  1.]])
        
            >>> a = torch.ones(3, 3) # probability of drawing "1" is 1
            >>> torch.bernoulli(a)
            tensor([[ 1.,  1.,  1.],
                    [ 1.,  1.,  1.],
                    [ 1.,  1.,  1.]])
            >>> a = torch.zeros(3, 3) # probability of drawing "1" is 0
            >>> torch.bernoulli(a)
            tensor([[ 0.,  0.,  0.],
                    [ 0.,  0.,  0.],
                    [ 0.,  0.,  0.]])
    
    bbiilliinneeaarr(...)
    
    bbiinnaarryy__ccrroossss__eennttrrooppyy__wwiitthh__llooggiittss(...)
    
    bbiinnccoouunntt(...)
        bincount(input, weights=None, minlength=0) -> Tensor
        
        Count the frequency of each value in an array of non-negative ints.
        
        The number of bins (size 1) is one larger than the largest value in
        :attr:`input` unless :attr:`input` is empty, in which case the result is a
        tensor of size 0. If :attr:`minlength` is specified, the number of bins is at least
        :attr:`minlength` and if :attr:`input` is empty, then the result is tensor of size
        :attr:`minlength` filled with zeros. If ``n`` is the value at position ``i``,
        ``out[n] += weights[i]`` if :attr:`weights` is specified else
        ``out[n] += 1``.
        
        Note:
            This operation may produce nondeterministic gradients when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.
        
        Arguments:
            input (Tensor): 1-d int tensor
            weights (Tensor): optional, weight for each value in the input tensor.
                Should be of same size as input tensor.
            minlength (int): optional, minimum number of bins. Should be non-negative.
        
        Returns:
            output (Tensor): a tensor of shape ``Size([max(input) + 1])`` if
            :attr:`input` is non-empty, else ``Size(0)``
        
        Example::
        
            >>> input = torch.randint(0, 8, (5,), dtype=torch.int64)
            >>> weights = torch.linspace(0, 1, steps=5)
            >>> input, weights
            (tensor([4, 3, 6, 3, 4]),
             tensor([ 0.0000,  0.2500,  0.5000,  0.7500,  1.0000])
        
            >>> torch.bincount(input)
            tensor([0, 0, 0, 2, 2, 0, 1])
        
            >>> input.bincount(weights)
            tensor([0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.5000])
    
    bbiinnoommiiaall(...)
    
    bbiittwwiissee__aanndd(...)
        bitwise_and(input, other, *, out=None) -> Tensor
        
        Computes the bitwise AND of :attr:`input` and :attr:`other`. The input tensor must be of
        integral or Boolean types. For bool tensors, it computes the logical AND.
        
        Args:
            input: the first input tensor
            other: the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example:
        
            >>> torch.bitwise_and(torch.tensor([-1, -2, 3], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))
            tensor([1, 0,  3], dtype=torch.int8)
            >>> torch.bitwise_and(torch.tensor([True, True, False]), torch.tensor([False, True, False]))
            tensor([ False, True, False])
    
    bbiittwwiissee__nnoott(...)
        bitwise_not(input, *, out=None) -> Tensor
        
        Computes the bitwise NOT of the given input tensor. The input tensor must be of
        integral or Boolean types. For bool tensors, it computes the logical NOT.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example:
        
            >>> torch.bitwise_not(torch.tensor([-1, -2, 3], dtype=torch.int8))
            tensor([ 0,  1, -4], dtype=torch.int8)
    
    bbiittwwiissee__oorr(...)
        bitwise_or(input, other, *, out=None) -> Tensor
        
        Computes the bitwise OR of :attr:`input` and :attr:`other`. The input tensor must be of
        integral or Boolean types. For bool tensors, it computes the logical OR.
        
        Args:
            input: the first input tensor
            other: the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example:
        
            >>> torch.bitwise_or(torch.tensor([-1, -2, 3], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))
            tensor([-1, -2,  3], dtype=torch.int8)
            >>> torch.bitwise_or(torch.tensor([True, True, False]), torch.tensor([False, True, False]))
            tensor([ True, True, False])
    
    bbiittwwiissee__xxoorr(...)
        bitwise_xor(input, other, *, out=None) -> Tensor
        
        Computes the bitwise XOR of :attr:`input` and :attr:`other`. The input tensor must be of
        integral or Boolean types. For bool tensors, it computes the logical XOR.
        
        Args:
            input: the first input tensor
            other: the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example:
        
            >>> torch.bitwise_xor(torch.tensor([-1, -2, 3], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))
            tensor([-2, -2,  0], dtype=torch.int8)
            >>> torch.bitwise_xor(torch.tensor([True, True, False]), torch.tensor([False, True, False]))
            tensor([ True, False, False])
    
    bbllaacckkmmaann__wwiinnddooww(...)
        blackman_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Blackman window function.
        
        .. math::
            w[n] = 0.42 - 0.5 \cos \left( \frac{2 \pi n}{N - 1} \right) + 0.08 \cos \left( \frac{4 \pi n}{N - 1} \right)
        
        where :math:`N` is the full window size.
        
        The input :attr:`window_length` is a positive integer controlling the
        returned window size. :attr:`periodic` flag determines whether the returned
        window trims off the last duplicate value from the symmetric window and is
        ready to be used as a periodic window with functions like
        :meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in
        above formula is in fact :math:`\text{window\_length} + 1`. Also, we always have
        ``torch.blackman_window(L, periodic=True)`` equal to
        ``torch.blackman_window(L + 1, periodic=False)[:-1])``.
        
        .. note::
            If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.
        
        Arguments:
            window_length (int): the size of returned window
            periodic (bool, optional): If True, returns a window to be used as periodic
                function. If False, return a symmetric window.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`). Only floating point types are supported.
            layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only
                  ``torch.strided`` (dense layout) is supported.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Returns:
            Tensor: A 1-D tensor of size :math:`(\text{window\_length},)` containing the window
    
    bblloocckk__ddiiaagg(*tensors)
        Create a block diagonal matrix from provided tensors.
        
        Args:
            *tensors: One or more tensors with 0, 1, or 2 dimensions.
        
        Returns:
            Tensor: A 2 dimensional tensor with all the input tensors arranged in
                order such that their upper left and lower right corners are
                diagonally adjacent. All other elements are set to 0.
        
        Example::
        
            >>> import torch
            >>> A = torch.tensor([[0, 1], [1, 0]])
            >>> B = torch.tensor([[3, 4, 5], [6, 7, 8]])
            >>> C = torch.tensor(7)
            >>> D = torch.tensor([1, 2, 3])
            >>> E = torch.tensor([[4], [5], [6]])
            >>> torch.block_diag(A, B, C, D, E)
            tensor([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 3, 4, 5, 0, 0, 0, 0, 0],
                    [0, 0, 6, 7, 8, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 7, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 2, 3, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 6]])
    
    bbmmmm(...)
        bmm(input, mat2, *, deterministic=False, out=None) -> Tensor
        
        Performs a batch matrix-matrix product of matrices stored in :attr:`input`
        and :attr:`mat2`.
        
        :attr:`input` and :attr:`mat2` must be 3-D tensors each containing
        the same number of matrices.
        
        If :attr:`input` is a :math:`(b \times n \times m)` tensor, :attr:`mat2` is a
        :math:`(b \times m \times p)` tensor, :attr:`out` will be a
        :math:`(b \times n \times p)` tensor.
        
        .. math::
            \text{out}_i = \text{input}_i \mathbin{@} \text{mat2}_i
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        .. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.
                  For broadcasting matrix products, see :func:`torch.matmul`.
        
        Args:
            input (Tensor): the first batch of matrices to be multiplied
            mat2 (Tensor): the second batch of matrices to be multiplied
        
        Keyword Args:
            deterministic (bool, optional): flag to choose between a faster non-deterministic
                                            calculation, or a slower deterministic calculation.
                                            This argument is only available for sparse-dense CUDA bmm.
                                            Default: ``False``
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> input = torch.randn(10, 3, 4)
            >>> mat2 = torch.randn(10, 4, 5)
            >>> res = torch.bmm(input, mat2)
            >>> res.size()
            torch.Size([10, 3, 5])
    
    bbrrooaaddccaasstt__tteennssoorrss(*tensors)
        broadcast_tensors(*tensors) -> List of Tensors
        
        Broadcasts the given tensors according to :ref:`broadcasting-semantics`.
        
        Args:
            *tensors: any number of tensors of the same type
        
        .. warning::
        
            More than one element of a broadcasted tensor may refer to a single
            memory location. As a result, in-place operations (especially ones that
            are vectorized) may result in incorrect behavior. If you need to write
            to the tensors, please clone them first.
        
        Example::
        
            >>> x = torch.arange(3).view(1, 3)
            >>> y = torch.arange(2).view(2, 1)
            >>> a, b = torch.broadcast_tensors(x, y)
            >>> a.size()
            torch.Size([2, 3])
            >>> a
            tensor([[0, 1, 2],
                    [0, 1, 2]])
    
    bbrrooaaddccaasstt__ttoo(...)
        broadcast_to(input, shape) -> Tensor
        
        Broadcasts :attr:`input` to the shape :attr:`\shape`.
        Equivalent to calling ``input.expand(shape)``. See :meth:`~Tensor.expand` for details.
        
        Args:
            input (Tensor): the input tensor.
            shape (list, tuple, or :class:`torch.Size`): the new shape.
        
        Example::
        
            >>> x = torch.tensor([1, 2, 3])
            >>> torch.broadcast_to(x, (3, 3))
            tensor([[1, 2, 3],
                    [1, 2, 3],
                    [1, 2, 3]])
    
    bbuucckkeettiizzee(...)
        bucketize(input, boundaries, *, out_int32=False, right=False, out=None) -> Tensor
        
        Returns the indices of the buckets to which each value in the :attr:`input` belongs, where the
        boundaries of the buckets are set by :attr:`boundaries`. Return a new tensor with the same size
        as :attr:`input`. If :attr:`right` is False (default), then the left boundary is closed. More
        formally, the returned index satisfies the following rules:
        
        .. list-table::
           :widths: 15 85
           :header-rows: 1
        
           * - :attr:`right`
             - *returned index satisfies*
           * - False
             - ``boundaries[i-1] < input[m][n]...[l][x] <= boundaries[i]``
           * - True
             - ``boundaries[i-1] <= input[m][n]...[l][x] < boundaries[i]``
        
        Args:
            input (Tensor or Scalar): N-D tensor or a Scalar containing the search value(s).
            boundaries (Tensor): 1-D tensor, must contain a monotonically increasing sequence.
        
        Keyword args:
            out_int32 (bool, optional): indicate the output data type. torch.int32 if True, torch.int64 otherwise.
                                        Default value is False, i.e. default output data type is torch.int64.
            right (bool, optional): if False, return the first suitable location that is found. If True, return the
                                    last such index. If no suitable index found, return 0 for non-numerical value
                                    (eg. nan, inf) or the size of :attr:`boundaries` (one pass the last index).
                                    In other words, if False, gets the lower bound index for each value in :attr:`input`
                                    from :attr:`boundaries`. If True, gets the upper bound index instead.
                                    Default value is False.
            out (Tensor, optional): the output tensor, must be the same size as :attr:`input` if provided.
        
        
        Example::
        
            >>> boundaries = torch.tensor([1, 3, 5, 7, 9])
            >>> boundaries
            tensor([1, 3, 5, 7, 9])
            >>> v = torch.tensor([[3, 6, 9], [3, 6, 9]])
            >>> v
            tensor([[3, 6, 9],
                    [3, 6, 9]])
            >>> torch.bucketize(v, boundaries)
            tensor([[1, 3, 4],
                    [1, 3, 4]])
            >>> torch.bucketize(v, boundaries, right=True)
            tensor([[2, 3, 5],
                    [2, 3, 5]])
    
    ccaann__ccaasstt(...)
        can_cast(from, to) -> bool
        
        Determines if a type conversion is allowed under PyTorch casting rules
        described in the type promotion :ref:`documentation <type-promotion-doc>`.
        
        Args:
            from (dtype): The original :class:`torch.dtype`.
            to (dtype): The target :class:`torch.dtype`.
        
        Example::
        
            >>> torch.can_cast(torch.double, torch.float)
            True
            >>> torch.can_cast(torch.float, torch.int)
            False
    
    ccaarrtteessiiaann__pprroodd(*tensors)
        Do cartesian product of the given sequence of tensors. The behavior is similar to
        python's `itertools.product`.
        
        Args:
            *tensors: any number of 1 dimensional tensors.
        
        Returns:
            Tensor: A tensor equivalent to converting all the input tensors into lists,
                do `itertools.product` on these lists, and finally convert the resulting list
                into tensor.
        
        Example::
        
            >>> a = [1, 2, 3]
            >>> b = [4, 5]
            >>> list(itertools.product(a, b))
            [(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)]
            >>> tensor_a = torch.tensor(a)
            >>> tensor_b = torch.tensor(b)
            >>> torch.cartesian_prod(tensor_a, tensor_b)
            tensor([[1, 4],
                    [1, 5],
                    [2, 4],
                    [2, 5],
                    [3, 4],
                    [3, 5]])
    
    ccaatt(...)
        cat(tensors, dim=0, *, out=None) -> Tensor
        
        Concatenates the given sequence of :attr:`seq` tensors in the given dimension.
        All tensors must either have the same shape (except in the concatenating
        dimension) or be empty.
        
        :func:`torch.cat` can be seen as an inverse operation for :func:`torch.split`
        and :func:`torch.chunk`.
        
        :func:`torch.cat` can be best understood via examples.
        
        Args:
            tensors (sequence of Tensors): any python sequence of tensors of the same type.
                Non-empty tensors provided must have the same shape, except in the
                cat dimension.
            dim (int, optional): the dimension over which the tensors are concatenated
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x = torch.randn(2, 3)
            >>> x
            tensor([[ 0.6580, -1.0969, -0.4614],
                    [-0.1034, -0.5790,  0.1497]])
            >>> torch.cat((x, x, x), 0)
            tensor([[ 0.6580, -1.0969, -0.4614],
                    [-0.1034, -0.5790,  0.1497],
                    [ 0.6580, -1.0969, -0.4614],
                    [-0.1034, -0.5790,  0.1497],
                    [ 0.6580, -1.0969, -0.4614],
                    [-0.1034, -0.5790,  0.1497]])
            >>> torch.cat((x, x, x), 1)
            tensor([[ 0.6580, -1.0969, -0.4614,  0.6580, -1.0969, -0.4614,  0.6580,
                     -1.0969, -0.4614],
                    [-0.1034, -0.5790,  0.1497, -0.1034, -0.5790,  0.1497, -0.1034,
                     -0.5790,  0.1497]])
    
    ccddiisstt(x1, x2, p=2.0, compute_mode='use_mm_for_euclid_dist_if_necessary')
        Computes batched the p-norm distance between each pair of the two collections of row vectors.
        
        Args:
            x1 (Tensor): input tensor of shape :math:`B \times P \times M`.
            x2 (Tensor): input tensor of shape :math:`B \times R \times M`.
            p: p value for the p-norm distance to calculate between each vector pair
                :math:`\in [0, \infty]`.
            compute_mode:
                'use_mm_for_euclid_dist_if_necessary' - will use matrix multiplication approach to calculate
                euclidean distance (p = 2) if P > 25 or R > 25
                'use_mm_for_euclid_dist' - will always use matrix multiplication approach to calculate
                euclidean distance (p = 2)
                'donot_use_mm_for_euclid_dist' - will never use matrix multiplication approach to calculate
                euclidean distance (p = 2)
                Default: use_mm_for_euclid_dist_if_necessary.
        
        If x1 has shape :math:`B \times P \times M` and x2 has shape :math:`B \times R \times M` then the
        output will have shape :math:`B \times P \times R`.
        
        This function is equivalent to `scipy.spatial.distance.cdist(input,'minkowski', p=p)`
        if :math:`p \in (0, \infty)`. When :math:`p = 0` it is equivalent to
        `scipy.spatial.distance.cdist(input, 'hamming') * M`. When :math:`p = \infty`, the closest
        scipy function is `scipy.spatial.distance.cdist(xn, lambda x, y: np.abs(x - y).max())`.
        
        Example:
        
            >>> a = torch.tensor([[0.9041,  0.0196], [-0.3108, -2.4423], [-0.4821,  1.059]])
            >>> a
            tensor([[ 0.9041,  0.0196],
                    [-0.3108, -2.4423],
                    [-0.4821,  1.0590]])
            >>> b = torch.tensor([[-2.1763, -0.4713], [-0.6986,  1.3702]])
            >>> b
            tensor([[-2.1763, -0.4713],
                    [-0.6986,  1.3702]])
            >>> torch.cdist(a, b, p=2)
            tensor([[3.1193, 2.0959],
                    [2.7138, 3.8322],
                    [2.2830, 0.3791]])
    
    cceeiill(...)
        ceil(input, *, out=None) -> Tensor
        
        Returns a new tensor with the ceil of the elements of :attr:`input`,
        the smallest integer greater than or equal to each element.
        
        .. math::
            \text{out}_{i} = \left\lceil \text{input}_{i} \right\rceil = \left\lfloor \text{input}_{i} \right\rfloor + 1
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.6341, -1.4208, -1.0900,  0.5826])
            >>> torch.ceil(a)
            tensor([-0., -1., -1.,  1.])
    
    cceeiill__(...)
    
    cceelluu(...)
    
    cceelluu__(...)
        celu_(input, alpha=1.) -> Tensor
        
        In-place version of :func:`~celu`.
    
    cchhaaiinn__mmaattmmuull(*matrices)
        Returns the matrix product of the :math:`N` 2-D tensors. This product is efficiently computed
        using the matrix chain order algorithm which selects the order in which incurs the lowest cost in terms
        of arithmetic operations (`[CLRS]`_). Note that since this is a function to compute the product, :math:`N`
        needs to be greater than or equal to 2; if equal to 2 then a trivial matrix-matrix product is returned.
        If :math:`N` is 1, then this is a no-op - the original matrix is returned as is.
        
        
        Args:
            matrices (Tensors...): a sequence of 2 or more 2-D tensors whose product is to be determined.
        
        
        Returns:
            Tensor: if the :math:`i^{th}` tensor was of dimensions :math:`p_{i} \times p_{i + 1}`, then the product
            would be of dimensions :math:`p_{1} \times p_{N + 1}`.
        
        Example::
        
            >>> a = torch.randn(3, 4)
            >>> b = torch.randn(4, 5)
            >>> c = torch.randn(5, 6)
            >>> d = torch.randn(6, 7)
            >>> torch.chain_matmul(a, b, c, d)
            tensor([[ -2.3375,  -3.9790,  -4.1119,  -6.6577,   9.5609, -11.5095,  -3.2614],
                    [ 21.4038,   3.3378,  -8.4982,  -5.2457, -10.2561,  -2.4684,   2.7163],
                    [ -0.9647,  -5.8917,  -2.3213,  -5.2284,  12.8615, -12.2816,  -2.5095]])
        
        .. _`[CLRS]`: https://mitpress.mit.edu/books/introduction-algorithms-third-edition
    
    cchhaannnneell__sshhuuffffllee(...)
        channel_shuffle(input, groups) -> Tensor
        
        Divide the channels in a tensor of shape :math:`(*, C , H, W)`
        into g groups and rearrange them as :math:`(*, C \frac g, g, H, W)`,
        while keeping the original tensor shape.
        
        See :class:`~torch.nn.ChannelShuffle` for details.
        
        Args:
            input (Tensor): the input tensor
            groups (int): number of groups to divide channels in and rearrange.
        
        Examples::
        
            >>> input = torch.randn(1, 4, 2, 2)
            >>> print(input)
            [[[[1, 2],
               [3, 4]],
              [[5, 6],
               [7, 8]],
              [[9, 10],
               [11, 12]],
              [[13, 14],
               [15, 16]],
             ]]
            >>> output = torch.nn.functional.channel_shuffle(input, 2)
            >>> print(output)
            [[[[1, 2],
               [3, 4]],
              [[9, 10],
               [11, 12]],
              [[5, 6],
               [7, 8]],
              [[13, 14],
               [15, 16]],
             ]]
    
    cchhoolleesskkyy(...)
        cholesky(input, upper=False, *, out=None) -> Tensor
        
        Computes the Cholesky decomposition of a symmetric positive-definite
        matrix :math:`A` or for batches of symmetric positive-definite matrices.
        
        If :attr:`upper` is ``True``, the returned matrix ``U`` is upper-triangular, and
        the decomposition has the form:
        
        .. math::
        
          A = U^TU
        
        If :attr:`upper` is ``False``, the returned matrix ``L`` is lower-triangular, and
        the decomposition has the form:
        
        .. math::
        
            A = LL^T
        
        If :attr:`upper` is ``True``, and :math:`A` is a batch of symmetric positive-definite
        matrices, then the returned tensor will be composed of upper-triangular Cholesky factors
        of each of the individual matrices. Similarly, when :attr:`upper` is ``False``, the returned
        tensor will be composed of lower-triangular Cholesky factors of each of the individual
        matrices.
        
        .. note:: :func:`torch.linalg.cholesky` should be used over ``torch.cholesky`` when possible.
                  Note however that :func:`torch.linalg.cholesky` does not yet support the :attr:`upper`
                  parameter and instead always returns the lower triangular matrix.
        
        Args:
            input (Tensor): the input tensor :math:`A` of size :math:`(*, n, n)` where `*` is zero or more
                        batch dimensions consisting of symmetric positive-definite matrices.
            upper (bool, optional): flag that indicates whether to return a
                                    upper or lower triangular matrix. Default: ``False``
        
        Keyword args:
            out (Tensor, optional): the output matrix
        
        Example::
        
            >>> a = torch.randn(3, 3)
            >>> a = torch.mm(a, a.t()) # make symmetric positive-definite
            >>> l = torch.cholesky(a)
            >>> a
            tensor([[ 2.4112, -0.7486,  1.4551],
                    [-0.7486,  1.3544,  0.1294],
                    [ 1.4551,  0.1294,  1.6724]])
            >>> l
            tensor([[ 1.5528,  0.0000,  0.0000],
                    [-0.4821,  1.0592,  0.0000],
                    [ 0.9371,  0.5487,  0.7023]])
            >>> torch.mm(l, l.t())
            tensor([[ 2.4112, -0.7486,  1.4551],
                    [-0.7486,  1.3544,  0.1294],
                    [ 1.4551,  0.1294,  1.6724]])
            >>> a = torch.randn(3, 2, 2)
            >>> a = torch.matmul(a, a.transpose(-1, -2)) + 1e-03 # make symmetric positive-definite
            >>> l = torch.cholesky(a)
            >>> z = torch.matmul(l, l.transpose(-1, -2))
            >>> torch.max(torch.abs(z - a)) # Max non-zero
            tensor(2.3842e-07)
    
    cchhoolleesskkyy__iinnvveerrssee(...)
        cholesky_inverse(input, upper=False, *, out=None) -> Tensor
        
        Computes the inverse of a symmetric positive-definite matrix :math:`A` using its
        Cholesky factor :math:`u`: returns matrix ``inv``. The inverse is computed using
        LAPACK routines ``dpotri`` and ``spotri`` (and the corresponding MAGMA routines).
        
        If :attr:`upper` is ``False``, :math:`u` is lower triangular
        such that the returned tensor is
        
        .. math::
            inv = (uu^{{T}})^{{-1}}
        
        If :attr:`upper` is ``True`` or not provided, :math:`u` is upper
        triangular such that the returned tensor is
        
        .. math::
            inv = (u^T u)^{{-1}}
        
        Args:
            input (Tensor): the input 2-D tensor :math:`u`, a upper or lower triangular
                   Cholesky factor
            upper (bool, optional): whether to return a lower (default) or upper triangular matrix
        
        Keyword args:
            out (Tensor, optional): the output tensor for `inv`
        
        Example::
        
            >>> a = torch.randn(3, 3)
            >>> a = torch.mm(a, a.t()) + 1e-05 * torch.eye(3) # make symmetric positive definite
            >>> u = torch.cholesky(a)
            >>> a
            tensor([[  0.9935,  -0.6353,   1.5806],
                    [ -0.6353,   0.8769,  -1.7183],
                    [  1.5806,  -1.7183,  10.6618]])
            >>> torch.cholesky_inverse(u)
            tensor([[ 1.9314,  1.2251, -0.0889],
                    [ 1.2251,  2.4439,  0.2122],
                    [-0.0889,  0.2122,  0.1412]])
            >>> a.inverse()
            tensor([[ 1.9314,  1.2251, -0.0889],
                    [ 1.2251,  2.4439,  0.2122],
                    [-0.0889,  0.2122,  0.1412]])
    
    cchhoolleesskkyy__ssoollvvee(...)
        cholesky_solve(input, input2, upper=False, *, out=None) -> Tensor
        
        Solves a linear system of equations with a positive semidefinite
        matrix to be inverted given its Cholesky factor matrix :math:`u`.
        
        If :attr:`upper` is ``False``, :math:`u` is and lower triangular and `c` is
        returned such that:
        
        .. math::
            c = (u u^T)^{{-1}} b
        
        If :attr:`upper` is ``True`` or not provided, :math:`u` is upper triangular
        and `c` is returned such that:
        
        .. math::
            c = (u^T u)^{{-1}} b
        
        `torch.cholesky_solve(b, u)` can take in 2D inputs `b, u` or inputs that are
        batches of 2D matrices. If the inputs are batches, then returns
        batched outputs `c`
        
        Supports real-valued and complex-valued inputs.
        For the complex-valued inputs the transpose operator above is the conjugate transpose.
        
        Args:
            input (Tensor): input matrix :math:`b` of size :math:`(*, m, k)`,
                        where :math:`*` is zero or more batch dimensions
            input2 (Tensor): input matrix :math:`u` of size :math:`(*, m, m)`,
                        where :math:`*` is zero of more batch dimensions composed of
                        upper or lower triangular Cholesky factor
            upper (bool, optional): whether to consider the Cholesky factor as a
                                    lower or upper triangular matrix. Default: ``False``.
        
        Keyword args:
            out (Tensor, optional): the output tensor for `c`
        
        Example::
        
            >>> a = torch.randn(3, 3)
            >>> a = torch.mm(a, a.t()) # make symmetric positive definite
            >>> u = torch.cholesky(a)
            >>> a
            tensor([[ 0.7747, -1.9549,  1.3086],
                    [-1.9549,  6.7546, -5.4114],
                    [ 1.3086, -5.4114,  4.8733]])
            >>> b = torch.randn(3, 2)
            >>> b
            tensor([[-0.6355,  0.9891],
                    [ 0.1974,  1.4706],
                    [-0.4115, -0.6225]])
            >>> torch.cholesky_solve(b, u)
            tensor([[ -8.1625,  19.6097],
                    [ -5.8398,  14.2387],
                    [ -4.3771,  10.4173]])
            >>> torch.mm(a.inverse(), b)
            tensor([[ -8.1626,  19.6097],
                    [ -5.8398,  14.2387],
                    [ -4.3771,  10.4173]])
    
    cchhoooossee__qqppaarraammss__ooppttiimmiizzeedd(...)
    
    cchhuunnkk(...)
        chunk(input, chunks, dim=0) -> List of Tensors
        
        Splits a tensor into a specific number of chunks. Each chunk is a view of
        the input tensor.
        
        Last chunk will be smaller if the tensor size along the given dimension
        :attr:`dim` is not divisible by :attr:`chunks`.
        
        Arguments:
            input (Tensor): the tensor to split
            chunks (int): number of chunks to return
            dim (int): dimension along which to split the tensor
    
    ccllaammpp(...)
        clamp(input, min, max, *, out=None) -> Tensor
        
        Clamp all elements in :attr:`input` into the range `[` :attr:`min`, :attr:`max` `]`.
        Let min_value and max_value be :attr:`min` and :attr:`max`, respectively, this returns:
        
        .. math::
            y_i = \min(\max(x_i, \text{min\_value}), \text{max\_value})
        
        
        Args:
            input (Tensor): the input tensor.
            min (Number): lower-bound of the range to be clamped to
            max (Number): upper-bound of the range to be clamped to
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-1.7120,  0.1734, -0.0478, -0.0922])
            >>> torch.clamp(a, min=-0.5, max=0.5)
            tensor([-0.5000,  0.1734, -0.0478, -0.0922])
        
        .. function:: clamp(input, *, min, out=None) -> Tensor
        
        Clamps all elements in :attr:`input` to be larger or equal :attr:`min`.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            min (Number): minimal value of each element in the output
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.0299, -2.3184,  2.1593, -0.8883])
            >>> torch.clamp(a, min=0.5)
            tensor([ 0.5000,  0.5000,  2.1593,  0.5000])
        
        .. function:: clamp(input, *, max, out=None) -> Tensor
        
        Clamps all elements in :attr:`input` to be smaller or equal :attr:`max`.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            max (Number): maximal value of each element in the output
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.7753, -0.4702, -0.4599,  1.1899])
            >>> torch.clamp(a, max=0.5)
            tensor([ 0.5000, -0.4702, -0.4599,  0.5000])
    
    ccllaammpp__(...)
    
    ccllaammpp__mmaaxx(...)
    
    ccllaammpp__mmaaxx__(...)
    
    ccllaammpp__mmiinn(...)
    
    ccllaammpp__mmiinn__(...)
    
    cclleeaarr__aauuttooccaasstt__ccaacchhee(...)
    
    cclliipp(...)
        clip(input, min, max, *, out=None) -> Tensor
        
        Alias for :func:`torch.clamp`.
    
    cclliipp__(...)
    
    cclloonnee(...)
        clone(input, *, memory_format=torch.preserve_format) -> Tensor
        
        Returns a copy of :attr:`input`.
        
        .. note::
        
            This function is differentiable, so gradients will flow back from the
            result of this operation to :attr:`input`. To create a tensor without an
            autograd relationship to :attr:`input` see :meth:`~Tensor.detach`.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned tensor. Default: ``torch.preserve_format``.
    
    ccoolluummnn__ssttaacckk(...)
        column_stack(tensors, *, out=None) -> Tensor
        
        Creates a new tensor by horizontally stacking the tensors in :attr:`tensors`.
        
        Equivalent to ``torch.hstack(tensors)``, except each zero or one dimensional tensor ``t``
        in :attr:`tensors` is first reshaped into a ``(t.numel(), 1)`` column before being stacked horizontally.
        
        Args:
            tensors (sequence of Tensors): sequence of tensors to concatenate
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([1, 2, 3])
            >>> b = torch.tensor([4, 5, 6])
            >>> torch.column_stack((a, b))
            tensor([[1, 4],
                [2, 5],
                [3, 6]])
            >>> a = torch.arange(5)
            >>> b = torch.arange(10).reshape(5, 2)
            >>> torch.column_stack((a, b, b))
            tensor([[0, 0, 1, 0, 1],
                    [1, 2, 3, 2, 3],
                    [2, 4, 5, 4, 5],
                    [3, 6, 7, 6, 7],
                    [4, 8, 9, 8, 9]])
    
    ccoommbbiinnaattiioonnss(...)
        combinations(input, r=2, with_replacement=False) -> seq
        
        Compute combinations of length :math:`r` of the given tensor. The behavior is similar to
        python's `itertools.combinations` when `with_replacement` is set to `False`, and
        `itertools.combinations_with_replacement` when `with_replacement` is set to `True`.
        
        Arguments:
            input (Tensor): 1D vector.
            r (int, optional): number of elements to combine
            with_replacement (boolean, optional): whether to allow duplication in combination
        
        Returns:
            Tensor: A tensor equivalent to converting all the input tensors into lists, do
            `itertools.combinations` or `itertools.combinations_with_replacement` on these
            lists, and finally convert the resulting list into tensor.
        
        Example::
        
            >>> a = [1, 2, 3]
            >>> list(itertools.combinations(a, r=2))
            [(1, 2), (1, 3), (2, 3)]
            >>> list(itertools.combinations(a, r=3))
            [(1, 2, 3)]
            >>> list(itertools.combinations_with_replacement(a, r=2))
            [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]
            >>> tensor_a = torch.tensor(a)
            >>> torch.combinations(tensor_a)
            tensor([[1, 2],
                    [1, 3],
                    [2, 3]])
            >>> torch.combinations(tensor_a, r=3)
            tensor([[1, 2, 3]])
            >>> torch.combinations(tensor_a, with_replacement=True)
            tensor([[1, 1],
                    [1, 2],
                    [1, 3],
                    [2, 2],
                    [2, 3],
                    [3, 3]])
    
    ccoommpplleexx(...)
        complex(real, imag, *, out=None) -> Tensor
        
        Constructs a complex tensor with its real part equal to :attr:`real` and its
        imaginary part equal to :attr:`imag`.
        
        Args:
            real (Tensor): The real part of the complex tensor. Must be float or double.
            imag (Tensor): The imaginary part of the complex tensor. Must be same dtype
                as :attr:`real`.
        
        Keyword args:
            out (Tensor): If the inputs are ``torch.float32``, must be
                ``torch.complex64``. If the inputs are ``torch.float64``, must be
                ``torch.complex128``.
        
        Example::
            >>> real = torch.tensor([1, 2], dtype=torch.float32)
            >>> imag = torch.tensor([3, 4], dtype=torch.float32)
            >>> z = torch.complex(real, imag)
            >>> z
            tensor([(1.+3.j), (2.+4.j)])
            >>> z.dtype
            torch.complex64
    
    ccoonnjj(...)
        conj(input, *, out=None) -> Tensor
        
        Computes the element-wise conjugate of the given :attr:`input` tensor. If :attr`input` has a non-complex dtype,
        this function just returns :attr:`input`.
        
        .. warning:: In the future, :func:`torch.conj` may return a non-writeable view for an :attr:`input` of
                     non-complex dtype. It's recommended that programs not modify the tensor returned by :func:`torch.conj`
                     when :attr:`input` is of non-complex dtype to be compatible with this change.
        
        .. math::
            \text{out}_{i} = conj(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.conj(torch.tensor([-1 + 1j, -2 + 2j, 3 - 3j]))
            tensor([-1 - 1j, -2 - 2j, 3 + 3j])
    
    ccoonnssttaanntt__ppaadd__nndd(...)
    
    ccoonnvv11dd(...)
        conv1d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) -> Tensor
        
        Applies a 1D convolution over an input signal composed of several input
        planes.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        See :class:`~torch.nn.Conv1d` for details and output shape.
        
        Note:
            In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting ``torch.backends.cudnn.deterministic = True``. See :doc:`/notes/randomness` for more information.
        
        
        Args:
            input: input tensor of shape :math:`(\text{minibatch} , \text{in\_channels} , iW)`
            weight: filters of shape :math:`(\text{out\_channels} , \frac{\text{in\_channels}}{\text{groups}} , kW)`
            bias: optional bias of shape :math:`(\text{out\_channels})`. Default: ``None``
            stride: the stride of the convolving kernel. Can be a single number or
              a one-element tuple `(sW,)`. Default: 1
            padding: implicit paddings on both sides of the input. Can be a
              single number or a one-element tuple `(padW,)`. Default: 0
            dilation: the spacing between kernel elements. Can be a single number or
              a one-element tuple `(dW,)`. Default: 1
            groups: split input into groups, :math:`\text{in\_channels}` should be divisible by
              the number of groups. Default: 1
        
        Examples::
        
            >>> filters = torch.randn(33, 16, 3)
            >>> inputs = torch.randn(20, 16, 50)
            >>> F.conv1d(inputs, filters)
    
    ccoonnvv22dd(...)
        conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) -> Tensor
        
        Applies a 2D convolution over an input image composed of several input
        planes.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        See :class:`~torch.nn.Conv2d` for details and output shape.
        
        Note:
            In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting ``torch.backends.cudnn.deterministic = True``. See :doc:`/notes/randomness` for more information.
        
        Args:
            input: input tensor of shape :math:`(\text{minibatch} , \text{in\_channels} , iH , iW)`
            weight: filters of shape :math:`(\text{out\_channels} , \frac{\text{in\_channels}}{\text{groups}} , kH , kW)`
            bias: optional bias tensor of shape :math:`(\text{out\_channels})`. Default: ``None``
            stride: the stride of the convolving kernel. Can be a single number or a
              tuple `(sH, sW)`. Default: 1
            padding: implicit paddings on both sides of the input. Can be a
              single number or a tuple `(padH, padW)`. Default: 0
            dilation: the spacing between kernel elements. Can be a single number or
              a tuple `(dH, dW)`. Default: 1
            groups: split input into groups, :math:`\text{in\_channels}` should be divisible by the
              number of groups. Default: 1
        
        Examples::
        
            >>> # With square kernels and equal stride
            >>> filters = torch.randn(8,4,3,3)
            >>> inputs = torch.randn(1,4,5,5)
            >>> F.conv2d(inputs, filters, padding=1)
    
    ccoonnvv33dd(...)
        conv3d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) -> Tensor
        
        Applies a 3D convolution over an input image composed of several input
        planes.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        See :class:`~torch.nn.Conv3d` for details and output shape.
        
        Note:
            In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting ``torch.backends.cudnn.deterministic = True``. See :doc:`/notes/randomness` for more information.
        
        
        Args:
            input: input tensor of shape :math:`(\text{minibatch} , \text{in\_channels} , iT , iH , iW)`
            weight: filters of shape :math:`(\text{out\_channels} , \frac{\text{in\_channels}}{\text{groups}} , kT , kH , kW)`
            bias: optional bias tensor of shape :math:`(\text{out\_channels})`. Default: None
            stride: the stride of the convolving kernel. Can be a single number or a
              tuple `(sT, sH, sW)`. Default: 1
            padding: implicit paddings on both sides of the input. Can be a
              single number or a tuple `(padT, padH, padW)`. Default: 0
            dilation: the spacing between kernel elements. Can be a single number or
              a tuple `(dT, dH, dW)`. Default: 1
            groups: split input into groups, :math:`\text{in\_channels}` should be divisible by
              the number of groups. Default: 1
        
        Examples::
        
            >>> filters = torch.randn(33, 16, 3, 3, 3)
            >>> inputs = torch.randn(20, 16, 50, 10, 20)
            >>> F.conv3d(inputs, filters)
    
    ccoonnvv__ttbbcc(...)
        Applies a 1-dimensional sequence convolution over an input sequence.
        Input and output dimensions are (Time, Batch, Channels) - hence TBC.
        
        Args:
            input: input tensor of shape :math:`(\text{sequence length} \times batch \times \text{in\_channels})`
            weight: filter of shape (:math:`\text{kernel width} \times \text{in\_channels} \times \text{out\_channels}`)
            bias: bias of shape (:math:`\text{out\_channels}`)
            pad: number of timesteps to pad. Default: 0
    
    ccoonnvv__ttrraannssppoossee11dd(...)
        conv_transpose1d(input, weight, bias=None, stride=1, padding=0, output_padding=0, groups=1, dilation=1) -> Tensor
        
        Applies a 1D transposed convolution operator over an input signal
        composed of several input planes, sometimes also called "deconvolution".
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        See :class:`~torch.nn.ConvTranspose1d` for details and output shape.
        
        Note:
            In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting ``torch.backends.cudnn.deterministic = True``. See :doc:`/notes/randomness` for more information.
        
        
        Args:
            input: input tensor of shape :math:`(\text{minibatch} , \text{in\_channels} , iW)`
            weight: filters of shape :math:`(\text{in\_channels} , \frac{\text{out\_channels}}{\text{groups}} , kW)`
            bias: optional bias of shape :math:`(\text{out\_channels})`. Default: None
            stride: the stride of the convolving kernel. Can be a single number or a
              tuple ``(sW,)``. Default: 1
            padding: ``dilation * (kernel_size - 1) - padding`` zero-padding will be added to both
              sides of each dimension in the input. Can be a single number or a tuple
              ``(padW,)``. Default: 0
            output_padding: additional size added to one side of each dimension in the
              output shape. Can be a single number or a tuple ``(out_padW)``. Default: 0
            groups: split input into groups, :math:`\text{in\_channels}` should be divisible by the
              number of groups. Default: 1
            dilation: the spacing between kernel elements. Can be a single number or
              a tuple ``(dW,)``. Default: 1
        
        Examples::
        
            >>> inputs = torch.randn(20, 16, 50)
            >>> weights = torch.randn(16, 33, 5)
            >>> F.conv_transpose1d(inputs, weights)
    
    ccoonnvv__ttrraannssppoossee22dd(...)
        conv_transpose2d(input, weight, bias=None, stride=1, padding=0, output_padding=0, groups=1, dilation=1) -> Tensor
        
        Applies a 2D transposed convolution operator over an input image
        composed of several input planes, sometimes also called "deconvolution".
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        See :class:`~torch.nn.ConvTranspose2d` for details and output shape.
        
        Note:
            In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting ``torch.backends.cudnn.deterministic = True``. See :doc:`/notes/randomness` for more information.
        
        
        Args:
            input: input tensor of shape :math:`(\text{minibatch} , \text{in\_channels} , iH , iW)`
            weight: filters of shape :math:`(\text{in\_channels} , \frac{\text{out\_channels}}{\text{groups}} , kH , kW)`
            bias: optional bias of shape :math:`(\text{out\_channels})`. Default: None
            stride: the stride of the convolving kernel. Can be a single number or a
              tuple ``(sH, sW)``. Default: 1
            padding: ``dilation * (kernel_size - 1) - padding`` zero-padding will be added to both
              sides of each dimension in the input. Can be a single number or a tuple
              ``(padH, padW)``. Default: 0
            output_padding: additional size added to one side of each dimension in the
              output shape. Can be a single number or a tuple ``(out_padH, out_padW)``.
              Default: 0
            groups: split input into groups, :math:`\text{in\_channels}` should be divisible by the
              number of groups. Default: 1
            dilation: the spacing between kernel elements. Can be a single number or
              a tuple ``(dH, dW)``. Default: 1
        
        Examples::
        
            >>> # With square kernels and equal stride
            >>> inputs = torch.randn(1, 4, 5, 5)
            >>> weights = torch.randn(4, 8, 3, 3)
            >>> F.conv_transpose2d(inputs, weights, padding=1)
    
    ccoonnvv__ttrraannssppoossee33dd(...)
        conv_transpose3d(input, weight, bias=None, stride=1, padding=0, output_padding=0, groups=1, dilation=1) -> Tensor
        
        Applies a 3D transposed convolution operator over an input image
        composed of several input planes, sometimes also called "deconvolution"
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        See :class:`~torch.nn.ConvTranspose3d` for details and output shape.
        
        Note:
            In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting ``torch.backends.cudnn.deterministic = True``. See :doc:`/notes/randomness` for more information.
        
        
        Args:
            input: input tensor of shape :math:`(\text{minibatch} , \text{in\_channels} , iT , iH , iW)`
            weight: filters of shape :math:`(\text{in\_channels} , \frac{\text{out\_channels}}{\text{groups}} , kT , kH , kW)`
            bias: optional bias of shape :math:`(\text{out\_channels})`. Default: None
            stride: the stride of the convolving kernel. Can be a single number or a
              tuple ``(sT, sH, sW)``. Default: 1
            padding: ``dilation * (kernel_size - 1) - padding`` zero-padding will be added to both
              sides of each dimension in the input. Can be a single number or a tuple
              ``(padT, padH, padW)``. Default: 0
            output_padding: additional size added to one side of each dimension in the
              output shape. Can be a single number or a tuple
              ``(out_padT, out_padH, out_padW)``. Default: 0
            groups: split input into groups, :math:`\text{in\_channels}` should be divisible by the
              number of groups. Default: 1
            dilation: the spacing between kernel elements. Can be a single number or
              a tuple `(dT, dH, dW)`. Default: 1
        
        Examples::
        
            >>> inputs = torch.randn(20, 16, 50, 10, 20)
            >>> weights = torch.randn(16, 33, 3, 3, 3)
            >>> F.conv_transpose3d(inputs, weights)
    
    ccoonnvvoolluuttiioonn(...)
    
    ccooppyyssiiggnn(...)
        copysign(input, other, *, out=None) -> Tensor
        
        Create a new floating-point tensor with the magnitude of :attr:`input` and the sign of :attr:`other`, elementwise.
        
        .. math::
            \text{out}_{i} = \begin{cases}
                -|\text{input}_{i}| & \text{if} \text{other}_{i} \leq -0.0 \\
                |\text{input}_{i}| & \text{if} \text{other}_{i} \geq 0.0 \\
            \end{cases}
        
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`,
        and integer and float inputs.
        
        Args:
            input (Tensor): magnitudes.
            other (Tensor or Number): contains value(s) whose signbit(s) are
                applied to the magnitudes in :attr:`input`.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(5)
            >>> a
            tensor([-1.2557, -0.0026, -0.5387,  0.4740, -0.9244])
            >>> torch.copysign(a, 1)
            tensor([1.2557, 0.0026, 0.5387, 0.4740, 0.9244])
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.7079,  0.2778, -1.0249,  0.5719],
                    [-0.0059, -0.2600, -0.4475, -1.3948],
                    [ 0.3667, -0.9567, -2.5757, -0.1751],
                    [ 0.2046, -0.0742,  0.2998, -0.1054]])
            >>> b = torch.randn(4)
            tensor([ 0.2373,  0.3120,  0.3190, -1.1128])
            >>> torch.copysign(a, b)
            tensor([[ 0.7079,  0.2778,  1.0249, -0.5719],
                    [ 0.0059,  0.2600,  0.4475, -1.3948],
                    [ 0.3667,  0.9567,  2.5757, -0.1751],
                    [ 0.2046,  0.0742,  0.2998, -0.1054]])
    
    ccooss(...)
        cos(input, *, out=None) -> Tensor
        
        Returns a new tensor with the cosine  of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \cos(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 1.4309,  1.2706, -0.8562,  0.9796])
            >>> torch.cos(a)
            tensor([ 0.1395,  0.2957,  0.6553,  0.5574])
    
    ccooss__(...)
    
    ccoosshh(...)
        cosh(input, *, out=None) -> Tensor
        
        Returns a new tensor with the hyperbolic cosine  of the elements of
        :attr:`input`.
        
        .. math::
            \text{out}_{i} = \cosh(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.1632,  1.1835, -0.6979, -0.7325])
            >>> torch.cosh(a)
            tensor([ 1.0133,  1.7860,  1.2536,  1.2805])
        
        .. note::
           When :attr:`input` is on the CPU, the implementation of torch.cosh may use
           the Sleef library, which rounds very large results to infinity or negative
           infinity. See `here <https://sleef.org/purec.xhtml>`_ for details.
    
    ccoosshh__(...)
    
    ccoossiinnee__eemmbbeeddddiinngg__lloossss(...)
    
    ccoossiinnee__ssiimmiillaarriittyy(...)
        cosine_similarity(x1, x2, dim=1, eps=1e-8) -> Tensor
        
        Returns cosine similarity between x1 and x2, computed along dim.
        
        .. math ::
            \text{similarity} = \dfrac{x_1 \cdot x_2}{\max(\Vert x_1 \Vert _2 \cdot \Vert x_2 \Vert _2, \epsilon)}
        
        Args:
            x1 (Tensor): First input.
            x2 (Tensor): Second input (of size matching x1).
            dim (int, optional): Dimension of vectors. Default: 1
            eps (float, optional): Small value to avoid division by zero.
                Default: 1e-8
        
        Shape:
            - Input: :math:`(\ast_1, D, \ast_2)` where D is at position `dim`.
            - Output: :math:`(\ast_1, \ast_2)` where 1 is at position `dim`.
        
        Example::
        
            >>> input1 = torch.randn(100, 128)
            >>> input2 = torch.randn(100, 128)
            >>> output = F.cosine_similarity(input1, input2)
            >>> print(output)
    
    ccoouunntt__nnoonnzzeerroo(...)
        count_nonzero(input, dim=None) -> Tensor
        
        Counts the number of non-zero values in the tensor :attr:`input` along the given :attr:`dim`.
        If no dim is specified then all non-zeros in the tensor are counted.
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints, optional): Dim or tuple of dims along which to count non-zeros.
        
        Example::
        
            >>> x = torch.zeros(3,3)
            >>> x[torch.randn(3,3) > 0.5] = 1
            >>> x
            tensor([[0., 1., 1.],
                    [0., 0., 0.],
                    [0., 0., 1.]])
            >>> torch.count_nonzero(x)
            tensor(3)
            >>> torch.count_nonzero(x, dim=0)
            tensor([0, 1, 2])
    
    ccrroossss(...)
        cross(input, other, dim=None, *, out=None) -> Tensor
        
        
        Returns the cross product of vectors in dimension :attr:`dim` of :attr:`input`
        and :attr:`other`.
        
        :attr:`input` and :attr:`other` must have the same size, and the size of their
        :attr:`dim` dimension should be 3.
        
        If :attr:`dim` is not given, it defaults to the first dimension found with the
        size 3. Note that this might be unexpected.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
            dim  (int, optional): the dimension to take the cross-product in.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 3)
            >>> a
            tensor([[-0.3956,  1.1455,  1.6895],
                    [-0.5849,  1.3672,  0.3599],
                    [-1.1626,  0.7180, -0.0521],
                    [-0.1339,  0.9902, -2.0225]])
            >>> b = torch.randn(4, 3)
            >>> b
            tensor([[-0.0257, -1.4725, -1.2251],
                    [-1.1479, -0.7005, -1.9757],
                    [-1.3904,  0.3726, -1.1836],
                    [-0.9688, -0.7153,  0.2159]])
            >>> torch.cross(a, b, dim=1)
            tensor([[ 1.0844, -0.5281,  0.6120],
                    [-2.4490, -1.5687,  1.9792],
                    [-0.8304, -1.3037,  0.5650],
                    [-1.2329,  1.9883,  1.0551]])
            >>> torch.cross(a, b)
            tensor([[ 1.0844, -0.5281,  0.6120],
                    [-2.4490, -1.5687,  1.9792],
                    [-0.8304, -1.3037,  0.5650],
                    [-1.2329,  1.9883,  1.0551]])
    
    ccttcc__lloossss(...)
    
    ccuuddnnnn__aaffffiinnee__ggrriidd__ggeenneerraattoorr(...)
    
    ccuuddnnnn__bbaattcchh__nnoorrmm(...)
    
    ccuuddnnnn__ccoonnvvoolluuttiioonn(...)
    
    ccuuddnnnn__ccoonnvvoolluuttiioonn__ttrraannssppoossee(...)
    
    ccuuddnnnn__ggrriidd__ssaammpplleerr(...)
    
    ccuuddnnnn__iiss__aacccceeppttaabbllee(...)
    
    ccuummmmaaxx(...)
        cummax(input, dim, *, out=None) -> (Tensor, LongTensor)
        Returns a namedtuple ``(values, indices)`` where ``values`` is the cumulative maximum of
        elements of :attr:`input` in the dimension :attr:`dim`. And ``indices`` is the index
        location of each maximum value found in the dimension :attr:`dim`.
        
        .. math::
            y_i = max(x_1, x_2, x_3, \dots, x_i)
        
        Args:
            input (Tensor): the input tensor.
            dim  (int): the dimension to do the operation over
        
        Keyword args:
            out (tuple, optional): the result tuple of two output tensors (values, indices)
        
        Example::
        
            >>> a = torch.randn(10)
            >>> a
            tensor([-0.3449, -1.5447,  0.0685, -1.5104, -1.1706,  0.2259,  1.4696, -1.3284,
                 1.9946, -0.8209])
            >>> torch.cummax(a, dim=0)
            torch.return_types.cummax(
                values=tensor([-0.3449, -0.3449,  0.0685,  0.0685,  0.0685,  0.2259,  1.4696,  1.4696,
                 1.9946,  1.9946]),
                indices=tensor([0, 0, 2, 2, 2, 5, 6, 6, 8, 8]))
    
    ccuummmmiinn(...)
        cummin(input, dim, *, out=None) -> (Tensor, LongTensor)
        Returns a namedtuple ``(values, indices)`` where ``values`` is the cumulative minimum of
        elements of :attr:`input` in the dimension :attr:`dim`. And ``indices`` is the index
        location of each maximum value found in the dimension :attr:`dim`.
        
        .. math::
            y_i = min(x_1, x_2, x_3, \dots, x_i)
        
        Args:
            input (Tensor): the input tensor.
            dim  (int): the dimension to do the operation over
        
        Keyword args:
            out (tuple, optional): the result tuple of two output tensors (values, indices)
        
        Example::
        
            >>> a = torch.randn(10)
            >>> a
            tensor([-0.2284, -0.6628,  0.0975,  0.2680, -1.3298, -0.4220, -0.3885,  1.1762,
                 0.9165,  1.6684])
            >>> torch.cummin(a, dim=0)
            torch.return_types.cummin(
                values=tensor([-0.2284, -0.6628, -0.6628, -0.6628, -1.3298, -1.3298, -1.3298, -1.3298,
                -1.3298, -1.3298]),
                indices=tensor([0, 1, 1, 1, 4, 4, 4, 4, 4, 4]))
    
    ccuummpprroodd(...)
        cumprod(input, dim, *, dtype=None, out=None) -> Tensor
        
        Returns the cumulative product of elements of :attr:`input` in the dimension
        :attr:`dim`.
        
        For example, if :attr:`input` is a vector of size N, the result will also be
        a vector of size N, with elements.
        
        .. math::
            y_i = x_1 \times x_2\times x_3\times \dots \times x_i
        
        Args:
            input (Tensor): the input tensor.
            dim  (int): the dimension to do the operation over
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(10)
            >>> a
            tensor([ 0.6001,  0.2069, -0.1919,  0.9792,  0.6727,  1.0062,  0.4126,
                    -0.2129, -0.4206,  0.1968])
            >>> torch.cumprod(a, dim=0)
            tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0158, -0.0065,
                     0.0014, -0.0006, -0.0001])
        
            >>> a[5] = 0.0
            >>> torch.cumprod(a, dim=0)
            tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0000, -0.0000,
                     0.0000, -0.0000, -0.0000])
    
    ccuummssuumm(...)
        cumsum(input, dim, *, dtype=None, out=None) -> Tensor
        
        Returns the cumulative sum of elements of :attr:`input` in the dimension
        :attr:`dim`.
        
        For example, if :attr:`input` is a vector of size N, the result will also be
        a vector of size N, with elements.
        
        .. math::
            y_i = x_1 + x_2 + x_3 + \dots + x_i
        
        Args:
            input (Tensor): the input tensor.
            dim  (int): the dimension to do the operation over
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(10)
            >>> a
            tensor([-0.8286, -0.4890,  0.5155,  0.8443,  0.1865, -0.1752, -2.0595,
                     0.1850, -1.1571, -0.4243])
            >>> torch.cumsum(a, dim=0)
            tensor([-0.8286, -1.3175, -0.8020,  0.0423,  0.2289,  0.0537, -2.0058,
                    -1.8209, -2.9780, -3.4022])
    
    ddeegg22rraadd(...)
        deg2rad(input, *, out=None) -> Tensor
        
        Returns a new tensor with each of the elements of :attr:`input`
        converted from angles in degrees to radians.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([[180.0, -180.0], [360.0, -360.0], [90.0, -90.0]])
            >>> torch.deg2rad(a)
            tensor([[ 3.1416, -3.1416],
                    [ 6.2832, -6.2832],
                    [ 1.5708, -1.5708]])
    
    ddeegg22rraadd__(...)
    
    ddeeqquuaannttiizzee(...)
        dequantize(tensor) -> Tensor
        
        Returns an fp32 Tensor by dequantizing a quantized Tensor
        
        Args:
            tensor (Tensor): A quantized Tensor
        
        .. function:: dequantize(tensors) -> sequence of Tensors
        
        Given a list of quantized Tensors, dequantize them and return a list of fp32 Tensors
        
        Args:
             tensors (sequence of Tensors): A list of quantized Tensors
    
    ddeett(...)
        det(input) -> Tensor
        
        Calculates determinant of a square matrix or batches of square matrices.
        
        .. note:: :func:`torch.det` is deprecated. Please use :func:`torch.linalg.det` instead.
        
        .. note::
            Backward through :math:`det` internally uses SVD results when :attr:`input` is
            not invertible. In this case, double backward through :math:`det` will be
            unstable when :attr:`input` doesn't have distinct singular values. See
            :math:`~torch.svd` for details.
        
        Arguments:
            input (Tensor): the input tensor of size ``(*, n, n)`` where ``*`` is zero or more
                            batch dimensions.
        
        Example::
        
            >>> A = torch.randn(3, 3)
            >>> torch.det(A)
            tensor(3.7641)
        
            >>> A = torch.randn(3, 2, 2)
            >>> A
            tensor([[[ 0.9254, -0.6213],
                     [-0.5787,  1.6843]],
        
                    [[ 0.3242, -0.9665],
                     [ 0.4539, -0.0887]],
        
                    [[ 1.1336, -0.4025],
                     [-0.7089,  0.9032]]])
            >>> A.det()
            tensor([1.1990, 0.4099, 0.7386])
    
    ddeettaacchh(...)
    
    ddeettaacchh__(...)
    
    ddiiaagg(...)
        diag(input, diagonal=0, *, out=None) -> Tensor
        
        - If :attr:`input` is a vector (1-D tensor), then returns a 2-D square tensor
          with the elements of :attr:`input` as the diagonal.
        - If :attr:`input` is a matrix (2-D tensor), then returns a 1-D tensor with
          the diagonal elements of :attr:`input`.
        
        The argument :attr:`diagonal` controls which diagonal to consider:
        
        - If :attr:`diagonal` = 0, it is the main diagonal.
        - If :attr:`diagonal` > 0, it is above the main diagonal.
        - If :attr:`diagonal` < 0, it is below the main diagonal.
        
        Args:
            input (Tensor): the input tensor.
            diagonal (int, optional): the diagonal to consider
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        .. seealso::
        
                :func:`torch.diagonal` always returns the diagonal of its input.
        
                :func:`torch.diagflat` always constructs a tensor with diagonal elements
                specified by the input.
        
        Examples:
        
        Get the square matrix where the input vector is the diagonal::
        
            >>> a = torch.randn(3)
            >>> a
            tensor([ 0.5950,-0.0872, 2.3298])
            >>> torch.diag(a)
            tensor([[ 0.5950, 0.0000, 0.0000],
                    [ 0.0000,-0.0872, 0.0000],
                    [ 0.0000, 0.0000, 2.3298]])
            >>> torch.diag(a, 1)
            tensor([[ 0.0000, 0.5950, 0.0000, 0.0000],
                    [ 0.0000, 0.0000,-0.0872, 0.0000],
                    [ 0.0000, 0.0000, 0.0000, 2.3298],
                    [ 0.0000, 0.0000, 0.0000, 0.0000]])
        
        Get the k-th diagonal of a given matrix::
        
            >>> a = torch.randn(3, 3)
            >>> a
            tensor([[-0.4264, 0.0255,-0.1064],
                    [ 0.8795,-0.2429, 0.1374],
                    [ 0.1029,-0.6482,-1.6300]])
            >>> torch.diag(a, 0)
            tensor([-0.4264,-0.2429,-1.6300])
            >>> torch.diag(a, 1)
            tensor([ 0.0255, 0.1374])
    
    ddiiaagg__eemmbbeedd(...)
        diag_embed(input, offset=0, dim1=-2, dim2=-1) -> Tensor
        
        Creates a tensor whose diagonals of certain 2D planes (specified by
        :attr:`dim1` and :attr:`dim2`) are filled by :attr:`input`.
        To facilitate creating batched diagonal matrices, the 2D planes formed by
        the last two dimensions of the returned tensor are chosen by default.
        
        The argument :attr:`offset` controls which diagonal to consider:
        
        - If :attr:`offset` = 0, it is the main diagonal.
        - If :attr:`offset` > 0, it is above the main diagonal.
        - If :attr:`offset` < 0, it is below the main diagonal.
        
        The size of the new matrix will be calculated to make the specified diagonal
        of the size of the last input dimension.
        Note that for :attr:`offset` other than :math:`0`, the order of :attr:`dim1`
        and :attr:`dim2` matters. Exchanging them is equivalent to changing the
        sign of :attr:`offset`.
        
        Applying :meth:`torch.diagonal` to the output of this function with
        the same arguments yields a matrix identical to input. However,
        :meth:`torch.diagonal` has different default dimensions, so those
        need to be explicitly specified.
        
        Args:
            input (Tensor): the input tensor. Must be at least 1-dimensional.
            offset (int, optional): which diagonal to consider. Default: 0
                (main diagonal).
            dim1 (int, optional): first dimension with respect to which to
                take diagonal. Default: -2.
            dim2 (int, optional): second dimension with respect to which to
                take diagonal. Default: -1.
        
        Example::
        
            >>> a = torch.randn(2, 3)
            >>> torch.diag_embed(a)
            tensor([[[ 1.5410,  0.0000,  0.0000],
                     [ 0.0000, -0.2934,  0.0000],
                     [ 0.0000,  0.0000, -2.1788]],
        
                    [[ 0.5684,  0.0000,  0.0000],
                     [ 0.0000, -1.0845,  0.0000],
                     [ 0.0000,  0.0000, -1.3986]]])
        
            >>> torch.diag_embed(a, offset=1, dim1=0, dim2=2)
            tensor([[[ 0.0000,  1.5410,  0.0000,  0.0000],
                     [ 0.0000,  0.5684,  0.0000,  0.0000]],
        
                    [[ 0.0000,  0.0000, -0.2934,  0.0000],
                     [ 0.0000,  0.0000, -1.0845,  0.0000]],
        
                    [[ 0.0000,  0.0000,  0.0000, -2.1788],
                     [ 0.0000,  0.0000,  0.0000, -1.3986]],
        
                    [[ 0.0000,  0.0000,  0.0000,  0.0000],
                     [ 0.0000,  0.0000,  0.0000,  0.0000]]])
    
    ddiiaaggffllaatt(...)
        diagflat(input, offset=0) -> Tensor
        
        - If :attr:`input` is a vector (1-D tensor), then returns a 2-D square tensor
          with the elements of :attr:`input` as the diagonal.
        - If :attr:`input` is a tensor with more than one dimension, then returns a
          2-D tensor with diagonal elements equal to a flattened :attr:`input`.
        
        The argument :attr:`offset` controls which diagonal to consider:
        
        - If :attr:`offset` = 0, it is the main diagonal.
        - If :attr:`offset` > 0, it is above the main diagonal.
        - If :attr:`offset` < 0, it is below the main diagonal.
        
        Args:
            input (Tensor): the input tensor.
            offset (int, optional): the diagonal to consider. Default: 0 (main
                diagonal).
        
        Examples::
        
            >>> a = torch.randn(3)
            >>> a
            tensor([-0.2956, -0.9068,  0.1695])
            >>> torch.diagflat(a)
            tensor([[-0.2956,  0.0000,  0.0000],
                    [ 0.0000, -0.9068,  0.0000],
                    [ 0.0000,  0.0000,  0.1695]])
            >>> torch.diagflat(a, 1)
            tensor([[ 0.0000, -0.2956,  0.0000,  0.0000],
                    [ 0.0000,  0.0000, -0.9068,  0.0000],
                    [ 0.0000,  0.0000,  0.0000,  0.1695],
                    [ 0.0000,  0.0000,  0.0000,  0.0000]])
        
            >>> a = torch.randn(2, 2)
            >>> a
            tensor([[ 0.2094, -0.3018],
                    [-0.1516,  1.9342]])
            >>> torch.diagflat(a)
            tensor([[ 0.2094,  0.0000,  0.0000,  0.0000],
                    [ 0.0000, -0.3018,  0.0000,  0.0000],
                    [ 0.0000,  0.0000, -0.1516,  0.0000],
                    [ 0.0000,  0.0000,  0.0000,  1.9342]])
    
    ddiiaaggoonnaall(...)
        diagonal(input, offset=0, dim1=0, dim2=1) -> Tensor
        
        Returns a partial view of :attr:`input` with the its diagonal elements
        with respect to :attr:`dim1` and :attr:`dim2` appended as a dimension
        at the end of the shape.
        
        The argument :attr:`offset` controls which diagonal to consider:
        
        - If :attr:`offset` = 0, it is the main diagonal.
        - If :attr:`offset` > 0, it is above the main diagonal.
        - If :attr:`offset` < 0, it is below the main diagonal.
        
        Applying :meth:`torch.diag_embed` to the output of this function with
        the same arguments yields a diagonal matrix with the diagonal entries
        of the input. However, :meth:`torch.diag_embed` has different default
        dimensions, so those need to be explicitly specified.
        
        Args:
            input (Tensor): the input tensor. Must be at least 2-dimensional.
            offset (int, optional): which diagonal to consider. Default: 0
                (main diagonal).
            dim1 (int, optional): first dimension with respect to which to
                take diagonal. Default: 0.
            dim2 (int, optional): second dimension with respect to which to
                take diagonal. Default: 1.
        
        .. note::  To take a batch diagonal, pass in dim1=-2, dim2=-1.
        
        Examples::
        
            >>> a = torch.randn(3, 3)
            >>> a
            tensor([[-1.0854,  1.1431, -0.1752],
                    [ 0.8536, -0.0905,  0.0360],
                    [ 0.6927, -0.3735, -0.4945]])
        
        
            >>> torch.diagonal(a, 0)
            tensor([-1.0854, -0.0905, -0.4945])
        
        
            >>> torch.diagonal(a, 1)
            tensor([ 1.1431,  0.0360])
        
        
            >>> x = torch.randn(2, 5, 4, 2)
            >>> torch.diagonal(x, offset=-1, dim1=1, dim2=2)
            tensor([[[-1.2631,  0.3755, -1.5977, -1.8172],
                     [-1.1065,  1.0401, -0.2235, -0.7938]],
        
                    [[-1.7325, -0.3081,  0.6166,  0.2335],
                     [ 1.0500,  0.7336, -0.3836, -1.1015]]])
    
    ddiiffff(...)
        diff(input, n=1, dim=-1, prepend=None, append=None) -> Tensor
        
        Computes the n-th forward difference along the given dimension.
        
        The first-order differences are given by `out[i] = input[i + 1] - input[i]`. Higher-order
        differences are calculated by using :func:`torch.diff` recursively.
        
        .. note::  Only `n = 1` is currently supported
        
        Args:
            input (Tensor): the tensor to compute the differences on
            n (int, optional): the number of times to recursively compute the difference
            dim (int, optional): the dimension to compute the difference along.
                Default is the last dimension.
            prepend, append (Tensor, optional): values to prepend or append to
                :attr:`input` along :attr:`dim` before computing the difference.
                Their dimensions must be equivalent to that of input, and their shapes
                must match input's shape except on :attr:`dim`.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([1, 3, 2])
            >>> torch.diff(a)
            tensor([ 2, -1])
            >>> b = torch.tensor([4, 5])
            >>> torch.diff(a, append=b)
            tensor([ 2, -1,  2,  1])
            >>> c = torch.tensor([[1, 2, 3], [3, 4, 5]])
            >>> torch.diff(c, dim=0)
            tensor([[2, 2, 2]])
            >>> torch.diff(c, dim=1)
            tensor([[1, 1],
                    [1, 1]])
    
    ddiiggaammmmaa(...)
        digamma(input, *, out=None) -> Tensor
        
        Computes the logarithmic derivative of the gamma function on `input`.
        
        .. math::
            \psi(x) = \frac{d}{dx} \ln\left(\Gamma\left(x\right)\right) = \frac{\Gamma'(x)}{\Gamma(x)}
        
        Args:
            input (Tensor): the tensor to compute the digamma function on
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        .. note::  This function is similar to SciPy's `scipy.special.digamma`.
        
        .. note::  From PyTorch 1.8 onwards, the digamma function returns `-Inf` for `0`.
                   Previously it returned `NaN` for `0`.
        
        Example::
        
            >>> a = torch.tensor([1, 0.5])
            >>> torch.digamma(a)
            tensor([-0.5772, -1.9635])
    
    ddiisstt(...)
        dist(input, other, p=2) -> Tensor
        
        Returns the p-norm of (:attr:`input` - :attr:`other`)
        
        The shapes of :attr:`input` and :attr:`other` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the Right-hand-side input tensor
            p (float, optional): the norm to be computed
        
        Example::
        
            >>> x = torch.randn(4)
            >>> x
            tensor([-1.5393, -0.8675,  0.5916,  1.6321])
            >>> y = torch.randn(4)
            >>> y
            tensor([ 0.0967, -1.0511,  0.6295,  0.8360])
            >>> torch.dist(x, y, 3.5)
            tensor(1.6727)
            >>> torch.dist(x, y, 3)
            tensor(1.6973)
            >>> torch.dist(x, y, 0)
            tensor(inf)
            >>> torch.dist(x, y, 1)
            tensor(2.6537)
    
    ddiivv(...)
        div(input, other, *, rounding_mode=None, out=None) -> Tensor
        
        Divides each element of the input ``input`` by the corresponding element of
        :attr:`other`.
        
        .. math::
            \text{out}_i = \frac{\text{input}_i}{\text{other}_i}
        
        .. note::
            By default, this performs a "true" division like Python 3.
            See the :attr:`rounding_mode` argument for floor division.
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`,
        :ref:`type promotion <type-promotion-doc>`, and integer, float, and complex inputs.
        Always promotes integer types to the default scalar type.
        
        Args:
            input (Tensor): the dividend
            other (Tensor or Number): the divisor
        
        Keyword args:
            rounding_mode (str, optional): Type of rounding applied to the result:
        
                * None - default behavior. Performs no rounding and, if both :attr:`input` and
                  :attr:`other` are integer types, promotes the inputs to the default scalar type.
                  Equivalent to true division in Python (the ``/`` operator) and NumPy's ``np.true_divide``.
                * ``"trunc"`` - rounds the results of the division towards zero.
                  Equivalent to C-style integer division.
                * ``"floor"`` - rounds the results of the division down.
                  Equivalent to floor division in Python (the ``//`` operator) and NumPy's ``np.floor_divide``.
        
            out (Tensor, optional): the output tensor.
        
        Examples::
        
            >>> x = torch.tensor([ 0.3810,  1.2774, -0.2972, -0.3719,  0.4637])
            >>> torch.div(x, 0.5)
            tensor([ 0.7620,  2.5548, -0.5944, -0.7438,  0.9274])
        
            >>> a = torch.tensor([[-0.3711, -1.9353, -0.4605, -0.2917],
            ...                   [ 0.1815, -1.0111,  0.9805, -1.5923],
            ...                   [ 0.1062,  1.4581,  0.7759, -1.2344],
            ...                   [-0.1830, -0.0313,  1.1908, -1.4757]])
            >>> b = torch.tensor([ 0.8032,  0.2930, -0.8113, -0.2308])
            >>> torch.div(a, b)
            tensor([[-0.4620, -6.6051,  0.5676,  1.2639],
                    [ 0.2260, -3.4509, -1.2086,  6.8990],
                    [ 0.1322,  4.9764, -0.9564,  5.3484],
                    [-0.2278, -0.1068, -1.4678,  6.3938]])
        
            >>> torch.div(a, b, rounding_mode='trunc')
            tensor([[-0., -6.,  0.,  1.],
                    [ 0., -3., -1.,  6.],
                    [ 0.,  4., -0.,  5.],
                    [-0., -0., -1.,  6.]])
        
            >>> torch.div(a, b, rounding_mode='floor')
            tensor([[-1., -7.,  0.,  1.],
                    [ 0., -4., -2.,  6.],
                    [ 0.,  4., -1.,  5.],
                    [-1., -1., -2.,  6.]])
    
    ddiivviiddee(...)
        divide(input, other, *, rounding_mode=None, out=None) -> Tensor
        
        Alias for :func:`torch.div`.
    
    ddoott(...)
        dot(input, other, *, out=None) -> Tensor
        
        Computes the dot product of two 1D tensors.
        
        .. note::
        
            Unlike NumPy's dot, torch.dot intentionally only supports computing the dot product
            of two 1D tensors with the same number of elements.
        
        Args:
            input (Tensor): first tensor in the dot product, must be 1D.
            other (Tensor): second tensor in the dot product, must be 1D.
        
        Keyword args:
            {out}
        
        Example::
        
            >>> torch.dot(torch.tensor([2, 3]), torch.tensor([2, 1]))
            tensor(7)
    
    ddrrooppoouutt(...)
    
    ddrrooppoouutt__(...)
    
    ddssmmmm(...)
    
    ddssttaacckk(...)
        dstack(tensors, *, out=None) -> Tensor
        
        Stack tensors in sequence depthwise (along third axis).
        
        This is equivalent to concatenation along the third axis after 1-D and 2-D tensors have been reshaped by :func:`torch.atleast_3d`.
        
        Args:
            tensors (sequence of Tensors): sequence of tensors to concatenate
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
            >>> a = torch.tensor([1, 2, 3])
            >>> b = torch.tensor([4, 5, 6])
            >>> torch.dstack((a,b))
            tensor([[[1, 4],
                     [2, 5],
                     [3, 6]]])
            >>> a = torch.tensor([[1],[2],[3]])
            >>> b = torch.tensor([[4],[5],[6]])
            >>> torch.dstack((a,b))
            tensor([[[1, 4]],
                    [[2, 5]],
                    [[3, 6]]])
    
    eeiigg(...)
        eig(input, eigenvectors=False, *, out=None) -> (Tensor, Tensor)
        
        Computes the eigenvalues and eigenvectors of a real square matrix.
        
        .. note::
            Since eigenvalues and eigenvectors might be complex, backward pass is supported only
            if eigenvalues and eigenvectors are all real valued.
        
            When :attr:`input` is on CUDA, :func:`torch.eig() <torch.eig>` causes
            host-device synchronization.
        
        Args:
            input (Tensor): the square matrix of shape :math:`(n \times n)` for which the eigenvalues and eigenvectors
                will be computed
            eigenvectors (bool): ``True`` to compute both eigenvalues and eigenvectors;
                otherwise, only eigenvalues will be computed
        
        Keyword args:
            out (tuple, optional): the output tensors
        
        Returns:
            (Tensor, Tensor): A namedtuple (eigenvalues, eigenvectors) containing
        
                - **eigenvalues** (*Tensor*): Shape :math:`(n \times 2)`. Each row is an eigenvalue of ``input``,
                  where the first element is the real part and the second element is the imaginary part.
                  The eigenvalues are not necessarily ordered.
                - **eigenvectors** (*Tensor*): If ``eigenvectors=False``, it's an empty tensor.
                  Otherwise, this tensor of shape :math:`(n \times n)` can be used to compute normalized (unit length)
                  eigenvectors of corresponding eigenvalues as follows.
                  If the corresponding `eigenvalues[j]` is a real number, column `eigenvectors[:, j]` is the eigenvector
                  corresponding to `eigenvalues[j]`.
                  If the corresponding `eigenvalues[j]` and `eigenvalues[j + 1]` form a complex conjugate pair, then the
                  true eigenvectors can be computed as
                  :math:`\text{true eigenvector}[j] = eigenvectors[:, j] + i \times eigenvectors[:, j + 1]`,
                  :math:`\text{true eigenvector}[j + 1] = eigenvectors[:, j] - i \times eigenvectors[:, j + 1]`.
        
        Example::
        
            Trivial example with a diagonal matrix. By default, only eigenvalues are computed:
        
            >>> a = torch.diag(torch.tensor([1, 2, 3], dtype=torch.double))
            >>> e, v = torch.eig(a)
            >>> e
            tensor([[1., 0.],
                    [2., 0.],
                    [3., 0.]], dtype=torch.float64)
            >>> v
            tensor([], dtype=torch.float64)
        
            Compute also the eigenvectors:
        
            >>> e, v = torch.eig(a, eigenvectors=True)
            >>> e
            tensor([[1., 0.],
                    [2., 0.],
                    [3., 0.]], dtype=torch.float64)
            >>> v
            tensor([[1., 0., 0.],
                    [0., 1., 0.],
                    [0., 0., 1.]], dtype=torch.float64)
    
    eeiinnssuumm(equation, *operands)
        einsum(equation, *operands) -> Tensor
        
        Sums the product of the elements of the input :attr:`operands` along dimensions specified using a notation
        based on the Einstein summation convention.
        
        Einsum allows computing many common multi-dimensional linear algebraic array operations by representing them
        in a short-hand format based on the Einstein summation convention, given by :attr:`equation`. The details of
        this format are described below, but the general idea is to label every dimension of the input :attr:`operands`
        with some subscript and define which subscripts are part of the output. The output is then computed by summing
        the product of the elements of the :attr:`operands` along the dimensions whose subscripts are not part of the
        output. For example, matrix multiplication can be computed using einsum as `torch.einsum("ij,jk->ik", A, B)`.
        Here, j is the summation subscript and i and k the output subscripts (see section below for more details on why).
        
        Equation:
        
            The :attr:`equation` string specifies the subscripts (lower case letters `['a', 'z']`) for each dimension of
            the input :attr:`operands` in the same order as the dimensions, separating subcripts for each operand by a
            comma (','), e.g. `'ij,jk'` specify subscripts for two 2D operands. The dimensions labeled with the same subscript
            must be broadcastable, that is, their size must either match or be `1`. The exception is if a subscript is
            repeated for the same input operand, in which case the dimensions labeled with this subscript for this operand
            must match in size and the operand will be replaced by its diagonal along these dimensions. The subscripts that
            appear exactly once in the :attr:`equation` will be part of the output, sorted in increasing alphabetical order.
            The output is computed by multiplying the input :attr:`operands` element-wise, with their dimensions aligned based
            on the subscripts, and then summing out the dimensions whose subscripts are not part of the output.
        
            Optionally, the output subscripts can be explicitly defined by adding an arrow ('->') at the end of the equation
            followed by the subscripts for the output. For instance, the following equation computes the transpose of a
            matrix multiplication: 'ij,jk->ki'. The output subscripts must appear at least once for some input operand and
            at most once for the output.
        
            Ellipsis ('...') can be used in place of subscripts to broadcast the dimensions covered by the ellipsis.
            Each input operand may contain at most one ellipsis which will cover the dimensions not covered by subscripts,
            e.g. for an input operand with 5 dimensions, the ellipsis in the equation `'ab...c'` cover the third and fourth
            dimensions. The ellipsis does not need to cover the same number of dimensions across the :attr:`operands` but the
            'shape' of the ellipsis (the size of the dimensions covered by them) must broadcast together. If the output is not
            explicitly defined with the arrow ('->') notation, the ellipsis will come first in the output (left-most dimensions),
            before the subscript labels that appear exactly once for the input operands. e.g. the following equation implements
            batch matrix multiplication `'...ij,...jk'`.
        
            A few final notes: the equation may contain whitespaces between the different elements (subscripts, ellipsis,
            arrow and comma) but something like `'. . .'` is not valid. An empty string `''` is valid for scalar operands.
        
        .. note::
        
            ``torch.einsum`` handles ellipsis ('...') differently from NumPy in that it allows dimensions
            covered by the ellipsis to be summed over, that is, ellipsis are not required to be part of the output.
        
        .. note::
        
            This function does not optimize the given expression, so a different formula for the same computation may
            run faster or consume less memory. Projects like opt_einsum (https://optimized-einsum.readthedocs.io/en/stable/)
            can optimize the formula for you.
        
        Args:
            equation (string): The subscripts for the Einstein summation.
            operands (Tensor): The operands to compute the Einstein sum of.
        
        Examples::
        
            # trace
            >>> torch.einsum('ii', torch.randn(4, 4))
            tensor(-1.2104)
        
            # diagonal
            >>> torch.einsum('ii->i', torch.randn(4, 4))
            tensor([-0.1034,  0.7952, -0.2433,  0.4545])
        
            # outer product
            >>> x = torch.randn(5)
            >>> y = torch.randn(4)
            >>> torch.einsum('i,j->ij', x, y)
            tensor([[ 0.1156, -0.2897, -0.3918,  0.4963],
                    [-0.3744,  0.9381,  1.2685, -1.6070],
                    [ 0.7208, -1.8058, -2.4419,  3.0936],
                    [ 0.1713, -0.4291, -0.5802,  0.7350],
                    [ 0.5704, -1.4290, -1.9323,  2.4480]])
        
            # batch matrix multiplication
            >>> As = torch.randn(3,2,5)
            >>> Bs = torch.randn(3,5,4)
            >>> torch.einsum('bij,bjk->bik', As, Bs)
            tensor([[[-1.0564, -1.5904,  3.2023,  3.1271],
                    [-1.6706, -0.8097, -0.8025, -2.1183]],
        
                    [[ 4.2239,  0.3107, -0.5756, -0.2354],
                    [-1.4558, -0.3460,  1.5087, -0.8530]],
        
                    [[ 2.8153,  1.8787, -4.3839, -1.2112],
                    [ 0.3728, -2.1131,  0.0921,  0.8305]]])
        
            # batch permute
            >>> A = torch.randn(2, 3, 4, 5)
            >>> torch.einsum('...ij->...ji', A).shape
            torch.Size([2, 3, 5, 4])
        
            # equivalent to torch.nn.functional.bilinear
            >>> A = torch.randn(3,5,4)
            >>> l = torch.randn(2,5)
            >>> r = torch.randn(2,4)
            >>> torch.einsum('bn,anm,bm->ba', l, A, r)
            tensor([[-0.3430, -5.2405,  0.4494],
                    [ 0.3311,  5.5201, -3.0356]])
    
    eemmbbeeddddiinngg(...)
    
    eemmbbeeddddiinngg__bbaagg(...)
    
    eemmbbeeddddiinngg__rreennoorrmm__(...)
    
    eemmppttyy(...)
        empty(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor
        
        Returns a tensor filled with uninitialized data. The shape of the tensor is
        defined by the variable argument :attr:`size`.
        
        Args:
            size (int...): a sequence of integers defining the shape of the output tensor.
                Can be a variable number of arguments or a collection like a list or tuple.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            pin_memory (bool, optional): If set, returned tensor would be allocated in
                the pinned memory. Works only for CPU tensors. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.contiguous_format``.
        
        Example::
        
            >>> torch.empty(2, 3)
            tensor(1.00000e-08 *
                   [[ 6.3984,  0.0000,  0.0000],
                    [ 0.0000,  0.0000,  0.0000]])
    
    eemmppttyy__lliikkee(...)
        empty_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor
        
        Returns an uninitialized tensor with the same size as :attr:`input`.
        ``torch.empty_like(input)`` is equivalent to
        ``torch.empty(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.
        
        Args:
            input (Tensor): the size of :attr:`input` will determine size of the output tensor.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.
                Default: if ``None``, defaults to the dtype of :attr:`input`.
            layout (:class:`torch.layout`, optional): the desired layout of returned tensor.
                Default: if ``None``, defaults to the layout of :attr:`input`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, defaults to the device of :attr:`input`.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.preserve_format``.
        
        Example::
        
            >>> torch.empty((2,3), dtype=torch.int64)
            tensor([[ 9.4064e+13,  2.8000e+01,  9.3493e+13],
                    [ 7.5751e+18,  7.1428e+18,  7.5955e+18]])
    
    eemmppttyy__mmeettaa(...)
    
    eemmppttyy__qquuaannttiizzeedd(...)
    
    eemmppttyy__ssttrriiddeedd(...)
        empty_strided(size, stride, *, dtype=None, layout=None, device=None, requires_grad=False, pin_memory=False) -> Tensor
        
        Returns a tensor filled with uninitialized data. The shape and strides of the tensor is
        defined by the variable argument :attr:`size` and :attr:`stride` respectively.
        ``torch.empty_strided(size, stride)`` is equivalent to
        ``torch.empty(size).as_strided(size, stride)``.
        
        .. warning::
            More than one element of the created tensor may refer to a single memory
            location. As a result, in-place operations (especially ones that are
            vectorized) may result in incorrect behavior. If you need to write to
            the tensors, please clone them first.
        
        Args:
            size (tuple of ints): the shape of the output tensor
            stride (tuple of ints): the strides of the output tensor
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            pin_memory (bool, optional): If set, returned tensor would be allocated in
                the pinned memory. Works only for CPU tensors. Default: ``False``.
        
        Example::
        
            >>> a = torch.empty_strided((2, 3), (1, 2))
            >>> a
            tensor([[8.9683e-44, 4.4842e-44, 5.1239e+07],
                    [0.0000e+00, 0.0000e+00, 3.0705e-41]])
            >>> a.stride()
            (1, 2)
            >>> a.size()
            torch.Size([2, 3])
    
    eeqq(...)
        eq(input, other, *, out=None) -> Tensor
        
        Computes element-wise equality
        
        The second argument can be a number or a tensor whose shape is
        :ref:`broadcastable <broadcasting-semantics>` with the first argument.
        
        Args:
            input (Tensor): the tensor to compare
            other (Tensor or float): the tensor or value to compare
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is equal to :attr:`other` and False elsewhere
        
        Example::
        
            >>> torch.eq(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            tensor([[ True, False],
                    [False, True]])
    
    eeqquuaall(...)
        equal(input, other) -> bool
        
        ``True`` if two tensors have the same size and elements, ``False`` otherwise.
        
        Example::
        
            >>> torch.equal(torch.tensor([1, 2]), torch.tensor([1, 2]))
            True
    
    eerrff(...)
        erf(input, *, out=None) -> Tensor
        
        Computes the error function of each element. The error function is defined as follows:
        
        .. math::
            \mathrm{erf}(x) = \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.erf(torch.tensor([0, -1., 10.]))
            tensor([ 0.0000, -0.8427,  1.0000])
    
    eerrff__(...)
    
    eerrffcc(...)
        erfc(input, *, out=None) -> Tensor
        
        Computes the complementary error function of each element of :attr:`input`.
        The complementary error function is defined as follows:
        
        .. math::
            \mathrm{erfc}(x) = 1 - \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.erfc(torch.tensor([0, -1., 10.]))
            tensor([ 1.0000, 1.8427,  0.0000])
    
    eerrffcc__(...)
    
    eerrffiinnvv(...)
        erfinv(input, *, out=None) -> Tensor
        
        Computes the inverse error function of each element of :attr:`input`.
        The inverse error function is defined in the range :math:`(-1, 1)` as:
        
        .. math::
            \mathrm{erfinv}(\mathrm{erf}(x)) = x
        
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.erfinv(torch.tensor([0, 0.5, -1.]))
            tensor([ 0.0000,  0.4769,    -inf])
    
    eexxpp(...)
        exp(input, *, out=None) -> Tensor
        
        Returns a new tensor with the exponential of the elements
        of the input tensor :attr:`input`.
        
        .. math::
            y_{i} = e^{x_{i}}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.exp(torch.tensor([0, math.log(2.)]))
            tensor([ 1.,  2.])
    
    eexxpp22(...)
        exp2(input, *, out=None) -> Tensor
        
        Computes the base two exponential function of :attr:`input`.
        
        .. math::
            y_{i} = 2^{x_{i}}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.exp2(torch.tensor([0, math.log2(2.), 3, 4]))
            tensor([ 1.,  2.,  8., 16.])
    
    eexxpp22__(...)
    
    eexxpp__(...)
    
    eexxppmm11(...)
        expm1(input, *, out=None) -> Tensor
        
        Returns a new tensor with the exponential of the elements minus 1
        of :attr:`input`.
        
        .. math::
            y_{i} = e^{x_{i}} - 1
        
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.expm1(torch.tensor([0, math.log(2.)]))
            tensor([ 0.,  1.])
    
    eexxppmm11__(...)
    
    eeyyee(...)
        eye(n, m=None, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.
        
        Args:
            n (int): the number of rows
            m (int, optional): the number of columns with default being :attr:`n`
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Returns:
            Tensor: A 2-D tensor with ones on the diagonal and zeros elsewhere
        
        Example::
        
            >>> torch.eye(3)
            tensor([[ 1.,  0.,  0.],
                    [ 0.,  1.,  0.],
                    [ 0.,  0.,  1.]])
    
    ffaakkee__qquuaannttiizzee__ppeerr__cchhaannnneell__aaffffiinnee(...)
        fake_quantize_per_channel_affine(input, scale, zero_point, quant_min, quant_max) -> Tensor
        
        Returns a new tensor with the data in :attr:`input` fake quantized per channel using :attr:`scale`,
        :attr:`zero_point`, :attr:`quant_min` and :attr:`quant_max`, across the channel specified by :attr:`axis`.
        
        .. math::
            \text{output} = min(
                \text{quant\_max},
                max(
                    \text{quant\_min},
                    \text{std::nearby\_int}(\text{input} / \text{scale}) + \text{zero\_point}
                )
            )
        
        Args:
            input (Tensor): the input value(s), in ``torch.float32``.
            scale (Tensor): quantization scale, per channel
            zero_point (Tensor): quantization zero_point, per channel
            axis (int32): channel axis
            quant_min (int64): lower bound of the quantized domain
            quant_max (int64): upper bound of the quantized domain
        
        Returns:
            Tensor: A newly fake_quantized per channel tensor
        
        Example::
        
            >>> x = torch.randn(2, 2, 2)
            >>> x
            tensor([[[-0.2525, -0.0466],
                     [ 0.3491, -0.2168]],
        
                    [[-0.5906,  1.6258],
                     [ 0.6444, -0.0542]]])
            >>> scales = (torch.randn(2) + 1) * 0.05
            >>> scales
            tensor([0.0475, 0.0486])
            >>> zero_points = torch.zeros(2).to(torch.long)
            >>> zero_points
            tensor([0, 0])
            >>> torch.fake_quantize_per_channel_affine(x, scales, zero_points, 1, 0, 255)
            tensor([[[0.0000, 0.0000],
                     [0.3405, 0.0000]],
        
                    [[0.0000, 1.6134],
                    [0.6323, 0.0000]]])
    
    ffaakkee__qquuaannttiizzee__ppeerr__tteennssoorr__aaffffiinnee(...)
        fake_quantize_per_tensor_affine(input, scale, zero_point, quant_min, quant_max) -> Tensor
        
        Returns a new tensor with the data in :attr:`input` fake quantized using :attr:`scale`,
        :attr:`zero_point`, :attr:`quant_min` and :attr:`quant_max`.
        
        .. math::
            \text{output} = min(
                \text{quant\_max},
                max(
                    \text{quant\_min},
                    \text{std::nearby\_int}(\text{input} / \text{scale}) + \text{zero\_point}
                )
            )
        
        Args:
            input (Tensor): the input value(s), in ``torch.float32``.
            scale (double): quantization scale
            zero_point (int64): quantization zero_point
            quant_min (int64): lower bound of the quantized domain
            quant_max (int64): upper bound of the quantized domain
        
        Returns:
            Tensor: A newly fake_quantized tensor
        
        Example::
        
            >>> x = torch.randn(4)
            >>> x
            tensor([ 0.0552,  0.9730,  0.3973, -1.0780])
            >>> torch.fake_quantize_per_tensor_affine(x, 0.1, 0, 0, 255)
            tensor([0.1000, 1.0000, 0.4000, 0.0000])
    
    ffbbggeemmmm__lliinneeaarr__ffpp1166__wweeiigghhtt(...)
    
    ffbbggeemmmm__lliinneeaarr__ffpp1166__wweeiigghhtt__ffpp3322__aaccttiivvaattiioonn(...)
    
    ffbbggeemmmm__lliinneeaarr__iinntt88__wweeiigghhtt(...)
    
    ffbbggeemmmm__lliinneeaarr__iinntt88__wweeiigghhtt__ffpp3322__aaccttiivvaattiioonn(...)
    
    ffbbggeemmmm__lliinneeaarr__qquuaannttiizzee__wweeiigghhtt(...)
    
    ffbbggeemmmm__ppaacckk__ggeemmmm__mmaattrriixx__ffpp1166(...)
    
    ffbbggeemmmm__ppaacckk__qquuaannttiizzeedd__mmaattrriixx(...)
    
    ffeeaattuurree__aallpphhaa__ddrrooppoouutt(...)
    
    ffeeaattuurree__aallpphhaa__ddrrooppoouutt__(...)
    
    ffeeaattuurree__ddrrooppoouutt(...)
    
    ffeeaattuurree__ddrrooppoouutt__(...)
    
    ffiillll__(...)
    
    ffiixx(...)
        fix(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.trunc`
    
    ffiixx__(...)
    
    ffllaatttteenn(...)
        flatten(input, start_dim=0, end_dim=-1) -> Tensor
        
        Flattens :attr:`input` by reshaping it into a one-dimensional tensor. If :attr:`start_dim` or :attr:`end_dim`
        are passed, only dimensions starting with :attr:`start_dim` and ending with :attr:`end_dim` are flattened.
        The order of elements in :attr:`input` is unchanged.
        
        Unlike NumPy's flatten, which always copies input's data, this function may return the original object, a view,
        or copy. If no dimensions are flattened, then the original object :attr:`input` is returned. Otherwise, if input can
        be viewed as the flattened shape, then that view is returned. Finally, only if the input cannot be viewed as the
        flattened shape is input's data copied. See :meth:`torch.Tensor.view` for details on when a view will be returned.
        
        .. note::
            Flattening a zero-dimensional tensor will return a one-dimensional view.
        
        Args:
            input (Tensor): the input tensor.
            start_dim (int): the first dim to flatten
            end_dim (int): the last dim to flatten
        
        Example::
        
            >>> t = torch.tensor([[[1, 2],
            ...                    [3, 4]],
            ...                   [[5, 6],
            ...                    [7, 8]]])
            >>> torch.flatten(t)
            tensor([1, 2, 3, 4, 5, 6, 7, 8])
            >>> torch.flatten(t, start_dim=1)
            tensor([[1, 2, 3, 4],
                    [5, 6, 7, 8]])
    
    fflliipp(...)
        flip(input, dims) -> Tensor
        
        Reverse the order of a n-D tensor along given axis in dims.
        
        .. note::
            `torch.flip` makes a copy of :attr:`input`'s data. This is different from NumPy's `np.flip`,
            which returns a view in constant time. Since copying a tensor's data is more work than viewing that data,
            `torch.flip` is expected to be slower than `np.flip`.
        
        Args:
            input (Tensor): the input tensor.
            dims (a list or tuple): axis to flip on
        
        Example::
        
            >>> x = torch.arange(8).view(2, 2, 2)
            >>> x
            tensor([[[ 0,  1],
                     [ 2,  3]],
        
                    [[ 4,  5],
                     [ 6,  7]]])
            >>> torch.flip(x, [0, 1])
            tensor([[[ 6,  7],
                     [ 4,  5]],
        
                    [[ 2,  3],
                     [ 0,  1]]])
    
    fflliippllrr(...)
        fliplr(input) -> Tensor
        
        Flip tensor in the left/right direction, returning a new tensor.
        
        Flip the entries in each row in the left/right direction.
        Columns are preserved, but appear in a different order than before.
        
        Note:
            Requires the tensor to be at least 2-D.
        
        .. note::
            `torch.fliplr` makes a copy of :attr:`input`'s data. This is different from NumPy's `np.fliplr`,
            which returns a view in constant time. Since copying a tensor's data is more work than viewing that data,
            `torch.fliplr` is expected to be slower than `np.fliplr`.
        
        Args:
            input (Tensor): Must be at least 2-dimensional.
        
        Example::
        
            >>> x = torch.arange(4).view(2, 2)
            >>> x
            tensor([[0, 1],
                    [2, 3]])
            >>> torch.fliplr(x)
            tensor([[1, 0],
                    [3, 2]])
    
    fflliippuudd(...)
        flipud(input) -> Tensor
        
        Flip tensor in the up/down direction, returning a new tensor.
        
        Flip the entries in each column in the up/down direction.
        Rows are preserved, but appear in a different order than before.
        
        Note:
            Requires the tensor to be at least 1-D.
        
        .. note::
            `torch.flipud` makes a copy of :attr:`input`'s data. This is different from NumPy's `np.flipud`,
            which returns a view in constant time. Since copying a tensor's data is more work than viewing that data,
            `torch.flipud` is expected to be slower than `np.flipud`.
        
        Args:
            input (Tensor): Must be at least 1-dimensional.
        
        Example::
        
            >>> x = torch.arange(4).view(2, 2)
            >>> x
            tensor([[0, 1],
                    [2, 3]])
            >>> torch.flipud(x)
            tensor([[2, 3],
                    [0, 1]])
    
    ffllooaatt__ppoowweerr(...)
        float_power(input, exponent, *, out=None) -> Tensor
        
        Raises :attr:`input` to the power of :attr:`exponent`, elementwise, in double precision.
        If neither input is complex returns a ``torch.float64`` tensor,
        and if one or more inputs is complex returns a ``torch.complex128`` tensor.
        
        .. note::
            This function always computes in double precision, unlike :func:`torch.pow`,
            which implements more typical :ref:`type promotion <type-promotion-doc>`.
            This is useful when the computation needs to be performed in a wider or more precise dtype,
            or the results of the computation may contain fractional values not representable in the input dtypes,
            like when an integer base is raised to a negative integer exponent.
        
        Args:
            input (Tensor or Number): the base value(s)
            exponent (Tensor or Number): the exponent value(s)
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randint(10, (4,))
            >>> a
            tensor([6, 4, 7, 1])
            >>> torch.float_power(a, 2)
            tensor([36., 16., 49.,  1.], dtype=torch.float64)
        
            >>> a = torch.arange(1, 5)
            >>> a
            tensor([ 1,  2,  3,  4])
            >>> exp = torch.tensor([2, -3, 4, -5])
            >>> exp
            tensor([ 2, -3,  4, -5])
            >>> torch.float_power(a, exp)
            tensor([1.0000e+00, 1.2500e-01, 8.1000e+01, 9.7656e-04], dtype=torch.float64)
    
    fflloooorr(...)
        floor(input, *, out=None) -> Tensor
        
        Returns a new tensor with the floor of the elements of :attr:`input`,
        the largest integer less than or equal to each element.
        
        .. math::
            \text{out}_{i} = \left\lfloor \text{input}_{i} \right\rfloor
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.8166,  1.5308, -0.2530, -0.2091])
            >>> torch.floor(a)
            tensor([-1.,  1., -1., -1.])
    
    fflloooorr__(...)
    
    fflloooorr__ddiivviiddee(...)
        floor_divide(input, other, *, out=None) -> Tensor
        
        .. warning::
            This function's name is a misnomer. It actually rounds the
            quotient towards zero instead of taking its floor. This behavior
            will be deprecated in a future PyTorch release.
        
        Computes :attr:`input` divided by :attr:`other`, elementwise, and rounds each
        quotient towards zero. Equivalently, it truncates the quotient(s):
        
        .. math::
            \text{{out}}_i = \text{trunc} \left( \frac{{\text{{input}}_i}}{{\text{{other}}_i}} \right)
        
        
        
        Supports broadcasting to a common shape, type promotion, and integer and float inputs.
        
        Args:
            input (Tensor or Number): the dividend
            other (Tensor or Number): the divisor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([4.0, 3.0])
            >>> b = torch.tensor([2.0, 2.0])
            >>> torch.floor_divide(a, b)
            tensor([2.0, 1.0])
            >>> torch.floor_divide(a, 1.4)
            tensor([2.0, 2.0])
    
    ffmmaaxx(...)
        fmax(input, other, *, out=None) -> Tensor
        
        Computes the element-wise maximum of :attr:`input` and :attr:`other`.
        
        This is like :func:`torch.maximum` except it handles NaNs differently:
        if exactly one of the two elements being compared is a NaN then the non-NaN element is taken as the maximum.
        Only if both elements are NaN is NaN propagated.
        
        This function is a wrapper around C++'s ``std::fmax`` and is similar to NumPy's ``fmax`` function.
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`,
        :ref:`type promotion <type-promotion-doc>`, and integer and floating-point inputs.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([9.7, float('nan'), 3.1, float('nan')])
            >>> b = torch.tensor([-2.2, 0.5, float('nan'), float('nan')])
            >>> torch.fmax(a, b)
            tensor([9.7000, 0.5000, 3.1000,    nan])
    
    ffmmiinn(...)
        fmin(input, other, *, out=None) -> Tensor
        
        Computes the element-wise minimum of :attr:`input` and :attr:`other`.
        
        This is like :func:`torch.minimum` except it handles NaNs differently:
        if exactly one of the two elements being compared is a NaN then the non-NaN element is taken as the minimum.
        Only if both elements are NaN is NaN propagated.
        
        This function is a wrapper around C++'s ``std::fmin`` and is similar to NumPy's ``fmin`` function.
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`,
        :ref:`type promotion <type-promotion-doc>`, and integer and floating-point inputs.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([2.2, float('nan'), 2.1, float('nan')])
            >>> b = torch.tensor([-9.3, 0.1, float('nan'), float('nan')])
            >>> torch.fmin(a, b)
            tensor([-9.3000, 0.1000, 2.1000,    nan])
    
    ffmmoodd(...)
        fmod(input, other, *, out=None) -> Tensor
        
        Computes the element-wise remainder of division.
        
        The dividend and divisor may contain both for integer and floating point
        numbers. The remainder has the same sign as the dividend :attr:`input`.
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`,
        :ref:`type promotion <type-promotion-doc>`, and integer and float inputs.
        
        .. note::
        
            When the divisor is zero, returns ``NaN`` for floating point dtypes
            on both CPU and GPU; raises ``RuntimeError`` for integer division by
            zero on CPU; Integer division by zero on GPU may return any value.
        
        Args:
            input (Tensor): the dividend
            other (Tensor or Scalar): the divisor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.fmod(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)
            tensor([-1., -0., -1.,  1.,  0.,  1.])
            >>> torch.fmod(torch.tensor([1, 2, 3, 4, 5]), 1.5)
            tensor([1.0000, 0.5000, 0.0000, 1.0000, 0.5000])
    
    ffoorrkk(...) method of builtins.PyCapsule instance
        fork(*args, **kwargs) -> torch._C.Future
    
    ffrraacc(...)
        frac(input, *, out=None) -> Tensor
        
        Computes the fractional portion of each element in :attr:`input`.
        
        .. math::
            \text{out}_{i} = \text{input}_{i} - \left\lfloor |\text{input}_{i}| \right\rfloor * \operatorname{sgn}(\text{input}_{i})
        
        Example::
        
            >>> torch.frac(torch.tensor([1, 2.5, -3.2]))
            tensor([ 0.0000,  0.5000, -0.2000])
    
    ffrraacc__(...)
    
    ffrroobbeenniiuuss__nnoorrmm(...)
    
    ffrroomm__ffiillee(...)
    
    ffrroomm__nnuummppyy(...)
        from_numpy(ndarray) -> Tensor
        
        Creates a :class:`Tensor` from a :class:`numpy.ndarray`.
        
        The returned tensor and :attr:`ndarray` share the same memory. Modifications to
        the tensor will be reflected in the :attr:`ndarray` and vice versa. The returned
        tensor is not resizable.
        
        It currently accepts :attr:`ndarray` with dtypes of ``numpy.float64``,
        ``numpy.float32``, ``numpy.float16``, ``numpy.complex64``, ``numpy.complex128``,
        ``numpy.int64``, ``numpy.int32``, ``numpy.int16``, ``numpy.int8``, ``numpy.uint8``,
        and ``numpy.bool``.
        
        Example::
        
            >>> a = numpy.array([1, 2, 3])
            >>> t = torch.from_numpy(a)
            >>> t
            tensor([ 1,  2,  3])
            >>> t[0] = -1
            >>> a
            array([-1,  2,  3])
    
    ffuullll(...)
        full(size, fill_value, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Creates a tensor of size :attr:`size` filled with :attr:`fill_value`. The
        tensor's dtype is inferred from :attr:`fill_value`.
        
        Args:
            size (int...): a list, tuple, or :class:`torch.Size` of integers defining the
                shape of the output tensor.
            fill_value (Scalar): the value to fill the output tensor with.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.full((2, 3), 3.141592)
            tensor([[ 3.1416,  3.1416,  3.1416],
                    [ 3.1416,  3.1416,  3.1416]])
    
    ffuullll__lliikkee(...)
        full_like(input, fill_value, \*, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor
        
        Returns a tensor with the same size as :attr:`input` filled with :attr:`fill_value`.
        ``torch.full_like(input, fill_value)`` is equivalent to
        ``torch.full(input.size(), fill_value, dtype=input.dtype, layout=input.layout, device=input.device)``.
        
        Args:
            input (Tensor): the size of :attr:`input` will determine size of the output tensor.
            fill_value: the number to fill the output tensor with.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.
                Default: if ``None``, defaults to the dtype of :attr:`input`.
            layout (:class:`torch.layout`, optional): the desired layout of returned tensor.
                Default: if ``None``, defaults to the layout of :attr:`input`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, defaults to the device of :attr:`input`.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.preserve_format``.
    
    ggaatthheerr(...)
        gather(input, dim, index, *, sparse_grad=False, out=None) -> Tensor
        
        Gathers values along an axis specified by `dim`.
        
        For a 3-D tensor the output is specified by::
        
            out[i][j][k] = input[index[i][j][k]][j][k]  # if dim == 0
            out[i][j][k] = input[i][index[i][j][k]][k]  # if dim == 1
            out[i][j][k] = input[i][j][index[i][j][k]]  # if dim == 2
        
        :attr:`input` and :attr:`index` must have the same number of dimensions.
        It is also required that ``index.size(d) <= input.size(d)`` for all
        dimensions ``d != dim``.  :attr:`out` will have the same shape as :attr:`index`.
        Note that ``input`` and ``index`` do not broadcast against each other.
        
        Args:
            input (Tensor): the source tensor
            dim (int): the axis along which to index
            index (LongTensor): the indices of elements to gather
        
        Keyword arguments:
            sparse_grad (bool, optional): If ``True``, gradient w.r.t. :attr:`input` will be a sparse tensor.
            out (Tensor, optional): the destination tensor
        
        Example::
        
            >>> t = torch.tensor([[1, 2], [3, 4]])
            >>> torch.gather(t, 1, torch.tensor([[0, 0], [1, 0]]))
            tensor([[ 1,  1],
                    [ 4,  3]])
    
    ggccdd(...)
        gcd(input, other, *, out=None) -> Tensor
        
        Computes the element-wise greatest common divisor (GCD) of :attr:`input` and :attr:`other`.
        
        Both :attr:`input` and :attr:`other` must have integer types.
        
        .. note::
            This defines :math:`gcd(0, 0) = 0`.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([5, 10, 15])
            >>> b = torch.tensor([3, 4, 5])
            >>> torch.gcd(a, b)
            tensor([1, 2, 5])
            >>> c = torch.tensor([3])
            >>> torch.gcd(a, c)
            tensor([1, 1, 3])
    
    ggccdd__(...)
    
    ggee(...)
        ge(input, other, *, out=None) -> Tensor
        
        Computes :math:`\text{input} \geq \text{other}` element-wise.
        
        
        The second argument can be a number or a tensor whose shape is
        :ref:`broadcastable <broadcasting-semantics>` with the first argument.
        
        Args:
            input (Tensor): the tensor to compare
            other (Tensor or float): the tensor or value to compare
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is greater than or equal to :attr:`other` and False elsewhere
        
        Example::
        
            >>> torch.ge(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            tensor([[True, True], [False, True]])
    
    ggeeqqrrff(...)
        geqrf(input, *, out=None) -> (Tensor, Tensor)
        
        This is a low-level function for calling LAPACK directly. This function
        returns a namedtuple (a, tau) as defined in `LAPACK documentation for geqrf`_ .
        
        You'll generally want to use :func:`torch.qr` instead.
        
        Computes a QR decomposition of :attr:`input`, but without constructing
        :math:`Q` and :math:`R` as explicit separate matrices.
        
        Rather, this directly calls the underlying LAPACK function `?geqrf`
        which produces a sequence of 'elementary reflectors'.
        
        See `LAPACK documentation for geqrf`_ for further details.
        
        Args:
            input (Tensor): the input matrix
        
        Keyword args:
            out (tuple, optional): the output tuple of (Tensor, Tensor)
        
        .. _LAPACK documentation for geqrf:
            https://software.intel.com/en-us/node/521004
    
    ggeerr(...)
        ger(input, vec2, *, out=None) -> Tensor
        
        Alias of :func:`torch.outer`.
        
        .. warning::
            This function is deprecated and will be removed in a future PyTorch release.
            Use :func:`torch.outer` instead.
    
    ggeett__ddeeffaauulltt__ddttyyppee(...)
        get_default_dtype() -> torch.dtype
        
        Get the current default floating point :class:`torch.dtype`.
        
        Example::
        
            >>> torch.get_default_dtype()  # initial default for floating point is torch.float32
            torch.float32
            >>> torch.set_default_dtype(torch.float64)
            >>> torch.get_default_dtype()  # default is now changed to torch.float64
            torch.float64
            >>> torch.set_default_tensor_type(torch.FloatTensor)  # setting tensor type also affects this
            >>> torch.get_default_dtype()  # changed to torch.float32, the dtype for torch.FloatTensor
            torch.float32
    
    ggeett__ddeevviiccee(...)
    
    ggeett__nnuumm__iinntteerroopp__tthhrreeaaddss(...)
        get_num_interop_threads() -> int
        
        Returns the number of threads used for inter-op parallelism on CPU
        (e.g. in JIT interpreter)
    
    ggeett__nnuumm__tthhrreeaaddss(...)
        get_num_threads() -> int
        
        Returns the number of threads used for parallelizing CPU operations
    
    ggeett__rrnngg__ssttaattee() -> torch.Tensor
        Returns the random number generator state as a `torch.ByteTensor`.
    
    ggrreeaatteerr(...)
        greater(input, other, *, out=None) -> Tensor
        
        Alias for :func:`torch.gt`.
    
    ggrreeaatteerr__eeqquuaall(...)
        greater_equal(input, other, *, out=None) -> Tensor
        
        Alias for :func:`torch.ge`.
    
    ggrriidd__ssaammpplleerr(...)
    
    ggrriidd__ssaammpplleerr__22dd(...)
    
    ggrriidd__ssaammpplleerr__33dd(...)
    
    ggrroouupp__nnoorrmm(...)
    
    ggrruu(...)
    
    ggrruu__cceellll(...)
    
    ggtt(...)
        gt(input, other, *, out=None) -> Tensor
        
        Computes :math:`\text{input} > \text{other}` element-wise.
        
        
        The second argument can be a number or a tensor whose shape is
        :ref:`broadcastable <broadcasting-semantics>` with the first argument.
        
        Args:
            input (Tensor): the tensor to compare
            other (Tensor or float): the tensor or value to compare
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is greater than :attr:`other` and False elsewhere
        
        Example::
        
            >>> torch.gt(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            tensor([[False, True], [False, False]])
    
    hhaammmmiinngg__wwiinnddooww(...)
        hamming_window(window_length, periodic=True, alpha=0.54, beta=0.46, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Hamming window function.
        
        .. math::
            w[n] = \alpha - \beta\ \cos \left( \frac{2 \pi n}{N - 1} \right),
        
        where :math:`N` is the full window size.
        
        The input :attr:`window_length` is a positive integer controlling the
        returned window size. :attr:`periodic` flag determines whether the returned
        window trims off the last duplicate value from the symmetric window and is
        ready to be used as a periodic window with functions like
        :meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in
        above formula is in fact :math:`\text{window\_length} + 1`. Also, we always have
        ``torch.hamming_window(L, periodic=True)`` equal to
        ``torch.hamming_window(L + 1, periodic=False)[:-1])``.
        
        .. note::
            If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.
        
        .. note::
            This is a generalized version of :meth:`torch.hann_window`.
        
        Arguments:
            window_length (int): the size of returned window
            periodic (bool, optional): If True, returns a window to be used as periodic
                function. If False, return a symmetric window.
            alpha (float, optional): The coefficient :math:`\alpha` in the equation above
            beta (float, optional): The coefficient :math:`\beta` in the equation above
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`). Only floating point types are supported.
            layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only
                  ``torch.strided`` (dense layout) is supported.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Returns:
            Tensor: A 1-D tensor of size :math:`(\text{window\_length},)` containing the window
    
    hhaannnn__wwiinnddooww(...)
        hann_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Hann window function.
        
        .. math::
            w[n] = \frac{1}{2}\ \left[1 - \cos \left( \frac{2 \pi n}{N - 1} \right)\right] =
                    \sin^2 \left( \frac{\pi n}{N - 1} \right),
        
        where :math:`N` is the full window size.
        
        The input :attr:`window_length` is a positive integer controlling the
        returned window size. :attr:`periodic` flag determines whether the returned
        window trims off the last duplicate value from the symmetric window and is
        ready to be used as a periodic window with functions like
        :meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in
        above formula is in fact :math:`\text{window\_length} + 1`. Also, we always have
        ``torch.hann_window(L, periodic=True)`` equal to
        ``torch.hann_window(L + 1, periodic=False)[:-1])``.
        
        .. note::
            If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.
        
        Arguments:
            window_length (int): the size of returned window
            periodic (bool, optional): If True, returns a window to be used as periodic
                function. If False, return a symmetric window.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`). Only floating point types are supported.
            layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only
                  ``torch.strided`` (dense layout) is supported.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Returns:
            Tensor: A 1-D tensor of size :math:`(\text{window\_length},)` containing the window
    
    hhaarrddsshhrriinnkk(...)
    
    hheeaavviissiiddee(...)
        heaviside(input, values, *, out=None) -> Tensor
        
        Computes the Heaviside step function for each element in :attr:`input`.
        The Heaviside step function is defined as:
        
        .. math::
            \text{{heaviside}}(input, values) = \begin{cases}
                0, & \text{if input < 0}\\
                values, & \text{if input == 0}\\
                1, & \text{if input > 0}
            \end{cases}
        
        
        Args:
            input (Tensor): the input tensor.
            values (Tensor): The values to use where :attr:`input` is zero.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> input = torch.tensor([-1.5, 0, 2.0])
            >>> values = torch.tensor([0.5])
            >>> torch.heaviside(input, values)
            tensor([0.0000, 0.5000, 1.0000])
            >>> values = torch.tensor([1.2, -2.0, 3.5])
            >>> torch.heaviside(input, values)
            tensor([0., -2., 1.])
    
    hhiinnggee__eemmbbeeddddiinngg__lloossss(...)
    
    hhiissttcc(...)
        histc(input, bins=100, min=0, max=0, *, out=None) -> Tensor
        
        Computes the histogram of a tensor.
        
        The elements are sorted into equal width bins between :attr:`min` and
        :attr:`max`. If :attr:`min` and :attr:`max` are both zero, the minimum and
        maximum values of the data are used.
        
        Elements lower than min and higher than max are ignored.
        
        Args:
            input (Tensor): the input tensor.
            bins (int): number of histogram bins
            min (int): lower end of the range (inclusive)
            max (int): upper end of the range (inclusive)
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Returns:
            Tensor: Histogram represented as a tensor
        
        Example::
        
            >>> torch.histc(torch.tensor([1., 2, 1]), bins=4, min=0, max=3)
            tensor([ 0.,  2.,  1.,  0.])
    
    hhssmmmm(...)
    
    hhssppmmmm(...)
        hspmm(mat1, mat2, *, out=None) -> Tensor
        
        Performs a matrix multiplication of a :ref:`sparse COO matrix
        <sparse-coo-docs>` :attr:`mat1` and a strided matrix :attr:`mat2`. The
        result is a (1 + 1)-dimensional :ref:`hybrid COO matrix
        <sparse-hybrid-coo-docs>`.
        
        Args:
            mat1 (Tensor): the first sparse matrix to be matrix multiplied
            mat2 (Tensor): the second strided matrix to be matrix multiplied
        
        Keyword args:
            {out}
    
    hhssttaacckk(...)
        hstack(tensors, *, out=None) -> Tensor
        
        Stack tensors in sequence horizontally (column wise).
        
        This is equivalent to concatenation along the first axis for 1-D tensors, and along the second axis for all other tensors.
        
        Args:
            tensors (sequence of Tensors): sequence of tensors to concatenate
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([1, 2, 3])
            >>> b = torch.tensor([4, 5, 6])
            >>> torch.hstack((a,b))
            tensor([1, 2, 3, 4, 5, 6])
            >>> a = torch.tensor([[1],[2],[3]])
            >>> b = torch.tensor([[4],[5],[6]])
            >>> torch.hstack((a,b))
            tensor([[1, 4],
                    [2, 5],
                    [3, 6]])
    
    hhyyppoott(...)
        hypot(input, other, *, out=None) -> Tensor
        
        Given the legs of a right triangle, return its hypotenuse.
        
        .. math::
            \text{out}_{i} = \sqrt{\text{input}_{i}^{2} + \text{other}_{i}^{2}}
        
        The shapes of ``input`` and ``other`` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        Args:
            input (Tensor): the first input tensor
            other (Tensor): the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.hypot(torch.tensor([4.0]), torch.tensor([3.0, 4.0, 5.0]))
            tensor([5.0000, 5.6569, 6.4031])
    
    ii00(...)
        i0(input, *, out=None) -> Tensor
        
        Computes the zeroth order modified Bessel function of the first kind for each element of :attr:`input`.
        
        .. math::
            \text{out}_{i} = I_0(\text{input}_{i}) = \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!)^2}
        
        
        Args:
            input (Tensor): the input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.i0(torch.arange(5, dtype=torch.float32))
            tensor([ 1.0000,  1.2661,  2.2796,  4.8808, 11.3019])
    
    ii00__(...)
    
    iiggaammmmaa(...)
        igamma(input, other, *, out=None) -> Tensor
        
        Computes the regularized lower incomplete gamma function:
        
        .. math::
            \text{out}_{i} = \frac{1}{\Gamma(\text{input}_i)} \int_0^{\text{other}_i} t^{\text{input}_i-1} e^{-t} dt
        
        where both :math:`\text{input}_i` and :math:`\text{other}_i` are weakly positive
        and at least one is strictly positive.
        If both are zero or either is negative then :math:`\text{out}_i=\text{nan}`.
        :math:`\Gamma(\cdot)` in the equation above is the gamma function,
        
        .. math::
            \Gamma(\text{input}_i) = \int_0^\infty t^{(\text{input}_i-1)} e^{-t} dt.
        
        See :func:`torch.igammac` and :func:`torch.lgamma` for related functions.
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`
        and float inputs.
        
        .. note::
            The backward pass with respect to :attr:`input` is not yet supported.
            Please open an issue on PyTorch's Github to request it.
        
        
        Args:
            input (Tensor): the first non-negative input tensor
            other (Tensor): the second non-negative input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a1 = torch.tensor([4.0])
            >>> a2 = torch.tensor([3.0, 4.0, 5.0])
            >>> a = torch.igammac(a1, a2)
            tensor([0.3528, 0.5665, 0.7350])
            tensor([0.3528, 0.5665, 0.7350])
            >>> b = torch.igamma(a1, a2) + torch.igammac(a1, a2)
            tensor([1., 1., 1.])
    
    iiggaammmmaacc(...)
        igammac(input, other, *, out=None) -> Tensor
        
        Computes the regularized upper incomplete gamma function:
        
        .. math::
            \text{out}_{i} = \frac{1}{\Gamma(\text{input}_i)} \int_{\text{other}_i}^{\infty} t^{\text{input}_i-1} e^{-t} dt
        
        where both :math:`\text{input}_i` and :math:`\text{other}_i` are weakly positive
        and at least one is strictly positive.
        If both are zero or either is negative then :math:`\text{out}_i=\text{nan}`.
        :math:`\Gamma(\cdot)` in the equation above is the gamma function,
        
        .. math::
            \Gamma(\text{input}_i) = \int_0^\infty t^{(\text{input}_i-1)} e^{-t} dt.
        
        See :func:`torch.igamma` and :func:`torch.lgamma` for related functions.
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`
        and float inputs.
        
        .. note::
            The backward pass with respect to :attr:`input` is not yet supported.
            Please open an issue on PyTorch's Github to request it.
        
        
        Args:
            input (Tensor): the first non-negative input tensor
            other (Tensor): the second non-negative input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a1 = torch.tensor([4.0])
            >>> a2 = torch.tensor([3.0, 4.0, 5.0])
            >>> a = torch.igammac(a1, a2)
            tensor([0.6472, 0.4335, 0.2650])
            >>> b = torch.igamma(a1, a2) + torch.igammac(a1, a2)
            tensor([1., 1., 1.])
    
    iimmaagg(...)
        imag(input) -> Tensor
        
        Returns a new tensor containing imaginary values of the :attr:`self` tensor.
        The returned tensor and :attr:`self` share the same underlying storage.
        
        .. warning::
            :func:`imag` is only supported for tensors with complex dtypes.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
            >>> x=torch.randn(4, dtype=torch.cfloat)
            >>> x
            tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
            >>> x.imag
            tensor([ 0.3553, -0.7896, -0.0633, -0.8119])
    
    iimmppoorrtt__iirr__mmoodduullee(...) method of builtins.PyCapsule instance
        import_ir_module(arg0: torch._C.CompilationUnit, arg1: str, arg2: object, arg3: dict) -> torch._C.ScriptModule
    
    iimmppoorrtt__iirr__mmoodduullee__ffrroomm__bbuuffffeerr(...) method of builtins.PyCapsule instance
        import_ir_module_from_buffer(arg0: torch._C.CompilationUnit, arg1: str, arg2: object, arg3: dict) -> torch._C.ScriptModule
    
    iinnddeexx__aadddd(...)
    
    iinnddeexx__ccooppyy(...)
    
    iinnddeexx__ffiillll(...)
    
    iinnddeexx__ppuutt(...)
    
    iinnddeexx__ppuutt__(...)
    
    iinnddeexx__sseelleecctt(...)
        index_select(input, dim, index, *, out=None) -> Tensor
        
        Returns a new tensor which indexes the :attr:`input` tensor along dimension
        :attr:`dim` using the entries in :attr:`index` which is a `LongTensor`.
        
        The returned tensor has the same number of dimensions as the original tensor
        (:attr:`input`).  The :attr:`dim`\ th dimension has the same size as the length
        of :attr:`index`; other dimensions have the same size as in the original tensor.
        
        .. note:: The returned tensor does **not** use the same storage as the original
                  tensor.  If :attr:`out` has a different shape than expected, we
                  silently change it to the correct shape, reallocating the underlying
                  storage if necessary.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension in which we index
            index (IntTensor or LongTensor): the 1-D tensor containing the indices to index
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x = torch.randn(3, 4)
            >>> x
            tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],
                    [-0.4664,  0.2647, -0.1228, -1.1068],
                    [-1.1734, -0.6571,  0.7230, -0.6004]])
            >>> indices = torch.tensor([0, 2])
            >>> torch.index_select(x, 0, indices)
            tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],
                    [-1.1734, -0.6571,  0.7230, -0.6004]])
            >>> torch.index_select(x, 1, indices)
            tensor([[ 0.1427, -0.5414],
                    [-0.4664, -0.1228],
                    [-1.1734,  0.7230]])
    
    iinniitt__nnuumm__tthhrreeaaddss(...) method of builtins.PyCapsule instance
        init_num_threads() -> None
        
        
        init_num_threads()
        
        Initializes the number of parallel threads used on the current thread.
        
        Call this whenever a new thread is created in order to propagate values from
        :func:`torch.set_num_threads` onto the new thread.
    
    iinniittiiaall__sseeeedd() -> int
        Returns the initial seed for generating random numbers as a
        Python `long`.
    
    iinnnneerr(...)
        inner(input, other, *, out=None) -> Tensor
        
        Computes the dot product for 1D tensors. For higher dimensions, sums the product
        of elements from :attr:`input` and :attr:`other` along their last dimension.
        
        .. note::
        
            If either :attr:`input` or :attr:`other` is a scalar, the result is equivalent
            to `torch.mul(input, other)`.
        
            If both :attr:`input` and :attr:`other` are non-scalars, the size of their last
            dimension must match and the result is equivalent to `torch.tensordot(input,
            other, dims=([-1], [-1]))`
        
        Args:
            input (Tensor): First input tensor
            other (Tensor): Second input tensor
        
        Keyword args:
            out (Tensor, optional): Optional output tensor to write result into. The output
                                    shape is `input.shape[:-1] + other.shape[:-1]`.
        
        Example::
        
            # Dot product
            >>> torch.inner(torch.tensor([1, 2, 3]), torch.tensor([0, 2, 1]))
            tensor(7)
        
            # Multidimensional input tensors
            >>> a = torch.randn(2, 3)
            >>> a
            tensor([[0.8173, 1.0874, 1.1784],
                    [0.3279, 0.1234, 2.7894]])
            >>> b = torch.randn(2, 4, 3)
            >>> b
            tensor([[[-0.4682, -0.7159,  0.1506],
                    [ 0.4034, -0.3657,  1.0387],
                    [ 0.9892, -0.6684,  0.1774],
                    [ 0.9482,  1.3261,  0.3917]],
        
                    [[ 0.4537,  0.7493,  1.1724],
                    [ 0.2291,  0.5749, -0.2267],
                    [-0.7920,  0.3607, -0.3701],
                    [ 1.3666, -0.5850, -1.7242]]])
            >>> torch.inner(a, b)
            tensor([[[-0.9837,  1.1560,  0.2907,  2.6785],
                    [ 2.5671,  0.5452, -0.6912, -1.5509]],
        
                    [[ 0.1782,  2.9843,  0.7366,  1.5672],
                    [ 3.5115, -0.4864, -1.2476, -4.4337]]])
        
            # Scalar input
            >>> torch.inner(a, torch.tensor(2))
            tensor([[1.6347, 2.1748, 2.3567],
                    [0.6558, 0.2469, 5.5787]])
    
    iinnssttaannccee__nnoorrmm(...)
    
    iinntt__rreepprr(...)
    
    iinnvveerrssee(...)
        inverse(input, *, out=None) -> Tensor
        
        Takes the inverse of the square matrix :attr:`input`. :attr:`input` can be batches
        of 2D square tensors, in which case this function would return a tensor composed of
        individual inverses.
        
        Supports real and complex input.
        
        .. note:: :func:`torch.inverse` is deprecated. Please use :func:`torch.linalg.inv` instead.
        
        .. note::
        
            Irrespective of the original strides, the returned tensors will be
            transposed, i.e. with strides like `input.contiguous().transpose(-2, -1).stride()`
        
        Args:
            input (Tensor): the input tensor of size :math:`(*, n, n)` where `*` is zero or more
                            batch dimensions
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Examples::
        
            >>> x = torch.rand(4, 4)
            >>> y = torch.inverse(x)
            >>> z = torch.mm(x, y)
            >>> z
            tensor([[ 1.0000, -0.0000, -0.0000,  0.0000],
                    [ 0.0000,  1.0000,  0.0000,  0.0000],
                    [ 0.0000,  0.0000,  1.0000,  0.0000],
                    [ 0.0000, -0.0000, -0.0000,  1.0000]])
            >>> torch.max(torch.abs(z - torch.eye(4))) # Max non-zero
            tensor(1.1921e-07)
        
            >>> # Batched inverse example
            >>> x = torch.randn(2, 3, 4, 4)
            >>> y = torch.inverse(x)
            >>> z = torch.matmul(x, y)
            >>> torch.max(torch.abs(z - torch.eye(4).expand_as(x))) # Max non-zero
            tensor(1.9073e-06)
        
            >>> x = torch.rand(4, 4, dtype=torch.cdouble)
            >>> y = torch.inverse(x)
            >>> z = torch.mm(x, y)
            >>> z
            tensor([[ 1.0000e+00+0.0000e+00j, -1.3878e-16+3.4694e-16j,
                    5.5511e-17-1.1102e-16j,  0.0000e+00-1.6653e-16j],
                    [ 5.5511e-16-1.6653e-16j,  1.0000e+00+6.9389e-17j,
                    2.2204e-16-1.1102e-16j, -2.2204e-16+1.1102e-16j],
                    [ 3.8858e-16-1.2490e-16j,  2.7756e-17+3.4694e-17j,
                    1.0000e+00+0.0000e+00j, -4.4409e-16+5.5511e-17j],
                    [ 4.4409e-16+5.5511e-16j, -3.8858e-16+1.8041e-16j,
                    2.2204e-16+0.0000e+00j,  1.0000e+00-3.4694e-16j]],
                dtype=torch.complex128)
            >>> torch.max(torch.abs(z - torch.eye(4, dtype=torch.cdouble))) # Max non-zero
            tensor(7.5107e-16, dtype=torch.float64)
    
    iiss__aannoommaallyy__eennaabblleedd(...)
    
    iiss__aauuttooccaasstt__eennaabblleedd(...)
    
    iiss__ccoommpplleexx(...)
        is_complex(input) -> (bool)
        
        Returns True if the data type of :attr:`input` is a complex data type i.e.,
        one of ``torch.complex64``, and ``torch.complex128``.
        
        Args:
            input (Tensor): the input tensor.
    
    iiss__ddeetteerrmmiinniissttiicc()
        This function is deprecated and will be removed in a future release.
        Please use :func:`torch.are_deterministic_algorithms_enabled` instead.
    
    iiss__ddiissttrriibbuutteedd(...)
    
    iiss__ffllooaattiinngg__ppooiinntt(...)
        is_floating_point(input) -> (bool)
        
        Returns True if the data type of :attr:`input` is a floating point data type i.e.,
        one of ``torch.float64``, ``torch.float32``, ``torch.float16``, and ``torch.bfloat16``.
        
        Args:
            input (Tensor): the input tensor.
    
    iiss__ggrraadd__eennaabblleedd(...)
    
    iiss__nnoonnzzeerroo(...)
        is_nonzero(input) -> (bool)
        
        Returns True if the :attr:`input` is a single element tensor which is not equal to zero
        after type conversions.
        i.e. not equal to ``torch.tensor([0.])`` or ``torch.tensor([0])`` or
        ``torch.tensor([False])``.
        Throws a ``RuntimeError`` if ``torch.numel() != 1`` (even in case
        of sparse tensors).
        
        Args:
            input (Tensor): the input tensor.
        
        Examples::
        
            >>> torch.is_nonzero(torch.tensor([0.]))
            False
            >>> torch.is_nonzero(torch.tensor([1.5]))
            True
            >>> torch.is_nonzero(torch.tensor([False]))
            False
            >>> torch.is_nonzero(torch.tensor([3]))
            True
            >>> torch.is_nonzero(torch.tensor([1, 3, 5]))
            Traceback (most recent call last):
            ...
            RuntimeError: bool value of Tensor with more than one value is ambiguous
            >>> torch.is_nonzero(torch.tensor([]))
            Traceback (most recent call last):
            ...
            RuntimeError: bool value of Tensor with no values is ambiguous
    
    iiss__ssaammee__ssiizzee(...)
    
    iiss__ssiiggnneedd(...)
    
    iiss__ssttoorraaggee(obj)
        Returns True if `obj` is a PyTorch storage object.
        
        Args:
            obj (Object): Object to test
    
    iiss__tteennssoorr(obj)
        Returns True if `obj` is a PyTorch tensor.
        
        Note that this function is simply doing ``isinstance(obj, Tensor)``.
        Using that ``isinstance`` check is better for typechecking with mypy,
        and more explicit - so it's recommended to use that instead of
        ``is_tensor``.
        
        Args:
            obj (Object): Object to test
    
    iiss__vvuullkkaann__aavvaaiillaabbllee(...)
    
    iisscclloossee(...)
        isclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor
        
        Returns a new tensor with boolean elements representing if each element of
        :attr:`input` is "close" to the corresponding element of :attr:`other`.
        Closeness is defined as:
        
        .. math::
            \lvert \text{input} - \text{other} \rvert \leq \texttt{atol} + \texttt{rtol} \times \lvert \text{other} \rvert
        
        
        where :attr:`input` and :attr:`other` are finite. Where :attr:`input`
        and/or :attr:`other` are nonfinite they are close if and only if
        they are equal, with NaNs being considered equal to each other when
        :attr:`equal_nan` is True.
        
        Args:
            input (Tensor): first tensor to compare
            other (Tensor): second tensor to compare
            atol (float, optional): absolute tolerance. Default: 1e-08
            rtol (float, optional): relative tolerance. Default: 1e-05
            equal_nan (bool, optional): if ``True``, then two ``NaN`` s will be considered equal. Default: ``False``
        
        Examples::
        
            >>> torch.isclose(torch.tensor((1., 2, 3)), torch.tensor((1 + 1e-10, 3, 4)))
            tensor([ True, False, False])
            >>> torch.isclose(torch.tensor((float('inf'), 4)), torch.tensor((float('inf'), 6)), rtol=.5)
            tensor([True, True])
    
    iissffiinniittee(...)
        isfinite(input) -> Tensor
        
        Returns a new tensor with boolean elements representing if each element is `finite` or not.
        
        Real values are finite when they are not NaN, negative infinity, or infinity.
        Complex values are finite when both their real and imaginary parts are finite.
        
            Args:
                input (Tensor): the input tensor.
        
            Returns:
                A boolean tensor that is True where :attr:`input` is finite and False elsewhere
        
            Example::
        
                >>> torch.isfinite(torch.tensor([1, float('inf'), 2, float('-inf'), float('nan')]))
                tensor([True,  False,  True,  False,  False])
    
    iissiinnff(...)
        isinf(input) -> Tensor
        
        Tests if each element of :attr:`input` is infinite
        (positive or negative infinity) or not.
        
        .. note::
            Complex values are infinite when their real or imaginary part is
            infinite.
        
            Args:
                {input}
        
            Returns:
                A boolean tensor that is True where :attr:`input` is infinite and False elsewhere
        
            Example::
        
                >>> torch.isinf(torch.tensor([1, float('inf'), 2, float('-inf'), float('nan')]))
                tensor([False,  True,  False,  True,  False])
    
    iissnnaann(...)
        isnan(input) -> Tensor
        
        Returns a new tensor with boolean elements representing if each element of :attr:`input`
        is NaN or not. Complex values are considered NaN when either their real
        and/or imaginary part is NaN.
        
        Arguments:
            input (Tensor): the input tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is NaN and False elsewhere
        
        Example::
        
            >>> torch.isnan(torch.tensor([1, float('nan'), 2]))
            tensor([False, True, False])
    
    iissnneeggiinnff(...)
        isneginf(input, *, out=None) -> Tensor
        Tests if each element of :attr:`input` is negative infinity or not.
        
        Args:
          input (Tensor): the input tensor.
        
        Keyword args:
          out (Tensor, optional): the output tensor.
        
        Example::
            >>> a = torch.tensor([-float('inf'), float('inf'), 1.2])
            >>> torch.isneginf(a)
            tensor([ True, False, False])
    
    iissppoossiinnff(...)
        isposinf(input, *, out=None) -> Tensor
        Tests if each element of :attr:`input` is positive infinity or not.
        
        Args:
          input (Tensor): the input tensor.
        
        Keyword args:
          out (Tensor, optional): the output tensor.
        
        Example::
            >>> a = torch.tensor([-float('inf'), float('inf'), 1.2])
            >>> torch.isposinf(a)
            tensor([False,  True, False])
    
    iissrreeaall(...)
        isreal(input) -> Tensor
        
        Returns a new tensor with boolean elements representing if each element of :attr:`input` is real-valued or not.
        All real-valued types are considered real. Complex values are considered real when their imaginary part is 0.
        
        Arguments:
            input (Tensor): the input tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is real and False elsewhere
        
        Example::
        
            >>> torch.isreal(torch.tensor([1, 1+1j, 2+0j]))
            tensor([True, False, True])
    
    iissttfftt(input: torch.Tensor, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: Union[torch.Tensor, NoneType] = None, center: bool = True, normalized: bool = False, onesided: Union[bool, NoneType] = None, length: Union[int, NoneType] = None, return_complex: bool = False) -> torch.Tensor
        Inverse short time Fourier Transform. This is expected to be the inverse of :func:`~torch.stft`.
        It has the same parameters (+ additional optional parameter of :attr:`length`) and it should return the
        least squares estimation of the original signal. The algorithm will check using the NOLA condition (
        nonzero overlap).
        
        Important consideration in the parameters :attr:`window` and :attr:`center` so that the envelop
        created by the summation of all the windows is never zero at certain point in time. Specifically,
        :math:`\sum_{t=-\infty}^{\infty} |w|^2[n-t\times hop\_length] \cancel{=} 0`.
        
        Since :func:`~torch.stft` discards elements at the end of the signal if they do not fit in a frame,
        ``istft`` may return a shorter signal than the original signal (can occur if :attr:`center` is False
        since the signal isn't padded).
        
        If :attr:`center` is ``True``, then there will be padding e.g. ``'constant'``, ``'reflect'``, etc.
        Left padding can be trimmed off exactly because they can be calculated but right padding cannot be
        calculated without additional information.
        
        Example: Suppose the last window is:
        ``[17, 18, 0, 0, 0]`` vs ``[18, 0, 0, 0, 0]``
        
        The :attr:`n_fft`, :attr:`hop_length`, :attr:`win_length` are all the same which prevents the calculation
        of right padding. These additional values could be zeros or a reflection of the signal so providing
        :attr:`length` could be useful. If :attr:`length` is ``None`` then padding will be aggressively removed
        (some loss of signal).
        
        [1] D. W. Griffin and J. S. Lim, "Signal estimation from modified short-time Fourier transform,"
        IEEE Trans. ASSP, vol.32, no.2, pp.236-243, Apr. 1984.
        
        Args:
            input (Tensor): The input tensor. Expected to be output of :func:`~torch.stft`,
                can either be complex (``channel``, ``fft_size``, ``n_frame``), or real
                (``channel``, ``fft_size``, ``n_frame``, 2) where the ``channel``
                dimension is optional.
        
                .. deprecated:: 1.8.0
                   Real input is deprecated, use complex inputs as returned by
                   ``stft(..., return_complex=True)`` instead.
            n_fft (int): Size of Fourier transform
            hop_length (Optional[int]): The distance between neighboring sliding window frames.
                (Default: ``n_fft // 4``)
            win_length (Optional[int]): The size of window frame and STFT filter. (Default: ``n_fft``)
            window (Optional[torch.Tensor]): The optional window function.
                (Default: ``torch.ones(win_length)``)
            center (bool): Whether :attr:`input` was padded on both sides so that the :math:`t`-th frame is
                centered at time :math:`t \times \text{hop\_length}`.
                (Default: ``True``)
            normalized (bool): Whether the STFT was normalized. (Default: ``False``)
            onesided (Optional[bool]): Whether the STFT was onesided.
                (Default: ``True`` if ``n_fft != fft_size`` in the input size)
            length (Optional[int]): The amount to trim the signal by (i.e. the
                original signal length). (Default: whole signal)
            return_complex (Optional[bool]):
                Whether the output should be complex, or if the input should be
                assumed to derive from a real signal and window.
                Note that this is incompatible with ``onesided=True``.
                (Default: ``False``)
        
        Returns:
            Tensor: Least squares estimation of the original signal of size (..., signal_length)
    
    kkaaiisseerr__wwiinnddooww(...)
        kaiser_window(window_length, periodic=True, beta=12.0, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Computes the Kaiser window with window length :attr:`window_length` and shape parameter :attr:`beta`.
        
        Let I_0 be the zeroth order modified Bessel function of the first kind (see :func:`torch.i0`) and
        ``N = L - 1`` if :attr:`periodic` is False and ``L`` if :attr:`periodic` is True,
        where ``L`` is the :attr:`window_length`. This function computes:
        
        .. math::
            out_i = I_0 \left( \beta \sqrt{1 - \left( {\frac{i - N/2}{N/2}} \right) ^2 } \right) / I_0( \beta )
        
        Calling ``torch.kaiser_window(L, B, periodic=True)`` is equivalent to calling
        ``torch.kaiser_window(L + 1, B, periodic=False)[:-1])``.
        The :attr:`periodic` argument is intended as a helpful shorthand
        to produce a periodic window as input to functions like :func:`torch.stft`.
        
        .. note::
            If :attr:`window_length` is one, then the returned window is a single element tensor containing a one.
        
        
        Args:
            window_length (int): length of the window.
            periodic (bool, optional): If True, returns a periodic window suitable for use in spectral analysis.
                If False, returns a symmetric window suitable for use in filter design.
            beta (float, optional): shape parameter for the window.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only
                  ``torch.strided`` (dense layout) is supported.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
    
    kkll__ddiivv(...)
    
    kkrroonn(...)
        kron(input, other, *, out=None) -> Tensor
        
        Computes the Kronecker product, denoted by :math:`\otimes`, of :attr:`input` and :attr:`other`.
        
        If :attr:`input` is a :math:`(a_0 \times a_1 \times \dots \times a_n)` tensor and :attr:`other` is a
        :math:`(b_0 \times b_1 \times \dots \times b_n)` tensor, the result will be a
        :math:`(a_0*b_0 \times a_1*b_1 \times \dots \times a_n*b_n)` tensor with the following entries:
        
        .. math::
            (\text{input} \otimes \text{other})_{k_0, k_1, \dots, k_n} =
                \text{input}_{i_0, i_1, \dots, i_n} * \text{other}_{j_0, j_1, \dots, j_n},
        
        where :math:`k_t = i_t * b_t + j_t` for :math:`0 \leq t \leq n`.
        If one tensor has fewer dimensions than the other it is unsqueezed until it has the same number of dimensions.
        
        Supports real-valued and complex-valued inputs.
        
        .. note::
            This function generalizes the typical definition of the Kronecker product for two matrices to two tensors,
            as described above. When :attr:`input` is a :math:`(m \times n)` matrix and :attr:`other` is a
            :math:`(p \times q)` matrix, the result will be a :math:`(p*m \times q*n)` block matrix:
        
            .. math::
                \mathbf{A} \otimes \mathbf{B}=\begin{bmatrix}
                a_{11} \mathbf{B} & \cdots & a_{1 n} \mathbf{B} \\
                \vdots & \ddots & \vdots \\
                a_{m 1} \mathbf{B} & \cdots & a_{m n} \mathbf{B} \end{bmatrix}
        
            where :attr:`input` is :math:`\mathbf{A}` and :attr:`other` is :math:`\mathbf{B}`.
        
        Arguments:
            input (Tensor)
            other (Tensor)
        
        Keyword args:
            out (Tensor, optional): The output tensor. Ignored if ``None``. Default: ``None``
        
        Examples::
        
            >>> mat1 = torch.eye(2)
            >>> mat2 = torch.ones(2, 2)
            >>> torch.kron(mat1, mat2)
            tensor([[1., 1., 0., 0.],
                    [1., 1., 0., 0.],
                    [0., 0., 1., 1.],
                    [0., 0., 1., 1.]])
        
            >>> mat1 = torch.eye(2)
            >>> mat2 = torch.arange(1, 5).reshape(2, 2)
            >>> torch.kron(mat1, mat2)
            tensor([[1., 2., 0., 0.],
                    [3., 4., 0., 0.],
                    [0., 0., 1., 2.],
                    [0., 0., 3., 4.]])
    
    kktthhvvaalluuee(...)
        kthvalue(input, k, dim=None, keepdim=False, *, out=None) -> (Tensor, LongTensor)
        
        Returns a namedtuple ``(values, indices)`` where ``values`` is the :attr:`k` th
        smallest element of each row of the :attr:`input` tensor in the given dimension
        :attr:`dim`. And ``indices`` is the index location of each element found.
        
        If :attr:`dim` is not given, the last dimension of the `input` is chosen.
        
        If :attr:`keepdim` is ``True``, both the :attr:`values` and :attr:`indices` tensors
        are the same size as :attr:`input`, except in the dimension :attr:`dim` where
        they are of size 1. Otherwise, :attr:`dim` is squeezed
        (see :func:`torch.squeeze`), resulting in both the :attr:`values` and
        :attr:`indices` tensors having 1 fewer dimension than the :attr:`input` tensor.
        
        .. note::
            When :attr:`input` is a CUDA tensor and there are multiple valid
            :attr:`k` th values, this function may nondeterministically return
            :attr:`indices` for any of them.
        
        Args:
            input (Tensor): the input tensor.
            k (int): k for the k-th smallest element
            dim (int, optional): the dimension to find the kth value along
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (tuple, optional): the output tuple of (Tensor, LongTensor)
                                   can be optionally given to be used as output buffers
        
        Example::
        
            >>> x = torch.arange(1., 6.)
            >>> x
            tensor([ 1.,  2.,  3.,  4.,  5.])
            >>> torch.kthvalue(x, 4)
            torch.return_types.kthvalue(values=tensor(4.), indices=tensor(3))
        
            >>> x=torch.arange(1.,7.).resize_(2,3)
            >>> x
            tensor([[ 1.,  2.,  3.],
                    [ 4.,  5.,  6.]])
            >>> torch.kthvalue(x, 2, 0, True)
            torch.return_types.kthvalue(values=tensor([[4., 5., 6.]]), indices=tensor([[1, 1, 1]]))
    
    llaayyeerr__nnoorrmm(...)
    
    llccmm(...)
        lcm(input, other, *, out=None) -> Tensor
        
        Computes the element-wise least common multiple (LCM) of :attr:`input` and :attr:`other`.
        
        Both :attr:`input` and :attr:`other` must have integer types.
        
        .. note::
            This defines :math:`lcm(0, 0) = 0` and :math:`lcm(0, a) = 0`.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([5, 10, 15])
            >>> b = torch.tensor([3, 4, 5])
            >>> torch.lcm(a, b)
            tensor([15, 20, 15])
            >>> c = torch.tensor([3])
            >>> torch.lcm(a, c)
            tensor([15, 30, 15])
    
    llccmm__(...)
    
    llddeexxpp(...)
        ldexp(input, other, *, out=None) -> Tensor
        
        Multiplies :attr:`input` by 2**:attr:`other`.
        
        .. math::
            \text{{out}}_i = \text{{input}}_i * 2^\text{{other}}_i
        
        
        Typically this function is used to construct floating point numbers by multiplying
        mantissas in :attr:`input` with integral powers of two created from the exponents
        in :attr:'other'.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): a tensor of exponents, typically integers.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
            >>> torch.ldexp(torch.tensor([1.]), torch.tensor([1]))
            tensor([2.])
            >>> torch.ldexp(torch.tensor([1.0]), torch.tensor([1, 2, 3, 4]))
            tensor([ 2.,  4.,  8., 16.])
    
    llddeexxpp__(...)
    
    llee(...)
        le(input, other, *, out=None) -> Tensor
        
        Computes :math:`\text{input} \leq \text{other}` element-wise.
        
        
        The second argument can be a number or a tensor whose shape is
        :ref:`broadcastable <broadcasting-semantics>` with the first argument.
        
        Args:
            input (Tensor): the tensor to compare
            other (Tensor or Scalar): the tensor or value to compare
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is less than or equal to
            :attr:`other` and False elsewhere
        
        Example::
        
            >>> torch.le(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            tensor([[True, False], [True, True]])
    
    lleerrpp(...)
        lerp(input, end, weight, *, out=None)
        
        Does a linear interpolation of two tensors :attr:`start` (given by :attr:`input`) and :attr:`end` based
        on a scalar or tensor :attr:`weight` and returns the resulting :attr:`out` tensor.
        
        .. math::
            \text{out}_i = \text{start}_i + \text{weight}_i \times (\text{end}_i - \text{start}_i)
        
        The shapes of :attr:`start` and :attr:`end` must be
        :ref:`broadcastable <broadcasting-semantics>`. If :attr:`weight` is a tensor, then
        the shapes of :attr:`weight`, :attr:`start`, and :attr:`end` must be :ref:`broadcastable <broadcasting-semantics>`.
        
        Args:
            input (Tensor): the tensor with the starting points
            end (Tensor): the tensor with the ending points
            weight (float or tensor): the weight for the interpolation formula
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> start = torch.arange(1., 5.)
            >>> end = torch.empty(4).fill_(10)
            >>> start
            tensor([ 1.,  2.,  3.,  4.])
            >>> end
            tensor([ 10.,  10.,  10.,  10.])
            >>> torch.lerp(start, end, 0.5)
            tensor([ 5.5000,  6.0000,  6.5000,  7.0000])
            >>> torch.lerp(start, end, torch.full_like(start, 0.5))
            tensor([ 5.5000,  6.0000,  6.5000,  7.0000])
    
    lleessss(...)
        less(input, other, *, out=None) -> Tensor
        
        Alias for :func:`torch.lt`.
    
    lleessss__eeqquuaall(...)
        less_equal(input, other, *, out=None) -> Tensor
        
        Alias for :func:`torch.le`.
    
    llggaammmmaa(...)
        lgamma(input, *, out=None) -> Tensor
        
        Computes the logarithm of the gamma function on :attr:`input`.
        
        .. math::
            \text{out}_{i} = \log \Gamma(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.arange(0.5, 2, 0.5)
            >>> torch.lgamma(a)
            tensor([ 0.5724,  0.0000, -0.1208])
    
    lliinnssppaaccee(...)
        linspace(start, end, steps, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Creates a one-dimensional tensor of size :attr:`steps` whose values are evenly
        spaced from :attr:`start` to :attr:`end`, inclusive. That is, the value are:
        
        .. math::
            (\text{start},
            \text{start} + \frac{\text{end} - \text{start}}{\text{steps} - 1},
            \ldots,
            \text{start} + (\text{steps} - 2) * \frac{\text{end} - \text{start}}{\text{steps} - 1},
            \text{end})
        
        
        .. warning::
            Not providing a value for :attr:`steps` is deprecated. For backwards
            compatibility, not providing a value for :attr:`steps` will create a tensor
            with 100 elements. Note that this behavior is not reflected in the
            documented function signature and should not be relied on. In a future
            PyTorch release, failing to provide a value for :attr:`steps` will throw a
            runtime error.
        
        Args:
            start (float): the starting value for the set of points
            end (float): the ending value for the set of points
            steps (int): size of the constructed tensor
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        
        Example::
        
            >>> torch.linspace(3, 10, steps=5)
            tensor([  3.0000,   4.7500,   6.5000,   8.2500,  10.0000])
            >>> torch.linspace(-10, 10, steps=5)
            tensor([-10.,  -5.,   0.,   5.,  10.])
            >>> torch.linspace(start=-10, end=10, steps=5)
            tensor([-10.,  -5.,   0.,   5.,  10.])
            >>> torch.linspace(start=-10, end=10, steps=1)
            tensor([-10.])
    
    llooaadd(f, map_location=None, pickle_module=<module 'pickle' from '/usr/lib/python3.8/pickle.py'>, **pickle_load_args)
        Loads an object saved with :func:`torch.save` from a file.
        
        :func:`torch.load` uses Python's unpickling facilities but treats storages,
        which underlie tensors, specially. They are first deserialized on the
        CPU and are then moved to the device they were saved from. If this fails
        (e.g. because the run time system doesn't have certain devices), an exception
        is raised. However, storages can be dynamically remapped to an alternative
        set of devices using the :attr:`map_location` argument.
        
        If :attr:`map_location` is a callable, it will be called once for each serialized
        storage with two arguments: storage and location. The storage argument
        will be the initial deserialization of the storage, residing on the CPU.
        Each serialized storage has a location tag associated with it which
        identifies the device it was saved from, and this tag is the second
        argument passed to :attr:`map_location`. The builtin location tags are ``'cpu'``
        for CPU tensors and ``'cuda:device_id'`` (e.g. ``'cuda:2'``) for CUDA tensors.
        :attr:`map_location` should return either ``None`` or a storage. If
        :attr:`map_location` returns a storage, it will be used as the final deserialized
        object, already moved to the right device. Otherwise, :func:`torch.load` will
        fall back to the default behavior, as if :attr:`map_location` wasn't specified.
        
        If :attr:`map_location` is a :class:`torch.device` object or a string containing
        a device tag, it indicates the location where all tensors should be loaded.
        
        Otherwise, if :attr:`map_location` is a dict, it will be used to remap location tags
        appearing in the file (keys), to ones that specify where to put the
        storages (values).
        
        User extensions can register their own location tags and tagging and
        deserialization methods using :func:`torch.serialization.register_package`.
        
        Args:
            f: a file-like object (has to implement :meth:`read`, :meth:`readline`, :meth:`tell`, and :meth:`seek`),
                or a string or os.PathLike object containing a file name
            map_location: a function, :class:`torch.device`, string or a dict specifying how to remap storage
                locations
            pickle_module: module used for unpickling metadata and objects (has to
                match the :attr:`pickle_module` used to serialize file)
            pickle_load_args: (Python 3 only) optional keyword arguments passed over to
                :func:`pickle_module.load` and :func:`pickle_module.Unpickler`, e.g.,
                :attr:`errors=...`.
        
        .. warning::
            :func:`torch.load()` uses ``pickle`` module implicitly, which is known to be insecure.
            It is possible to construct malicious pickle data which will execute arbitrary code
            during unpickling. Never load data that could have come from an untrusted
            source, or that could have been tampered with. **Only load data you trust**.
        
        .. note::
            When you call :func:`torch.load()` on a file which contains GPU tensors, those tensors
            will be loaded to GPU by default. You can call ``torch.load(.., map_location='cpu')``
            and then :meth:`load_state_dict` to avoid GPU RAM surge when loading a model checkpoint.
        
        .. note::
            By default, we decode byte strings as ``utf-8``.  This is to avoid a common error
            case ``UnicodeDecodeError: 'ascii' codec can't decode byte 0x...``
            when loading files saved by Python 2 in Python 3.  If this default
            is incorrect, you may use an extra :attr:`encoding` keyword argument to specify how
            these objects should be loaded, e.g., :attr:`encoding='latin1'` decodes them
            to strings using ``latin1`` encoding, and :attr:`encoding='bytes'` keeps them
            as byte arrays which can be decoded later with ``byte_array.decode(...)``.
        
        Example:
            >>> torch.load('tensors.pt')
            # Load all tensors onto the CPU
            >>> torch.load('tensors.pt', map_location=torch.device('cpu'))
            # Load all tensors onto the CPU, using a function
            >>> torch.load('tensors.pt', map_location=lambda storage, loc: storage)
            # Load all tensors onto GPU 1
            >>> torch.load('tensors.pt', map_location=lambda storage, loc: storage.cuda(1))
            # Map tensors from GPU 1 to GPU 0
            >>> torch.load('tensors.pt', map_location={'cuda:1':'cuda:0'})
            # Load tensor from io.BytesIO object
            >>> with open('tensor.pt', 'rb') as f:
            ...     buffer = io.BytesIO(f.read())
            >>> torch.load(buffer)
            # Load a module with 'ascii' encoding for unpickling
            >>> torch.load('module.pt', encoding='ascii')
    
    lloobbppccgg(A: torch.Tensor, k: Union[int, NoneType] = None, B: Union[torch.Tensor, NoneType] = None, X: Union[torch.Tensor, NoneType] = None, n: Union[int, NoneType] = None, iK: Union[torch.Tensor, NoneType] = None, niter: Union[int, NoneType] = None, tol: Union[float, NoneType] = None, largest: Union[bool, NoneType] = None, method: Union[str, NoneType] = None, tracker: NoneType = None, ortho_iparams: Union[Dict[str, int], NoneType] = None, ortho_fparams: Union[Dict[str, float], NoneType] = None, ortho_bparams: Union[Dict[str, bool], NoneType] = None) -> Tuple[torch.Tensor, torch.Tensor]
        Find the k largest (or smallest) eigenvalues and the corresponding
        eigenvectors of a symmetric positive defined generalized
        eigenvalue problem using matrix-free LOBPCG methods.
        
        This function is a front-end to the following LOBPCG algorithms
        selectable via `method` argument:
        
          `method="basic"` - the LOBPCG method introduced by Andrew
          Knyazev, see [Knyazev2001]. A less robust method, may fail when
          Cholesky is applied to singular input.
        
          `method="ortho"` - the LOBPCG method with orthogonal basis
          selection [StathopoulosEtal2002]. A robust method.
        
        Supported inputs are dense, sparse, and batches of dense matrices.
        
        .. note:: In general, the basic method spends least time per
          iteration. However, the robust methods converge much faster and
          are more stable. So, the usage of the basic method is generally
          not recommended but there exist cases where the usage of the
          basic method may be preferred.
        
        .. warning:: The backward method does not support sparse and complex inputs.
          It works only when `B` is not provided (i.e. `B == None`).
          We are actively working on extensions, and the details of
          the algorithms are going to be published promptly.
        
        .. warning:: While it is assumed that `A` is symmetric, `A.grad` is not.
          To make sure that `A.grad` is symmetric, so that `A - t * A.grad` is symmetric
          in first-order optimization routines, prior to running `lobpcg`
          we do the following symmetrization map: `A -> (A + A.t()) / 2`.
          The map is performed only when the `A` requires gradients.
        
        Args:
        
          A (Tensor): the input tensor of size :math:`(*, m, m)`
        
          B (Tensor, optional): the input tensor of size :math:`(*, m,
                      m)`. When not specified, `B` is interpereted as
                      identity matrix.
        
          X (tensor, optional): the input tensor of size :math:`(*, m, n)`
                      where `k <= n <= m`. When specified, it is used as
                      initial approximation of eigenvectors. X must be a
                      dense tensor.
        
          iK (tensor, optional): the input tensor of size :math:`(*, m,
                      m)`. When specified, it will be used as preconditioner.
        
          k (integer, optional): the number of requested
                      eigenpairs. Default is the number of :math:`X`
                      columns (when specified) or `1`.
        
          n (integer, optional): if :math:`X` is not specified then `n`
                      specifies the size of the generated random
                      approximation of eigenvectors. Default value for `n`
                      is `k`. If :math:`X` is specified, the value of `n`
                      (when specified) must be the number of :math:`X`
                      columns.
        
          tol (float, optional): residual tolerance for stopping
                     criterion. Default is `feps ** 0.5` where `feps` is
                     smallest non-zero floating-point number of the given
                     input tensor `A` data type.
        
          largest (bool, optional): when True, solve the eigenproblem for
                     the largest eigenvalues. Otherwise, solve the
                     eigenproblem for smallest eigenvalues. Default is
                     `True`.
        
          method (str, optional): select LOBPCG method. See the
                     description of the function above. Default is
                     "ortho".
        
          niter (int, optional): maximum number of iterations. When
                     reached, the iteration process is hard-stopped and
                     the current approximation of eigenpairs is returned.
                     For infinite iteration but until convergence criteria
                     is met, use `-1`.
        
          tracker (callable, optional) : a function for tracing the
                     iteration process. When specified, it is called at
                     each iteration step with LOBPCG instance as an
                     argument. The LOBPCG instance holds the full state of
                     the iteration process in the following attributes:
        
                       `iparams`, `fparams`, `bparams` - dictionaries of
                       integer, float, and boolean valued input
                       parameters, respectively
        
                       `ivars`, `fvars`, `bvars`, `tvars` - dictionaries
                       of integer, float, boolean, and Tensor valued
                       iteration variables, respectively.
        
                       `A`, `B`, `iK` - input Tensor arguments.
        
                       `E`, `X`, `S`, `R` - iteration Tensor variables.
        
                     For instance:
        
                       `ivars["istep"]` - the current iteration step
                       `X` - the current approximation of eigenvectors
                       `E` - the current approximation of eigenvalues
                       `R` - the current residual
                       `ivars["converged_count"]` - the current number of converged eigenpairs
                       `tvars["rerr"]` - the current state of convergence criteria
        
                     Note that when `tracker` stores Tensor objects from
                     the LOBPCG instance, it must make copies of these.
        
                     If `tracker` sets `bvars["force_stop"] = True`, the
                     iteration process will be hard-stopped.
        
          ortho_iparams, ortho_fparams, ortho_bparams (dict, optional):
                     various parameters to LOBPCG algorithm when using
                     `method="ortho"`.
        
        Returns:
        
          E (Tensor): tensor of eigenvalues of size :math:`(*, k)`
        
          X (Tensor): tensor of eigenvectors of size :math:`(*, m, k)`
        
        References:
        
          [Knyazev2001] Andrew V. Knyazev. (2001) Toward the Optimal
          Preconditioned Eigensolver: Locally Optimal Block Preconditioned
          Conjugate Gradient Method. SIAM J. Sci. Comput., 23(2),
          517-541. (25 pages)
          https://epubs.siam.org/doi/abs/10.1137/S1064827500366124
        
          [StathopoulosEtal2002] Andreas Stathopoulos and Kesheng
          Wu. (2002) A Block Orthogonalization Procedure with Constant
          Synchronization Requirements. SIAM J. Sci. Comput., 23(6),
          2165-2182. (18 pages)
          https://epubs.siam.org/doi/10.1137/S1064827500370883
        
          [DuerschEtal2018] Jed A. Duersch, Meiyue Shao, Chao Yang, Ming
          Gu. (2018) A Robust and Efficient Implementation of LOBPCG.
          SIAM J. Sci. Comput., 40(5), C655-C676. (22 pages)
          https://epubs.siam.org/doi/abs/10.1137/17M1129830
    
    lloogg(...)
        log(input, *, out=None) -> Tensor
        
        Returns a new tensor with the natural logarithm of the elements
        of :attr:`input`.
        
        .. math::
            y_{i} = \log_{e} (x_{i})
        
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(5)
            >>> a
            tensor([-0.7168, -0.5471, -0.8933, -1.4428, -0.1190])
            >>> torch.log(a)
            tensor([ nan,  nan,  nan,  nan,  nan])
    
    lloogg1100(...)
        log10(input, *, out=None) -> Tensor
        
        Returns a new tensor with the logarithm to the base 10 of the elements
        of :attr:`input`.
        
        .. math::
            y_{i} = \log_{10} (x_{i})
        
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.rand(5)
            >>> a
            tensor([ 0.5224,  0.9354,  0.7257,  0.1301,  0.2251])
        
        
            >>> torch.log10(a)
            tensor([-0.2820, -0.0290, -0.1392, -0.8857, -0.6476])
    
    lloogg1100__(...)
    
    lloogg11pp(...)
        log1p(input, *, out=None) -> Tensor
        
        Returns a new tensor with the natural logarithm of (1 + :attr:`input`).
        
        .. math::
            y_i = \log_{e} (x_i + 1)
        
        .. note:: This function is more accurate than :func:`torch.log` for small
                  values of :attr:`input`
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(5)
            >>> a
            tensor([-1.0090, -0.9923,  1.0249, -0.5372,  0.2492])
            >>> torch.log1p(a)
            tensor([    nan, -4.8653,  0.7055, -0.7705,  0.2225])
    
    lloogg11pp__(...)
    
    lloogg22(...)
        log2(input, *, out=None) -> Tensor
        
        Returns a new tensor with the logarithm to the base 2 of the elements
        of :attr:`input`.
        
        .. math::
            y_{i} = \log_{2} (x_{i})
        
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.rand(5)
            >>> a
            tensor([ 0.8419,  0.8003,  0.9971,  0.5287,  0.0490])
        
        
            >>> torch.log2(a)
            tensor([-0.2483, -0.3213, -0.0042, -0.9196, -4.3504])
    
    lloogg22__(...)
    
    lloogg__(...)
    
    lloogg__ssooffttmmaaxx(...)
    
    llooggaaddddeexxpp(...)
        logaddexp(input, other, *, out=None) -> Tensor
        
        Logarithm of the sum of exponentiations of the inputs.
        
        Calculates pointwise :math:`\log\left(e^x + e^y\right)`. This function is useful
        in statistics where the calculated probabilities of events may be so small as to
        exceed the range of normal floating point numbers. In such cases the logarithm
        of the calculated probability is stored. This function allows adding
        probabilities stored in such a fashion.
        
        This op should be disambiguated with :func:`torch.logsumexp` which performs a
        reduction on a single tensor.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.logaddexp(torch.tensor([-1.0]), torch.tensor([-1.0, -2, -3]))
            tensor([-0.3069, -0.6867, -0.8731])
            >>> torch.logaddexp(torch.tensor([-100.0, -200, -300]), torch.tensor([-1.0, -2, -3]))
            tensor([-1., -2., -3.])
            >>> torch.logaddexp(torch.tensor([1.0, 2000, 30000]), torch.tensor([-1.0, -2, -3]))
            tensor([1.1269e+00, 2.0000e+03, 3.0000e+04])
    
    llooggaaddddeexxpp22(...)
        logaddexp2(input, other, *, out=None) -> Tensor
        
        Logarithm of the sum of exponentiations of the inputs in base-2.
        
        Calculates pointwise :math:`\log_2\left(2^x + 2^y\right)`. See
        :func:`torch.logaddexp` for more details.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
    
    llooggccuummssuummeexxpp(...)
        logcumsumexp(input, dim, *, out=None) -> Tensor
        Returns the logarithm of the cumulative summation of the exponentiation of
        elements of :attr:`input` in the dimension :attr:`dim`.
        
        For summation index :math:`j` given by `dim` and other indices :math:`i`, the result is
        
            .. math::
                \text{logcumsumexp}(x)_{ij} = \log \sum\limits_{j=0}^{i} \exp(x_{ij})
        
        Args:
            input (Tensor): the input tensor.
            dim  (int): the dimension to do the operation over
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
            >>> a = torch.randn(10)
            >>> torch.logcumsumexp(a, dim=0)
            tensor([-0.42296738, -0.04462666,  0.86278635,  0.94622083,  1.05277811,
                     1.39202815,  1.83525007,  1.84492621,  2.06084887,  2.06844475]))
    
    llooggddeett(...)
        logdet(input) -> Tensor
        
        Calculates log determinant of a square matrix or batches of square matrices.
        
        .. note::
            Result is ``-inf`` if :attr:`input` has zero log determinant, and is ``nan`` if
            :attr:`input` has negative determinant.
        
        .. note::
            Backward through :meth:`logdet` internally uses SVD results when :attr:`input`
            is not invertible. In this case, double backward through :meth:`logdet` will
            be unstable in when :attr:`input` doesn't have distinct singular values. See
            :meth:`~torch.svd` for details.
        
        Arguments:
            input (Tensor): the input tensor of size ``(*, n, n)`` where ``*`` is zero or more
                        batch dimensions.
        
        Example::
        
            >>> A = torch.randn(3, 3)
            >>> torch.det(A)
            tensor(0.2611)
            >>> torch.logdet(A)
            tensor(-1.3430)
            >>> A
            tensor([[[ 0.9254, -0.6213],
                     [-0.5787,  1.6843]],
        
                    [[ 0.3242, -0.9665],
                     [ 0.4539, -0.0887]],
        
                    [[ 1.1336, -0.4025],
                     [-0.7089,  0.9032]]])
            >>> A.det()
            tensor([1.1990, 0.4099, 0.7386])
            >>> A.det().log()
            tensor([ 0.1815, -0.8917, -0.3031])
    
    llooggiiccaall__aanndd(...)
        logical_and(input, other, *, out=None) -> Tensor
        
        Computes the element-wise logical AND of the given input tensors. Zeros are treated as ``False`` and nonzeros are
        treated as ``True``.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the tensor to compute AND with
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.logical_and(torch.tensor([True, False, True]), torch.tensor([True, False, False]))
            tensor([ True, False, False])
            >>> a = torch.tensor([0, 1, 10, 0], dtype=torch.int8)
            >>> b = torch.tensor([4, 0, 1, 0], dtype=torch.int8)
            >>> torch.logical_and(a, b)
            tensor([False, False,  True, False])
            >>> torch.logical_and(a.double(), b.double())
            tensor([False, False,  True, False])
            >>> torch.logical_and(a.double(), b)
            tensor([False, False,  True, False])
            >>> torch.logical_and(a, b, out=torch.empty(4, dtype=torch.bool))
            tensor([False, False,  True, False])
    
    llooggiiccaall__nnoott(...)
        logical_not(input, *, out=None) -> Tensor
        
        Computes the element-wise logical NOT of the given input tensor. If not specified, the output tensor will have the bool
        dtype. If the input tensor is not a bool tensor, zeros are treated as ``False`` and non-zeros are treated as ``True``.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.logical_not(torch.tensor([True, False]))
            tensor([False,  True])
            >>> torch.logical_not(torch.tensor([0, 1, -10], dtype=torch.int8))
            tensor([ True, False, False])
            >>> torch.logical_not(torch.tensor([0., 1.5, -10.], dtype=torch.double))
            tensor([ True, False, False])
            >>> torch.logical_not(torch.tensor([0., 1., -10.], dtype=torch.double), out=torch.empty(3, dtype=torch.int16))
            tensor([1, 0, 0], dtype=torch.int16)
    
    llooggiiccaall__oorr(...)
        logical_or(input, other, *, out=None) -> Tensor
        
        Computes the element-wise logical OR of the given input tensors. Zeros are treated as ``False`` and nonzeros are
        treated as ``True``.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the tensor to compute OR with
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.logical_or(torch.tensor([True, False, True]), torch.tensor([True, False, False]))
            tensor([ True, False,  True])
            >>> a = torch.tensor([0, 1, 10, 0], dtype=torch.int8)
            >>> b = torch.tensor([4, 0, 1, 0], dtype=torch.int8)
            >>> torch.logical_or(a, b)
            tensor([ True,  True,  True, False])
            >>> torch.logical_or(a.double(), b.double())
            tensor([ True,  True,  True, False])
            >>> torch.logical_or(a.double(), b)
            tensor([ True,  True,  True, False])
            >>> torch.logical_or(a, b, out=torch.empty(4, dtype=torch.bool))
            tensor([ True,  True,  True, False])
    
    llooggiiccaall__xxoorr(...)
        logical_xor(input, other, *, out=None) -> Tensor
        
        Computes the element-wise logical XOR of the given input tensors. Zeros are treated as ``False`` and nonzeros are
        treated as ``True``.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the tensor to compute XOR with
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.logical_xor(torch.tensor([True, False, True]), torch.tensor([True, False, False]))
            tensor([False, False,  True])
            >>> a = torch.tensor([0, 1, 10, 0], dtype=torch.int8)
            >>> b = torch.tensor([4, 0, 1, 0], dtype=torch.int8)
            >>> torch.logical_xor(a, b)
            tensor([ True,  True, False, False])
            >>> torch.logical_xor(a.double(), b.double())
            tensor([ True,  True, False, False])
            >>> torch.logical_xor(a.double(), b)
            tensor([ True,  True, False, False])
            >>> torch.logical_xor(a, b, out=torch.empty(4, dtype=torch.bool))
            tensor([ True,  True, False, False])
    
    llooggiitt(...)
        logit(input, eps=None, *, out=None) -> Tensor
        
        Returns a new tensor with the logit of the elements of :attr:`input`.
        :attr:`input` is clamped to [eps, 1 - eps] when eps is not None.
        When eps is None and :attr:`input` < 0 or :attr:`input` > 1, the function will yields NaN.
        
        .. math::
            y_{i} = \ln(\frac{z_{i}}{1 - z_{i}}) \\
            z_{i} = \begin{cases}
                x_{i} & \text{if eps is None} \\
                \text{eps} & \text{if } x_{i} < \text{eps} \\
                x_{i} & \text{if } \text{eps} \leq x_{i} \leq 1 - \text{eps} \\
                1 - \text{eps} & \text{if } x_{i} > 1 - \text{eps}
            \end{cases}
        
        Args:
            input (Tensor): the input tensor.
            eps (float, optional): the epsilon for input clamp bound. Default: ``None``
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.rand(5)
            >>> a
            tensor([0.2796, 0.9331, 0.6486, 0.1523, 0.6516])
            >>> torch.logit(a, eps=1e-6)
            tensor([-0.9466,  2.6352,  0.6131, -1.7169,  0.6261])
    
    llooggiitt__(...)
    
    llooggssppaaccee(...)
        logspace(start, end, steps, base=10.0, *,          out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        
        Creates a one-dimensional tensor of size :attr:`steps` whose values are evenly
        spaced from :math:`{{\text{{base}}}}^{{\text{{start}}}}` to
        :math:`{{\text{{base}}}}^{{\text{{end}}}}`, inclusive, on a logarithmic scale
        with base :attr:`base`. That is, the values are:
        
        .. math::
            (\text{base}^{\text{start}},
            \text{base}^{(\text{start} + \frac{\text{end} - \text{start}}{ \text{steps} - 1})},
            \ldots,
            \text{base}^{(\text{start} + (\text{steps} - 2) * \frac{\text{end} - \text{start}}{ \text{steps} - 1})},
            \text{base}^{\text{end}})
        
        
        .. warning::
            Not providing a value for :attr:`steps` is deprecated. For backwards
            compatibility, not providing a value for :attr:`steps` will create a tensor
            with 100 elements. Note that this behavior is not reflected in the
            documented function signature and should not be relied on. In a future
            PyTorch release, failing to provide a value for :attr:`steps` will throw a
            runtime error.
        
        Args:
            start (float): the starting value for the set of points
            end (float): the ending value for the set of points
            steps (int): size of the constructed tensor
            base (float, optional): base of the logarithm function. Default: ``10.0``.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.logspace(start=-10, end=10, steps=5)
            tensor([ 1.0000e-10,  1.0000e-05,  1.0000e+00,  1.0000e+05,  1.0000e+10])
            >>> torch.logspace(start=0.1, end=1.0, steps=5)
            tensor([  1.2589,   2.1135,   3.5481,   5.9566,  10.0000])
            >>> torch.logspace(start=0.1, end=1.0, steps=1)
            tensor([1.2589])
            >>> torch.logspace(start=2, end=2, steps=1, base=2)
            tensor([4.0])
    
    llooggssuummeexxpp(...)
        logsumexp(input, dim, keepdim=False, *, out=None)
        
        Returns the log of summed exponentials of each row of the :attr:`input`
        tensor in the given dimension :attr:`dim`. The computation is numerically
        stabilized.
        
        For summation index :math:`j` given by `dim` and other indices :math:`i`, the result is
        
            .. math::
                \text{logsumexp}(x)_{i} = \log \sum_j \exp(x_{ij})
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        
        Example::
            >>> a = torch.randn(3, 3)
            >>> torch.logsumexp(a, 1)
            tensor([ 0.8442,  1.4322,  0.8711])
    
    llssttmm(...)
    
    llssttmm__cceellll(...)
    
    llssttssqq(...)
        lstsq(input, A, *, out=None) -> Tensor
        
        Computes the solution to the least squares and least norm problems for a full
        rank matrix :math:`A` of size :math:`(m \times n)` and a matrix :math:`B` of
        size :math:`(m \times k)`.
        
        If :math:`m \geq n`, :func:`lstsq` solves the least-squares problem:
        
        .. math::
        
           \begin{array}{ll}
           \min_X & \|AX-B\|_2.
           \end{array}
        
        If :math:`m < n`, :func:`lstsq` solves the least-norm problem:
        
        .. math::
        
           \begin{array}{llll}
           \min_X & \|X\|_2 & \text{subject to} & AX = B.
           \end{array}
        
        Returned tensor :math:`X` has shape :math:`(\max(m, n) \times k)`. The first :math:`n`
        rows of :math:`X` contains the solution. If :math:`m \geq n`, the residual sum of squares
        for the solution in each column is given by the sum of squares of elements in the
        remaining :math:`m - n` rows of that column.
        
        .. note::
            The case when :math:`m < n` is not supported on the GPU.
        
        Args:
            input (Tensor): the matrix :math:`B`
            A (Tensor): the :math:`m` by :math:`n` matrix :math:`A`
        
        Keyword args:
            out (tuple, optional): the optional destination tensor
        
        Returns:
            (Tensor, Tensor): A namedtuple (solution, QR) containing:
        
                - **solution** (*Tensor*): the least squares solution
                - **QR** (*Tensor*): the details of the QR factorization
        
        .. note::
        
            The returned matrices will always be transposed, irrespective of the strides
            of the input matrices. That is, they will have stride `(1, m)` instead of
            `(m, 1)`.
        
        Example::
        
            >>> A = torch.tensor([[1., 1, 1],
            ...                   [2, 3, 4],
            ...                   [3, 5, 2],
            ...                   [4, 2, 5],
            ...                   [5, 4, 3]])
            >>> B = torch.tensor([[-10., -3],
            ...                   [ 12, 14],
            ...                   [ 14, 12],
            ...                   [ 16, 16],
            ...                   [ 18, 16]])
            >>> X, _ = torch.lstsq(B, A)
            >>> X
            tensor([[  2.0000,   1.0000],
                    [  1.0000,   1.0000],
                    [  1.0000,   2.0000],
                    [ 10.9635,   4.8501],
                    [  8.9332,   5.2418]])
    
    lltt(...)
        lt(input, other, *, out=None) -> Tensor
        
        Computes :math:`\text{input} < \text{other}` element-wise.
        
        
        The second argument can be a number or a tensor whose shape is
        :ref:`broadcastable <broadcasting-semantics>` with the first argument.
        
        Args:
            input (Tensor): the tensor to compare
            other (Tensor or float): the tensor or value to compare
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is less than :attr:`other` and False elsewhere
        
        Example::
        
            >>> torch.lt(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            tensor([[False, False], [True, False]])
    
    lluu__ssoollvvee(...)
        lu_solve(b, LU_data, LU_pivots, *, out=None) -> Tensor
        
        Returns the LU solve of the linear system :math:`Ax = b` using the partially pivoted
        LU factorization of A from :meth:`torch.lu`.
        
        This function supports ``float``, ``double``, ``cfloat`` and ``cdouble`` dtypes for :attr:`input`.
        
        Arguments:
            b (Tensor): the RHS tensor of size :math:`(*, m, k)`, where :math:`*`
                        is zero or more batch dimensions.
            LU_data (Tensor): the pivoted LU factorization of A from :meth:`torch.lu` of size :math:`(*, m, m)`,
                               where :math:`*` is zero or more batch dimensions.
            LU_pivots (IntTensor): the pivots of the LU factorization from :meth:`torch.lu` of size :math:`(*, m)`,
                                   where :math:`*` is zero or more batch dimensions.
                                   The batch dimensions of :attr:`LU_pivots` must be equal to the batch dimensions of
                                   :attr:`LU_data`.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> A = torch.randn(2, 3, 3)
            >>> b = torch.randn(2, 3, 1)
            >>> A_LU = torch.lu(A)
            >>> x = torch.lu_solve(b, *A_LU)
            >>> torch.norm(torch.bmm(A, x) - b)
            tensor(1.00000e-07 *
                   2.8312)
    
    mmaannuuaall__sseeeedd(seed) -> torch._C.Generator
        Sets the seed for generating random numbers. Returns a
        `torch.Generator` object.
        
        Args:
            seed (int): The desired seed. Value must be within the inclusive range
                `[-0x8000_0000_0000_0000, 0xffff_ffff_ffff_ffff]`. Otherwise, a RuntimeError
                is raised. Negative inputs are remapped to positive values with the formula
                `0xffff_ffff_ffff_ffff + seed`.
    
    mmaarrggiinn__rraannkkiinngg__lloossss(...)
    
    mmaasskkeedd__ffiillll(...)
    
    mmaasskkeedd__ssccaatttteerr(...)
    
    mmaasskkeedd__sseelleecctt(...)
        masked_select(input, mask, *, out=None) -> Tensor
        
        Returns a new 1-D tensor which indexes the :attr:`input` tensor according to
        the boolean mask :attr:`mask` which is a `BoolTensor`.
        
        The shapes of the :attr:`mask` tensor and the :attr:`input` tensor don't need
        to match, but they must be :ref:`broadcastable <broadcasting-semantics>`.
        
        .. note:: The returned tensor does **not** use the same storage
                  as the original tensor
        
        Args:
            input (Tensor): the input tensor.
            mask  (BoolTensor): the tensor containing the binary mask to index with
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x = torch.randn(3, 4)
            >>> x
            tensor([[ 0.3552, -2.3825, -0.8297,  0.3477],
                    [-1.2035,  1.2252,  0.5002,  0.6248],
                    [ 0.1307, -2.0608,  0.1244,  2.0139]])
            >>> mask = x.ge(0.5)
            >>> mask
            tensor([[False, False, False, False],
                    [False, True, True, True],
                    [False, False, False, True]])
            >>> torch.masked_select(x, mask)
            tensor([ 1.2252,  0.5002,  0.6248,  2.0139])
    
    mmaattmmuull(...)
        matmul(input, other, *, out=None) -> Tensor
        
        Matrix product of two tensors.
        
        The behavior depends on the dimensionality of the tensors as follows:
        
        - If both tensors are 1-dimensional, the dot product (scalar) is returned.
        - If both arguments are 2-dimensional, the matrix-matrix product is returned.
        - If the first argument is 1-dimensional and the second argument is 2-dimensional,
          a 1 is prepended to its dimension for the purpose of the matrix multiply.
          After the matrix multiply, the prepended dimension is removed.
        - If the first argument is 2-dimensional and the second argument is 1-dimensional,
          the matrix-vector product is returned.
        - If both arguments are at least 1-dimensional and at least one argument is
          N-dimensional (where N > 2), then a batched matrix multiply is returned.  If the first
          argument is 1-dimensional, a 1 is prepended to its dimension for the purpose of the
          batched matrix multiply and removed after.  If the second argument is 1-dimensional, a
          1 is appended to its dimension for the purpose of the batched matrix multiple and removed after.
          The non-matrix (i.e. batch) dimensions are :ref:`broadcasted <broadcasting-semantics>` (and thus
          must be broadcastable).  For example, if :attr:`input` is a
          :math:`(j \times 1 \times n \times n)` tensor and :attr:`other` is a :math:`(k \times n \times n)`
          tensor, :attr:`out` will be a :math:`(j \times k \times n \times n)` tensor.
        
          Note that the broadcasting logic only looks at the batch dimensions when determining if the inputs
          are broadcastable, and not the matrix dimensions. For example, if :attr:`input` is a
          :math:`(j \times 1 \times n \times m)` tensor and :attr:`other` is a :math:`(k \times m \times p)`
          tensor, these inputs are valid for broadcasting even though the final two dimensions (i.e. the
          matrix dimensions) are different. :attr:`out` will be a :math:`(j \times k \times n \times p)` tensor.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        .. note::
        
            The 1-dimensional dot product version of this function does not support an :attr:`out` parameter.
        
        Arguments:
            input (Tensor): the first tensor to be multiplied
            other (Tensor): the second tensor to be multiplied
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> # vector x vector
            >>> tensor1 = torch.randn(3)
            >>> tensor2 = torch.randn(3)
            >>> torch.matmul(tensor1, tensor2).size()
            torch.Size([])
            >>> # matrix x vector
            >>> tensor1 = torch.randn(3, 4)
            >>> tensor2 = torch.randn(4)
            >>> torch.matmul(tensor1, tensor2).size()
            torch.Size([3])
            >>> # batched matrix x broadcasted vector
            >>> tensor1 = torch.randn(10, 3, 4)
            >>> tensor2 = torch.randn(4)
            >>> torch.matmul(tensor1, tensor2).size()
            torch.Size([10, 3])
            >>> # batched matrix x batched matrix
            >>> tensor1 = torch.randn(10, 3, 4)
            >>> tensor2 = torch.randn(10, 4, 5)
            >>> torch.matmul(tensor1, tensor2).size()
            torch.Size([10, 3, 5])
            >>> # batched matrix x broadcasted matrix
            >>> tensor1 = torch.randn(10, 3, 4)
            >>> tensor2 = torch.randn(4, 5)
            >>> torch.matmul(tensor1, tensor2).size()
            torch.Size([10, 3, 5])
    
    mmaattrriixx__eexxpp(...)
        Returns the matrix exponential. Supports batched input.
        For a matrix ``A``, the matrix exponential is defined as
        
        .. math::
            \mathrm{e}^A = \sum_{k=0}^\infty A^k / k!
        
        
        The implementation is based on:
        
        Bader, P.; Blanes, S.; Casas, F.
        Computing the Matrix Exponential with an Optimized Taylor Polynomial Approximation.
        Mathematics 2019, 7, 1174.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.randn(2, 2, 2)
            >>> a[0, :, :] = torch.eye(2, 2)
            >>> a[1, :, :] = 2 * torch.eye(2, 2)
            >>> a
            tensor([[[1., 0.],
                     [0., 1.]],
        
                    [[2., 0.],
                     [0., 2.]]])
            >>> torch.matrix_exp(a)
            tensor([[[2.7183, 0.0000],
                     [0.0000, 2.7183]],
        
                     [[7.3891, 0.0000],
                      [0.0000, 7.3891]]])
        
            >>> import math
            >>> x = torch.tensor([[0, math.pi/3], [-math.pi/3, 0]])
            >>> x.matrix_exp() # should be [[cos(pi/3), sin(pi/3)], [-sin(pi/3), cos(pi/3)]]
            tensor([[ 0.5000,  0.8660],
                    [-0.8660,  0.5000]])
    
    mmaattrriixx__ppoowweerr(...)
        matrix_power(input, n) -> Tensor
        
        Returns the matrix raised to the power :attr:`n` for square matrices.
        For batch of matrices, each individual matrix is raised to the power :attr:`n`.
        
        If :attr:`n` is negative, then the inverse of the matrix (if invertible) is
        raised to the power :attr:`n`.  For a batch of matrices, the batched inverse
        (if invertible) is raised to the power :attr:`n`. If :attr:`n` is 0, then an identity matrix
        is returned.
        
        Args:
            input (Tensor): the input tensor.
            n (int): the power to raise the matrix to
        
        Example::
        
            >>> a = torch.randn(2, 2, 2)
            >>> a
            tensor([[[-1.9975, -1.9610],
                     [ 0.9592, -2.3364]],
        
                    [[-1.2534, -1.3429],
                     [ 0.4153, -1.4664]]])
            >>> torch.matrix_power(a, 3)
            tensor([[[  3.9392, -23.9916],
                     [ 11.7357,  -0.2070]],
        
                    [[  0.2468,  -6.7168],
                     [  2.0774,  -0.8187]]])
    
    mmaattrriixx__rraannkk(...)
        matrix_rank(input, tol=None, symmetric=False, *, out=None) -> Tensor
        
        Returns the numerical rank of a 2-D tensor. The method to compute the
        matrix rank is done using SVD by default. If :attr:`symmetric` is ``True``,
        then :attr:`input` is assumed to be symmetric, and the computation of the
        rank is done by obtaining the eigenvalues.
        
        :attr:`tol` is the threshold below which the singular values (or the eigenvalues
        when :attr:`symmetric` is ``True``) are considered to be 0. If :attr:`tol` is not
        specified, :attr:`tol` is set to ``S.max() * max(S.size()) * eps`` where `S` is the
        singular values (or the eigenvalues when :attr:`symmetric` is ``True``), and ``eps``
        is the epsilon value for the datatype of :attr:`input`.
        
        .. note:: :func:`torch.matrix_rank` is deprecated. Please use :func:`torch.linalg.matrix_rank` instead.
                  The parameter :attr:`symmetric` was renamed in :func:`torch.linalg.matrix_rank` to ``hermitian``.
        
        Args:
            input (Tensor): the input 2-D tensor
            tol (float, optional): the tolerance value. Default: ``None``
            symmetric(bool, optional): indicates whether :attr:`input` is symmetric.
                                       Default: ``False``
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.eye(10)
            >>> torch.matrix_rank(a)
            tensor(10)
            >>> b = torch.eye(10)
            >>> b[0, 0] = 0
            >>> torch.matrix_rank(b)
            tensor(9)
    
    mmaaxx(...)
        max(input) -> Tensor
        
        Returns the maximum value of all elements in the ``input`` tensor.
        
        .. warning::
            This function produces deterministic (sub)gradients unlike ``max(dim=0)``
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[ 0.6763,  0.7445, -2.2369]])
            >>> torch.max(a)
            tensor(0.7445)
        
        .. function:: max(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor)
        
        Returns a namedtuple ``(values, indices)`` where ``values`` is the maximum
        value of each row of the :attr:`input` tensor in the given dimension
        :attr:`dim`. And ``indices`` is the index location of each maximum value found
        (argmax).
        
        If ``keepdim`` is ``True``, the output tensors are of the same size
        as ``input`` except in the dimension ``dim`` where they are of size 1.
        Otherwise, ``dim`` is squeezed (see :func:`torch.squeeze`), resulting
        in the output tensors having 1 fewer dimension than ``input``.
        
        .. note:: If there are multiple maximal values in a reduced row then
                  the indices of the first maximal value are returned.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Default: ``False``.
        
        Keyword args:
            out (tuple, optional): the result tuple of two output tensors (max, max_indices)
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[-1.2360, -0.2942, -0.1222,  0.8475],
                    [ 1.1949, -1.1127, -2.2379, -0.6702],
                    [ 1.5717, -0.9207,  0.1297, -1.8768],
                    [-0.6172,  1.0036, -0.6060, -0.2432]])
            >>> torch.max(a, 1)
            torch.return_types.max(values=tensor([0.8475, 1.1949, 1.5717, 1.0036]), indices=tensor([3, 0, 0, 1]))
        
        .. function:: max(input, other, *, out=None) -> Tensor
        
        See :func:`torch.maximum`.
    
    mmaaxx__ppooooll11dd(...)
    
    mmaaxx__ppooooll11dd__wwiitthh__iinnddiicceess(...)
    
    mmaaxx__ppooooll22dd(...)
    
    mmaaxx__ppooooll33dd(...)
    
    mmaaxxiimmuumm(...)
        maximum(input, other, *, out=None) -> Tensor
        
        Computes the element-wise maximum of :attr:`input` and :attr:`other`.
        
        .. note::
            If one of the elements being compared is a NaN, then that element is returned.
            :func:`maximum` is not supported for tensors with complex dtypes.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor((1, 2, -1))
            >>> b = torch.tensor((3, 0, 4))
            >>> torch.maximum(a, b)
            tensor([3, 2, 4])
    
    mmeeaann(...)
        mean(input) -> Tensor
        
        Returns the mean value of all elements in the :attr:`input` tensor.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[ 0.2294, -0.5481,  1.3288]])
            >>> torch.mean(a)
            tensor(0.3367)
        
        .. function:: mean(input, dim, keepdim=False, *, out=None) -> Tensor
        
        Returns the mean value of each row of the :attr:`input` tensor in the given
        dimension :attr:`dim`. If :attr:`dim` is a list of dimensions,
        reduce over all of them.
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[-0.3841,  0.6320,  0.4254, -0.7384],
                    [-0.9644,  1.0131, -0.6549, -1.4279],
                    [-0.2951, -1.3350, -0.7694,  0.5600],
                    [ 1.0842, -0.9580,  0.3623,  0.2343]])
            >>> torch.mean(a, 1)
            tensor([-0.0163, -0.5085, -0.4599,  0.1807])
            >>> torch.mean(a, 1, True)
            tensor([[-0.0163],
                    [-0.5085],
                    [-0.4599],
                    [ 0.1807]])
    
    mmeeddiiaann(...)
        median(input) -> Tensor
        
        Returns the median of the values in :attr:`input`.
        
        .. note::
            The median is not unique for :attr:`input` tensors with an even number
            of elements. In this case the lower of the two medians is returned. To
            compute the mean of both medians, use :func:`torch.quantile` with ``q=0.5`` instead.
        
        .. warning::
            This function produces deterministic (sub)gradients unlike ``median(dim=0)``
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[ 1.5219, -1.5212,  0.2202]])
            >>> torch.median(a)
            tensor(0.2202)
        
        .. function:: median(input, dim=-1, keepdim=False, *, out=None) -> (Tensor, LongTensor)
        
        Returns a namedtuple ``(values, indices)`` where ``values`` contains the median of each row of :attr:`input`
        in the dimension :attr:`dim`, and ``indices`` contains the index of the median values found in the dimension :attr:`dim`.
        
        By default, :attr:`dim` is the last dimension of the :attr:`input` tensor.
        
        If :attr:`keepdim` is ``True``, the output tensors are of the same size
        as :attr:`input` except in the dimension :attr:`dim` where they are of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in
        the outputs tensor having 1 fewer dimension than :attr:`input`.
        
        .. note::
            The median is not unique for :attr:`input` tensors with an even number
            of elements in the dimension :attr:`dim`. In this case the lower of the
            two medians is returned. To compute the mean of both medians in
            :attr:`input`, use :func:`torch.quantile` with ``q=0.5`` instead.
        
        .. warning::
            ``indices`` does not necessarily contain the first occurrence of each
            median value found, unless it is unique.
            The exact implementation details are device-specific.
            Do not expect the same result when run on CPU and GPU in general.
            For the same reason do not expect the gradients to be deterministic.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out ((Tensor, Tensor), optional): The first tensor will be populated with the median values and the second
                                              tensor, which must have dtype long, with their indices in the dimension
                                              :attr:`dim` of :attr:`input`.
        
        Example::
        
            >>> a = torch.randn(4, 5)
            >>> a
            tensor([[ 0.2505, -0.3982, -0.9948,  0.3518, -1.3131],
                    [ 0.3180, -0.6993,  1.0436,  0.0438,  0.2270],
                    [-0.2751,  0.7303,  0.2192,  0.3321,  0.2488],
                    [ 1.0778, -1.9510,  0.7048,  0.4742, -0.7125]])
            >>> torch.median(a, 1)
            torch.return_types.median(values=tensor([-0.3982,  0.2270,  0.2488,  0.4742]), indices=tensor([1, 4, 4, 3]))
    
    mmeerrggee__ttyyppee__ffrroomm__ttyyppee__ccoommmmeenntt(...) method of builtins.PyCapsule instance
        merge_type_from_type_comment(arg0: torch._C._jit_tree_views.Decl, arg1: torch._C._jit_tree_views.Decl, arg2: bool) -> torch._C._jit_tree_views.Decl
    
    mmeesshhggrriidd(*tensors)
        Take :math:`N` tensors, each of which can be either scalar or 1-dimensional
        vector, and create :math:`N` N-dimensional grids, where the :math:`i` :sup:`th` grid is defined by
        expanding the :math:`i` :sup:`th` input over dimensions defined by other inputs.
        
        Args:
            tensors (list of Tensor): list of scalars or 1 dimensional tensors. Scalars will be
                treated as tensors of size :math:`(1,)` automatically
        
        Returns:
            seq (sequence of Tensors): If the input has :math:`k` tensors of size
            :math:`(N_1,), (N_2,), \ldots , (N_k,)`, then the output would also have :math:`k` tensors,
            where all tensors are of size :math:`(N_1, N_2, \ldots , N_k)`.
        
        Example::
        
            >>> x = torch.tensor([1, 2, 3])
            >>> y = torch.tensor([4, 5, 6])
            >>> grid_x, grid_y = torch.meshgrid(x, y)
            >>> grid_x
            tensor([[1, 1, 1],
                    [2, 2, 2],
                    [3, 3, 3]])
            >>> grid_y
            tensor([[4, 5, 6],
                    [4, 5, 6],
                    [4, 5, 6]])
    
    mmiinn(...)
        min(input) -> Tensor
        
        Returns the minimum value of all elements in the :attr:`input` tensor.
        
        .. warning::
            This function produces deterministic (sub)gradients unlike ``min(dim=0)``
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[ 0.6750,  1.0857,  1.7197]])
            >>> torch.min(a)
            tensor(0.6750)
        
        .. function:: min(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor)
        
        Returns a namedtuple ``(values, indices)`` where ``values`` is the minimum
        value of each row of the :attr:`input` tensor in the given dimension
        :attr:`dim`. And ``indices`` is the index location of each minimum value found
        (argmin).
        
        If :attr:`keepdim` is ``True``, the output tensors are of the same size as
        :attr:`input` except in the dimension :attr:`dim` where they are of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in
        the output tensors having 1 fewer dimension than :attr:`input`.
        
        .. note:: If there are multiple minimal values in a reduced row then
                  the indices of the first minimal value are returned.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (tuple, optional): the tuple of two output tensors (min, min_indices)
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[-0.6248,  1.1334, -1.1899, -0.2803],
                    [-1.4644, -0.2635, -0.3651,  0.6134],
                    [ 0.2457,  0.0384,  1.0128,  0.7015],
                    [-0.1153,  2.9849,  2.1458,  0.5788]])
            >>> torch.min(a, 1)
            torch.return_types.min(values=tensor([-1.1899, -1.4644,  0.0384, -0.1153]), indices=tensor([2, 0, 1, 0]))
        
        .. function:: min(input, other, *, out=None) -> Tensor
        
        See :func:`torch.minimum`.
    
    mmiinniimmuumm(...)
        minimum(input, other, *, out=None) -> Tensor
        
        Computes the element-wise minimum of :attr:`input` and :attr:`other`.
        
        .. note::
            If one of the elements being compared is a NaN, then that element is returned.
            :func:`minimum` is not supported for tensors with complex dtypes.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor): the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor((1, 2, -1))
            >>> b = torch.tensor((3, 0, 4))
            >>> torch.minimum(a, b)
            tensor([1, 0, -1])
    
    mmiiooppeenn__bbaattcchh__nnoorrmm(...)
    
    mmiiooppeenn__ccoonnvvoolluuttiioonn(...)
    
    mmiiooppeenn__ccoonnvvoolluuttiioonn__ttrraannssppoossee(...)
    
    mmiiooppeenn__ddeepptthhwwiissee__ccoonnvvoolluuttiioonn(...)
    
    mmiiooppeenn__rrnnnn(...)
    
    mmkkllddnnnn__aaddaappttiivvee__aavvgg__ppooooll22dd(...)
    
    mmkkllddnnnn__ccoonnvvoolluuttiioonn(...)
    
    mmkkllddnnnn__ccoonnvvoolluuttiioonn__bbaacckkwwaarrdd__wweeiigghhttss(...)
    
    mmkkllddnnnn__lliinneeaarr__bbaacckkwwaarrdd__wweeiigghhttss(...)
    
    mmkkllddnnnn__mmaaxx__ppooooll22dd(...)
    
    mmkkllddnnnn__mmaaxx__ppooooll33dd(...)
    
    mmmm(...)
        mm(input, mat2, *, out=None) -> Tensor
        
        Performs a matrix multiplication of the matrices :attr:`input` and :attr:`mat2`.
        
        If :attr:`input` is a :math:`(n \times m)` tensor, :attr:`mat2` is a
        :math:`(m \times p)` tensor, :attr:`out` will be a :math:`(n \times p)` tensor.
        
        .. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.
                  For broadcasting matrix products, see :func:`torch.matmul`.
        
        Supports strided and sparse 2-D tensors as inputs, autograd with
        respect to strided inputs.
        
        This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.
        
        Args:
            input (Tensor): the first matrix to be matrix multiplied
            mat2 (Tensor): the second matrix to be matrix multiplied
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> mat1 = torch.randn(2, 3)
            >>> mat2 = torch.randn(3, 3)
            >>> torch.mm(mat1, mat2)
            tensor([[ 0.4851,  0.5037, -0.3633],
                    [-0.0760, -3.6705,  2.4784]])
    
    mmooddee(...)
        mode(input, dim=-1, keepdim=False, *, out=None) -> (Tensor, LongTensor)
        
        Returns a namedtuple ``(values, indices)`` where ``values`` is the mode
        value of each row of the :attr:`input` tensor in the given dimension
        :attr:`dim`, i.e. a value which appears most often
        in that row, and ``indices`` is the index location of each mode value found.
        
        By default, :attr:`dim` is the last dimension of the :attr:`input` tensor.
        
        If :attr:`keepdim` is ``True``, the output tensors are of the same size as
        :attr:`input` except in the dimension :attr:`dim` where they are of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting
        in the output tensors having 1 fewer dimension than :attr:`input`.
        
        .. note:: This function is not defined for ``torch.cuda.Tensor`` yet.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (tuple, optional): the result tuple of two output tensors (values, indices)
        
        Example::
        
            >>> a = torch.randint(10, (5,))
            >>> a
            tensor([6, 5, 1, 0, 2])
            >>> b = a + (torch.randn(50, 1) * 5).long()
            >>> torch.mode(b, 0)
            torch.return_types.mode(values=tensor([6, 5, 1, 0, 2]), indices=tensor([2, 2, 2, 2, 2]))
    
    mmoovveeaaxxiiss(...)
        moveaxis(input, source, destination) -> Tensor
        
        Alias for :func:`torch.movedim`.
        
        This function is equivalent to NumPy's moveaxis function.
        
        Examples::
        
            >>> t = torch.randn(3,2,1)
            >>> t
            tensor([[[-0.3362],
                    [-0.8437]],
        
                    [[-0.9627],
                    [ 0.1727]],
        
                    [[ 0.5173],
                    [-0.1398]]])
            >>> torch.moveaxis(t, 1, 0).shape
            torch.Size([2, 3, 1])
            >>> torch.moveaxis(t, 1, 0)
            tensor([[[-0.3362],
                    [-0.9627],
                    [ 0.5173]],
        
                    [[-0.8437],
                    [ 0.1727],
                    [-0.1398]]])
            >>> torch.moveaxis(t, (1, 2), (0, 1)).shape
            torch.Size([2, 1, 3])
            >>> torch.moveaxis(t, (1, 2), (0, 1))
            tensor([[[-0.3362, -0.9627,  0.5173]],
        
                    [[-0.8437,  0.1727, -0.1398]]])
    
    mmoovveeddiimm(...)
        movedim(input, source, destination) -> Tensor
        
        Moves the dimension(s) of :attr:`input` at the position(s) in :attr:`source`
        to the position(s) in :attr:`destination`.
        
        Other dimensions of :attr:`input` that are not explicitly moved remain in
        their original order and appear at the positions not specified in :attr:`destination`.
        
        Args:
            input (Tensor): the input tensor.
            source (int or tuple of ints): Original positions of the dims to move. These must be unique.
            destination (int or tuple of ints): Destination positions for each of the original dims. These must also be unique.
        
        Examples::
        
            >>> t = torch.randn(3,2,1)
            >>> t
            tensor([[[-0.3362],
                    [-0.8437]],
        
                    [[-0.9627],
                    [ 0.1727]],
        
                    [[ 0.5173],
                    [-0.1398]]])
            >>> torch.movedim(t, 1, 0).shape
            torch.Size([2, 3, 1])
            >>> torch.movedim(t, 1, 0)
            tensor([[[-0.3362],
                    [-0.9627],
                    [ 0.5173]],
        
                    [[-0.8437],
                    [ 0.1727],
                    [-0.1398]]])
            >>> torch.movedim(t, (1, 2), (0, 1)).shape
            torch.Size([2, 1, 3])
            >>> torch.movedim(t, (1, 2), (0, 1))
            tensor([[[-0.3362, -0.9627,  0.5173]],
        
                    [[-0.8437,  0.1727, -0.1398]]])
    
    mmssoorrtt(...)
        msort(input, *, out=None) -> Tensor
        
        Sorts the elements of the :attr:`input` tensor along its first dimension
        in ascending order by value.
        
        .. note:: `torch.msort(t)` is equivalent to `torch.sort(t, dim=0)[0]`.
                  See also :func:`torch.sort`.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> t = torch.randn(3, 4)
            >>> t
            tensor([[-0.1321,  0.4370, -1.2631, -1.1289],
                    [-2.0527, -1.1250,  0.2275,  0.3077],
                    [-0.0881, -0.1259, -0.5495,  1.0284]])
            >>> torch.msort(t)
            tensor([[-2.0527, -1.1250, -1.2631, -1.1289],
                    [-0.1321, -0.1259, -0.5495,  0.3077],
                    [-0.0881,  0.4370,  0.2275,  1.0284]])
    
    mmuull(...)
        mul(input, other, *, out=None)
        
        Multiplies each element of the input :attr:`input` with the scalar
        :attr:`other` and returns a new resulting tensor.
        
        .. math::
            \text{out}_i = \text{other} \times \text{input}_i
        
        If :attr:`input` is of type `FloatTensor` or `DoubleTensor`, :attr:`other`
        should be a real number, otherwise it should be an integer
        
        Args:
            {input}
            other (Number): the number to be multiplied to each element of :attr:`input`
        
        Keyword args:
            {out}
        
        Example::
        
            >>> a = torch.randn(3)
            >>> a
            tensor([ 0.2015, -0.4255,  2.6087])
            >>> torch.mul(a, 100)
            tensor([  20.1494,  -42.5491,  260.8663])
        
        .. function:: mul(input, other, *, out=None)
        
        Each element of the tensor :attr:`input` is multiplied by the corresponding
        element of the Tensor :attr:`other`. The resulting tensor is returned.
        
        The shapes of :attr:`input` and :attr:`other` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        .. math::
            \text{out}_i = \text{input}_i \times \text{other}_i
        
        
        Args:
            input (Tensor): the first multiplicand tensor
            other (Tensor): the second multiplicand tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 1)
            >>> a
            tensor([[ 1.1207],
                    [-0.3137],
                    [ 0.0700],
                    [ 0.8378]])
            >>> b = torch.randn(1, 4)
            >>> b
            tensor([[ 0.5146,  0.1216, -0.5244,  2.2382]])
            >>> torch.mul(a, b)
            tensor([[ 0.5767,  0.1363, -0.5877,  2.5083],
                    [-0.1614, -0.0382,  0.1645, -0.7021],
                    [ 0.0360,  0.0085, -0.0367,  0.1567],
                    [ 0.4312,  0.1019, -0.4394,  1.8753]])
    
    mmuullttiinnoommiiaall(...)
        multinomial(input, num_samples, replacement=False, *, generator=None, out=None) -> LongTensor
        
        Returns a tensor where each row contains :attr:`num_samples` indices sampled
        from the multinomial probability distribution located in the corresponding row
        of tensor :attr:`input`.
        
        .. note::
            The rows of :attr:`input` do not need to sum to one (in which case we use
            the values as weights), but must be non-negative, finite and have
            a non-zero sum.
        
        Indices are ordered from left to right according to when each was sampled
        (first samples are placed in first column).
        
        If :attr:`input` is a vector, :attr:`out` is a vector of size :attr:`num_samples`.
        
        If :attr:`input` is a matrix with `m` rows, :attr:`out` is an matrix of shape
        :math:`(m \times \text{num\_samples})`.
        
        If replacement is ``True``, samples are drawn with replacement.
        
        If not, they are drawn without replacement, which means that when a
        sample index is drawn for a row, it cannot be drawn again for that row.
        
        .. note::
            When drawn without replacement, :attr:`num_samples` must be lower than
            number of non-zero elements in :attr:`input` (or the min number of non-zero
            elements in each row of :attr:`input` if it is a matrix).
        
        Args:
            input (Tensor): the input tensor containing probabilities
            num_samples (int): number of samples to draw
            replacement (bool, optional): whether to draw with replacement or not
        
        Keyword args:
            generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> weights = torch.tensor([0, 10, 3, 0], dtype=torch.float) # create a tensor of weights
            >>> torch.multinomial(weights, 2)
            tensor([1, 2])
            >>> torch.multinomial(weights, 4) # ERROR!
            RuntimeError: invalid argument 2: invalid multinomial distribution (with replacement=False,
            not enough non-negative category to sample) at ../aten/src/TH/generic/THTensorRandom.cpp:320
            >>> torch.multinomial(weights, 4, replacement=True)
            tensor([ 2,  1,  1,  1])
    
    mmuullttiippllyy(...)
        multiply(input, other, *, out=None)
        
        Alias for :func:`torch.mul`.
    
    mmvv(...)
        mv(input, vec, *, out=None) -> Tensor
        
        Performs a matrix-vector product of the matrix :attr:`input` and the vector
        :attr:`vec`.
        
        If :attr:`input` is a :math:`(n \times m)` tensor, :attr:`vec` is a 1-D tensor of
        size :math:`m`, :attr:`out` will be 1-D of size :math:`n`.
        
        .. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.
        
        Args:
            input (Tensor): matrix to be multiplied
            vec (Tensor): vector to be multiplied
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> mat = torch.randn(2, 3)
            >>> vec = torch.randn(3)
            >>> torch.mv(mat, vec)
            tensor([ 1.0404, -0.6361])
    
    mmvvllggaammmmaa(...)
        mvlgamma(input, p) -> Tensor
        
        Computes the `multivariate log-gamma function
        <https://en.wikipedia.org/wiki/Multivariate_gamma_function>`_) with dimension
        :math:`p` element-wise, given by
        
        .. math::
            \log(\Gamma_{p}(a)) = C + \displaystyle \sum_{i=1}^{p} \log\left(\Gamma\left(a - \frac{i - 1}{2}\right)\right)
        
        where :math:`C = \log(\pi) \times \frac{p (p - 1)}{4}` and :math:`\Gamma(\cdot)` is the Gamma function.
        
        All elements must be greater than :math:`\frac{p - 1}{2}`, otherwise an error would be thrown.
        
        Args:
            input (Tensor): the tensor to compute the multivariate log-gamma function
            p (int): the number of dimensions
        
        Example::
        
            >>> a = torch.empty(2, 3).uniform_(1, 2)
            >>> a
            tensor([[1.6835, 1.8474, 1.1929],
                    [1.0475, 1.7162, 1.4180]])
            >>> torch.mvlgamma(a, 2)
            tensor([[0.3928, 0.4007, 0.7586],
                    [1.0311, 0.3901, 0.5049]])
    
    nnaann__ttoo__nnuumm(...)
        nan_to_num(input, nan=0.0, posinf=None, neginf=None, *, out=None) -> Tensor
        
        Replaces :literal:`NaN`, positive infinity, and negative infinity values in :attr:`input`
        with the values specified by :attr:`nan`, :attr:`posinf`, and :attr:`neginf`, respectively.
        By default, :literal:`NaN`s are replaced with zero, positive infinity is replaced with the
        greatest finite value representable by :attr:`input`'s dtype, and negative infinity
        is replaced with the least finite value representable by :attr:`input`'s dtype.
        
        Args:
            input (Tensor): the input tensor.
            nan (Number, optional): the value to replace :literal:`NaN`\s with. Default is zero.
            posinf (Number, optional): if a Number, the value to replace positive infinity values with.
                If None, positive infinity values are replaced with the greatest finite value representable by :attr:`input`'s dtype.
                Default is None.
            neginf (Number, optional): if a Number, the value to replace negative infinity values with.
                If None, negative infinity values are replaced with the lowest finite value representable by :attr:`input`'s dtype.
                Default is None.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x = torch.tensor([float('nan'), float('inf'), -float('inf'), 3.14])
            >>> torch.nan_to_num(x)
            tensor([ 0.0000e+00,  3.4028e+38, -3.4028e+38,  3.1400e+00])
            >>> torch.nan_to_num(x, nan=2.0)
            tensor([ 2.0000e+00,  3.4028e+38, -3.4028e+38,  3.1400e+00])
            >>> torch.nan_to_num(x, nan=2.0, posinf=1.0)
            tensor([ 2.0000e+00,  1.0000e+00, -3.4028e+38,  3.1400e+00])
    
    nnaann__ttoo__nnuumm__(...)
    
    nnaannmmeeddiiaann(...)
        nanmedian(input) -> Tensor
        
        Returns the median of the values in :attr:`input`, ignoring ``NaN`` values.
        
        This function is identical to :func:`torch.median` when there are no ``NaN`` values in :attr:`input`.
        When :attr:`input` has one or more ``NaN`` values, :func:`torch.median` will always return ``NaN``,
        while this function will return the median of the non-``NaN`` elements in :attr:`input`.
        If all the elements in :attr:`input` are ``NaN`` it will also return ``NaN``.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.tensor([1, float('nan'), 3, 2])
            >>> a.median()
            tensor(nan)
            >>> a.nanmedian()
            tensor(2.)
        
        .. function:: nanmedian(input, dim=-1, keepdim=False, *, out=None) -> (Tensor, LongTensor)
        
        Returns a namedtuple ``(values, indices)`` where ``values`` contains the median of each row of :attr:`input`
        in the dimension :attr:`dim`, ignoring ``NaN`` values, and ``indices`` contains the index of the median values
        found in the dimension :attr:`dim`.
        
        This function is identical to :func:`torch.median` when there are no ``NaN`` values in a reduced row. When a reduced row has
        one or more ``NaN`` values, :func:`torch.median` will always reduce it to ``NaN``, while this function will reduce it to the
        median of the non-``NaN`` elements. If all the elements in a reduced row are ``NaN`` then it will be reduced to ``NaN``, too.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out ((Tensor, Tensor), optional): The first tensor will be populated with the median values and the second
                                              tensor, which must have dtype long, with their indices in the dimension
                                              :attr:`dim` of :attr:`input`.
        
        Example::
        
            >>> a = torch.tensor([[2, 3, 1], [float('nan'), 1, float('nan')]])
            >>> a
            tensor([[2., 3., 1.],
                    [nan, 1., nan]])
            >>> a.median(0)
            torch.return_types.median(values=tensor([nan, 1., nan]), indices=tensor([1, 1, 1]))
            >>> a.nanmedian(0)
            torch.return_types.nanmedian(values=tensor([2., 1., 1.]), indices=tensor([0, 1, 0]))
    
    nnaannqquuaannttiillee(...)
        nanquantile(input, q, dim=None, keepdim=False, *, out=None) -> Tensor
        
        This is a variant of :func:`torch.quantile` that "ignores" ``NaN`` values,
        computing the quantiles :attr:`q` as if ``NaN`` values in :attr:`input` did
        not exist. If all values in a reduced row are ``NaN`` then the quantiles for
        that reduction will be ``NaN``. See the documentation for :func:`torch.quantile`.
        
        Args:
            input (Tensor): the input tensor.
            q (float or Tensor): a scalar or 1D tensor of quantile values in the range [0, 1]
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> t = torch.tensor([float('nan'), 1, 2])
            >>> t.quantile(0.5)
            tensor(nan)
            >>> t.nanquantile(0.5)
            tensor(1.5000)
        
            >>> t = torch.tensor([[float('nan'), float('nan')], [1, 2]])
            >>> t
            tensor([[nan, nan],
                    [1., 2.]])
            >>> t.nanquantile(0.5, dim=0)
            tensor([1., 2.])
            >>> t.nanquantile(0.5, dim=1)
            tensor([   nan, 1.5000])
    
    nnaannssuumm(...)
        nansum(input, *, dtype=None) -> Tensor
        
        Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
        
        Example::
        
            >>> a = torch.tensor([1., 2., float('nan'), 4.])
            >>> torch.nansum(a)
            tensor(7.)
        
        .. function:: nansum(input, dim, keepdim=False, *, dtype=None) -> Tensor
        
        Returns the sum of each row of the :attr:`input` tensor in the given
        dimension :attr:`dim`, treating Not a Numbers (NaNs) as zero.
        If :attr:`dim` is a list of dimensions, reduce over all of them.
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
        
        Example::
        
            >>> torch.nansum(torch.tensor([1., float("nan")]))
            1.0
            >>> a = torch.tensor([[1, 2], [3., float("nan")]])
            >>> torch.nansum(a)
            tensor(6.)
            >>> torch.nansum(a, dim=0)
            tensor([4., 2.])
            >>> torch.nansum(a, dim=1)
            tensor([3., 3.])
    
    nnaarrrrooww(...)
        narrow(input, dim, start, length) -> Tensor
        
        Returns a new tensor that is a narrowed version of :attr:`input` tensor. The
        dimension :attr:`dim` is input from :attr:`start` to :attr:`start + length`. The
        returned tensor and :attr:`input` tensor share the same underlying storage.
        
        Args:
            input (Tensor): the tensor to narrow
            dim (int): the dimension along which to narrow
            start (int): the starting dimension
            length (int): the distance to the ending dimension
        
        Example::
        
            >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
            >>> torch.narrow(x, 0, 0, 2)
            tensor([[ 1,  2,  3],
                    [ 4,  5,  6]])
            >>> torch.narrow(x, 1, 1, 2)
            tensor([[ 2,  3],
                    [ 5,  6],
                    [ 8,  9]])
    
    nnaarrrrooww__ccooppyy(...)
    
    nnaattiivvee__bbaattcchh__nnoorrmm(...)
    
    nnaattiivvee__ggrroouupp__nnoorrmm(...)
    
    nnaattiivvee__llaayyeerr__nnoorrmm(...)
    
    nnaattiivvee__nnoorrmm(...)
    
    nnee(...)
        ne(input, other, *, out=None) -> Tensor
        
        Computes :math:`\text{input} \neq \text{other}` element-wise.
        
        
        The second argument can be a number or a tensor whose shape is
        :ref:`broadcastable <broadcasting-semantics>` with the first argument.
        
        Args:
            input (Tensor): the tensor to compare
            other (Tensor or float): the tensor or value to compare
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Returns:
            A boolean tensor that is True where :attr:`input` is not equal to :attr:`other` and False elsewhere
        
        Example::
        
            >>> torch.ne(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            tensor([[False, True], [True, False]])
    
    nneegg(...)
        neg(input, *, out=None) -> Tensor
        
        Returns a new tensor with the negative of the elements of :attr:`input`.
        
        .. math::
            \text{out} = -1 \times \text{input}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(5)
            >>> a
            tensor([ 0.0090, -0.2262, -0.0682, -0.2866,  0.3940])
            >>> torch.neg(a)
            tensor([-0.0090,  0.2262,  0.0682,  0.2866, -0.3940])
    
    nneegg__(...)
    
    nneeggaattiivvee(...)
        negative(input, *, out=None) -> Tensor
        
        Alias for :func:`torch.neg`
    
    nneeggaattiivvee__(...)
    
    nneexxttaafftteerr(...)
        nextafter(input, other, *, out=None) -> Tensor
        
        Return the next floating-point value after :attr:`input` towards :attr:`other`, elementwise.
        
        The shapes of ``input`` and ``other`` must be
        :ref:`broadcastable <broadcasting-semantics>`.
        
        Args:
            input (Tensor): the first input tensor
            other (Tensor): the second input tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
            >>> eps = torch.finfo(torch.float32).eps
            >>> torch.nextafter(torch.Tensor([1, 2]), torch.Tensor([2, 1])) == torch.Tensor([eps + 1, 2 - eps])
            tensor([True, True])
    
    nnoonnzzeerroo(...)
        nonzero(input, *, out=None, as_tuple=False) -> LongTensor or tuple of LongTensors
        
        .. note::
            :func:`torch.nonzero(..., as_tuple=False) <torch.nonzero>` (default) returns a
            2-D tensor where each row is the index for a nonzero value.
        
            :func:`torch.nonzero(..., as_tuple=True) <torch.nonzero>` returns a tuple of 1-D
            index tensors, allowing for advanced indexing, so ``x[x.nonzero(as_tuple=True)]``
            gives all nonzero values of tensor ``x``. Of the returned tuple, each index tensor
            contains nonzero indices for a certain dimension.
        
            See below for more details on the two behaviors.
        
            When :attr:`input` is on CUDA, :func:`torch.nonzero() <torch.nonzero>` causes
            host-device synchronization.
        
        **When** :attr:`as_tuple` **is ``False`` (default)**:
        
        Returns a tensor containing the indices of all non-zero elements of
        :attr:`input`.  Each row in the result contains the indices of a non-zero
        element in :attr:`input`. The result is sorted lexicographically, with
        the last index changing the fastest (C-style).
        
        If :attr:`input` has :math:`n` dimensions, then the resulting indices tensor
        :attr:`out` is of size :math:`(z \times n)`, where :math:`z` is the total number of
        non-zero elements in the :attr:`input` tensor.
        
        **When** :attr:`as_tuple` **is ``True``**:
        
        Returns a tuple of 1-D tensors, one for each dimension in :attr:`input`,
        each containing the indices (in that dimension) of all non-zero elements of
        :attr:`input` .
        
        If :attr:`input` has :math:`n` dimensions, then the resulting tuple contains :math:`n`
        tensors of size :math:`z`, where :math:`z` is the total number of
        non-zero elements in the :attr:`input` tensor.
        
        As a special case, when :attr:`input` has zero dimensions and a nonzero scalar
        value, it is treated as a one-dimensional tensor with one element.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (LongTensor, optional): the output tensor containing indices
        
        Returns:
            LongTensor or tuple of LongTensor: If :attr:`as_tuple` is ``False``, the output
            tensor containing indices. If :attr:`as_tuple` is ``True``, one 1-D tensor for
            each dimension, containing the indices of each nonzero element along that
            dimension.
        
        Example::
        
            >>> torch.nonzero(torch.tensor([1, 1, 1, 0, 1]))
            tensor([[ 0],
                    [ 1],
                    [ 2],
                    [ 4]])
            >>> torch.nonzero(torch.tensor([[0.6, 0.0, 0.0, 0.0],
            ...                             [0.0, 0.4, 0.0, 0.0],
            ...                             [0.0, 0.0, 1.2, 0.0],
            ...                             [0.0, 0.0, 0.0,-0.4]]))
            tensor([[ 0,  0],
                    [ 1,  1],
                    [ 2,  2],
                    [ 3,  3]])
            >>> torch.nonzero(torch.tensor([1, 1, 1, 0, 1]), as_tuple=True)
            (tensor([0, 1, 2, 4]),)
            >>> torch.nonzero(torch.tensor([[0.6, 0.0, 0.0, 0.0],
            ...                             [0.0, 0.4, 0.0, 0.0],
            ...                             [0.0, 0.0, 1.2, 0.0],
            ...                             [0.0, 0.0, 0.0,-0.4]]), as_tuple=True)
            (tensor([0, 1, 2, 3]), tensor([0, 1, 2, 3]))
            >>> torch.nonzero(torch.tensor(5), as_tuple=True)
            (tensor([0]),)
    
    nnoorrmm(input, p='fro', dim=None, keepdim=False, out=None, dtype=None)
        Returns the matrix norm or vector norm of a given tensor.
        
        .. warning::
        
            torch.norm is deprecated and may be removed in a future PyTorch release.
            Use :func:`torch.linalg.norm` instead, but note that :func:`torch.linalg.norm`
            has a different signature and slightly different behavior that is
            more consistent with NumPy's numpy.linalg.norm.
        
        Args:
            input (Tensor): The input tensor. Its data type must be either a floating
                point or complex type. For complex inputs, the norm is calculated using the
                absolute value of each element. If the input is complex and neither
                :attr:`dtype` nor :attr:`out` is specified, the result's data type will
                be the corresponding floating point type (e.g. float if :attr:`input` is
                complexfloat).
        
            p (int, float, inf, -inf, 'fro', 'nuc', optional): the order of norm. Default: ``'fro'``
                The following norms can be calculated:
        
                ======  ==============  ==========================
                ord     matrix norm     vector norm
                ======  ==============  ==========================
                'fro'   Frobenius norm  --
                'nuc'   nuclear norm    --
                Number  --              sum(abs(x)**ord)**(1./ord)
                ======  ==============  ==========================
        
                The vector norm can be calculated across any number of dimensions.
                The corresponding dimensions of :attr:`input` are flattened into
                one dimension, and the norm is calculated on the flattened
                dimension.
        
                Frobenius norm produces the same result as ``p=2`` in all cases
                except when :attr:`dim` is a list of three or more dims, in which
                case Frobenius norm throws an error.
        
                Nuclear norm can only be calculated across exactly two dimensions.
        
            dim (int, tuple of ints, list of ints, optional):
                Specifies which dimension or dimensions of :attr:`input` to
                calculate the norm across. If :attr:`dim` is ``None``, the norm will
                be calculated across all dimensions of :attr:`input`. If the norm
                type indicated by :attr:`p` does not support the specified number of
                dimensions, an error will occur.
            keepdim (bool, optional): whether the output tensors have :attr:`dim`
                retained or not. Ignored if :attr:`dim` = ``None`` and
                :attr:`out` = ``None``. Default: ``False``
            out (Tensor, optional): the output tensor. Ignored if
                :attr:`dim` = ``None`` and :attr:`out` = ``None``.
            dtype (:class:`torch.dtype`, optional): the desired data type of
                returned tensor. If specified, the input tensor is casted to
                :attr:'dtype' while performing the operation. Default: None.
        
        .. note::
            Even though ``p='fro'`` supports any number of dimensions, the true
            mathematical definition of Frobenius norm only applies to tensors with
            exactly two dimensions. :func:`torch.linalg.norm` with ``ord='fro'`` aligns
            with the mathematical definition, since it can only be applied across
            exactly two dimensions.
        
        Example::
        
            >>> import torch
            >>> a = torch.arange(9, dtype= torch.float) - 4
            >>> b = a.reshape((3, 3))
            >>> torch.norm(a)
            tensor(7.7460)
            >>> torch.norm(b)
            tensor(7.7460)
            >>> torch.norm(a, float('inf'))
            tensor(4.)
            >>> torch.norm(b, float('inf'))
            tensor(4.)
            >>> c = torch.tensor([[ 1, 2, 3],[-1, 1, 4]] , dtype= torch.float)
            >>> torch.norm(c, dim=0)
            tensor([1.4142, 2.2361, 5.0000])
            >>> torch.norm(c, dim=1)
            tensor([3.7417, 4.2426])
            >>> torch.norm(c, p=1, dim=1)
            tensor([6., 6.])
            >>> d = torch.arange(8, dtype= torch.float).reshape(2,2,2)
            >>> torch.norm(d, dim=(1,2))
            tensor([ 3.7417, 11.2250])
            >>> torch.norm(d[0, :, :]), torch.norm(d[1, :, :])
            (tensor(3.7417), tensor(11.2250))
    
    nnoorrmm__eexxcceepptt__ddiimm(...)
    
    nnoorrmmaall(...)
        normal(mean, std, *, generator=None, out=None) -> Tensor
        
        Returns a tensor of random numbers drawn from separate normal distributions
        whose mean and standard deviation are given.
        
        The :attr:`mean` is a tensor with the mean of
        each output element's normal distribution
        
        The :attr:`std` is a tensor with the standard deviation of
        each output element's normal distribution
        
        The shapes of :attr:`mean` and :attr:`std` don't need to match, but the
        total number of elements in each tensor need to be the same.
        
        .. note:: When the shapes do not match, the shape of :attr:`mean`
                  is used as the shape for the returned output tensor
        
        Args:
            mean (Tensor): the tensor of per-element means
            std (Tensor): the tensor of per-element standard deviations
        
        Keyword args:
            generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.normal(mean=torch.arange(1., 11.), std=torch.arange(1, 0, -0.1))
            tensor([  1.0425,   3.5672,   2.7969,   4.2925,   4.7229,   6.2134,
                      8.0505,   8.1408,   9.0563,  10.0566])
        
        .. function:: normal(mean=0.0, std, *, out=None) -> Tensor
        
        Similar to the function above, but the means are shared among all drawn
        elements.
        
        Args:
            mean (float, optional): the mean for all distributions
            std (Tensor): the tensor of per-element standard deviations
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.normal(mean=0.5, std=torch.arange(1., 6.))
            tensor([-1.2793, -1.0732, -2.0687,  5.1177, -1.2303])
        
        .. function:: normal(mean, std=1.0, *, out=None) -> Tensor
        
        Similar to the function above, but the standard-deviations are shared among
        all drawn elements.
        
        Args:
            mean (Tensor): the tensor of per-element means
            std (float, optional): the standard deviation for all distributions
        
        Keyword args:
            out (Tensor, optional): the output tensor
        
        Example::
        
            >>> torch.normal(mean=torch.arange(1., 6.))
            tensor([ 1.1552,  2.6148,  2.6535,  5.8318,  4.2361])
        
        .. function:: normal(mean, std, size, *, out=None) -> Tensor
        
        Similar to the function above, but the means and standard deviations are shared
        among all drawn elements. The resulting tensor has size given by :attr:`size`.
        
        Args:
            mean (float): the mean for all distributions
            std (float): the standard deviation for all distributions
            size (int...): a sequence of integers defining the shape of the output tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.normal(2, 3, size=(1, 4))
            tensor([[-1.3987, -1.9544,  3.6048,  0.7909]])
    
    nnoott__eeqquuaall(...)
        not_equal(input, other, *, out=None) -> Tensor
        
        Alias for :func:`torch.ne`.
    
    nnuucclleeaarr__nnoorrmm(...)
    
    nnuummeell(...)
        numel(input) -> int
        
        Returns the total number of elements in the :attr:`input` tensor.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> a = torch.randn(1, 2, 3, 4, 5)
            >>> torch.numel(a)
            120
            >>> a = torch.zeros(4,4)
            >>> torch.numel(a)
            16
    
    oonneess(...)
        ones(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a tensor filled with the scalar value `1`, with the shape defined
        by the variable argument :attr:`size`.
        
        Args:
            size (int...): a sequence of integers defining the shape of the output tensor.
                Can be a variable number of arguments or a collection like a list or tuple.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.ones(2, 3)
            tensor([[ 1.,  1.,  1.],
                    [ 1.,  1.,  1.]])
        
            >>> torch.ones(5)
            tensor([ 1.,  1.,  1.,  1.,  1.])
    
    oonneess__lliikkee(...)
        ones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor
        
        Returns a tensor filled with the scalar value `1`, with the same size as
        :attr:`input`. ``torch.ones_like(input)`` is equivalent to
        ``torch.ones(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.
        
        .. warning::
            As of 0.4, this function does not support an :attr:`out` keyword. As an alternative,
            the old ``torch.ones_like(input, out=output)`` is equivalent to
            ``torch.ones(input.size(), out=output)``.
        
        Args:
            input (Tensor): the size of :attr:`input` will determine size of the output tensor.
        
        Keyword arguments:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.
                Default: if ``None``, defaults to the dtype of :attr:`input`.
            layout (:class:`torch.layout`, optional): the desired layout of returned tensor.
                Default: if ``None``, defaults to the layout of :attr:`input`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, defaults to the device of :attr:`input`.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.preserve_format``.
        
        Example::
        
            >>> input = torch.empty(2, 3)
            >>> torch.ones_like(input)
            tensor([[ 1.,  1.,  1.],
                    [ 1.,  1.,  1.]])
    
    oorrggqqrr(...)
        orgqr(input, input2) -> Tensor
        
        Computes the orthogonal matrix `Q` of a QR factorization, from the `(input, input2)`
        tuple returned by :func:`torch.geqrf`.
        
        This directly calls the underlying LAPACK function `?orgqr`.
        See `LAPACK documentation for orgqr`_ for further details.
        
        Args:
            input (Tensor): the `a` from :func:`torch.geqrf`.
            input2 (Tensor): the `tau` from :func:`torch.geqrf`.
        
        .. _LAPACK documentation for orgqr:
            https://software.intel.com/en-us/mkl-developer-reference-c-orgqr
    
    oorrmmqqrr(...)
        ormqr(input, input2, input3, left=True, transpose=False) -> Tensor
        
        Multiplies `mat` (given by :attr:`input3`) by the orthogonal `Q` matrix of the QR factorization
        formed by :func:`torch.geqrf` that is represented by `(a, tau)` (given by (:attr:`input`, :attr:`input2`)).
        
        This directly calls the underlying LAPACK function `?ormqr`.
        See `LAPACK documentation for ormqr`_ for further details.
        
        Args:
            input (Tensor): the `a` from :func:`torch.geqrf`.
            input2 (Tensor): the `tau` from :func:`torch.geqrf`.
            input3 (Tensor): the matrix to be multiplied.
        
        .. _LAPACK documentation for ormqr:
            https://software.intel.com/en-us/mkl-developer-reference-c-ormqr
    
    oouutteerr(...)
        outer(input, vec2, *, out=None) -> Tensor
        
        Outer product of :attr:`input` and :attr:`vec2`.
        If :attr:`input` is a vector of size :math:`n` and :attr:`vec2` is a vector of
        size :math:`m`, then :attr:`out` must be a matrix of size :math:`(n \times m)`.
        
        .. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.
        
        Args:
            input (Tensor): 1-D input vector
            vec2 (Tensor): 1-D input vector
        
        Keyword args:
            out (Tensor, optional): optional output matrix
        
        Example::
        
            >>> v1 = torch.arange(1., 5.)
            >>> v2 = torch.arange(1., 4.)
            >>> torch.outer(v1, v2)
            tensor([[  1.,   2.,   3.],
                    [  2.,   4.,   6.],
                    [  3.,   6.,   9.],
                    [  4.,   8.,  12.]])
    
    ppaaiirrwwiissee__ddiissttaannccee(...)
    
    ppaarrssee__iirr(...) method of builtins.PyCapsule instance
        parse_ir(arg0: str) -> torch::jit::Graph
    
    ppaarrssee__sscchheemmaa(...) method of builtins.PyCapsule instance
        parse_schema(arg0: str) -> c10::FunctionSchema
    
    ppaarrssee__ttyyppee__ccoommmmeenntt(...) method of builtins.PyCapsule instance
        parse_type_comment(arg0: str) -> torch._C._jit_tree_views.Decl
    
    ppddiisstt(...)
        pdist(input, p=2) -> Tensor
        
        Computes the p-norm distance between every pair of row vectors in the input.
        This is identical to the upper triangular portion, excluding the diagonal, of
        `torch.norm(input[:, None] - input, dim=2, p=p)`. This function will be faster
        if the rows are contiguous.
        
        If input has shape :math:`N \times M` then the output will have shape
        :math:`\frac{1}{2} N (N - 1)`.
        
        This function is equivalent to `scipy.spatial.distance.pdist(input,
        'minkowski', p=p)` if :math:`p \in (0, \infty)`. When :math:`p = 0` it is
        equivalent to `scipy.spatial.distance.pdist(input, 'hamming') * M`.
        When :math:`p = \infty`, the closest scipy function is
        `scipy.spatial.distance.pdist(xn, lambda x, y: np.abs(x - y).max())`.
        
        Args:
            input: input tensor of shape :math:`N \times M`.
            p: p value for the p-norm distance to calculate between each vector pair
                :math:`\in [0, \infty]`.
    
    ppiinnvveerrssee(...)
        pinverse(input, rcond=1e-15) -> Tensor
        
        Calculates the pseudo-inverse (also known as the Moore-Penrose inverse) of a 2D tensor.
        Please look at `Moore-Penrose inverse`_ for more details
        
        .. note:: :func:`torch.pinverse` is deprecated. Please use :func:`torch.linalg.pinv` instead
                  which includes new parameters :attr:`hermitian` and :attr:`out`.
        
        .. note::
            This method is implemented using the Singular Value Decomposition.
        
        .. note::
            The pseudo-inverse is not necessarily a continuous function in the elements of the matrix `[1]`_.
            Therefore, derivatives are not always existent, and exist for a constant rank only `[2]`_.
            However, this method is backprop-able due to the implementation by using SVD results, and
            could be unstable. Double-backward will also be unstable due to the usage of SVD internally.
            See :meth:`~torch.svd` for more details.
        
        .. note::
            Supports real and complex inputs.
            Batched version for complex inputs is only supported on the CPU.
        
        Arguments:
            input (Tensor): The input tensor of size :math:`(*, m, n)` where :math:`*` is
                zero or more batch dimensions.
            rcond (float, optional): A floating point value to determine the cutoff for
                small singular values. Default: ``1e-15``.
        
        Returns:
            The pseudo-inverse of :attr:`input` of dimensions :math:`(*, n, m)`
        
        Example::
        
            >>> input = torch.randn(3, 5)
            >>> input
            tensor([[ 0.5495,  0.0979, -1.4092, -0.1128,  0.4132],
                    [-1.1143, -0.3662,  0.3042,  1.6374, -0.9294],
                    [-0.3269, -0.5745, -0.0382, -0.5922, -0.6759]])
            >>> torch.pinverse(input)
            tensor([[ 0.0600, -0.1933, -0.2090],
                    [-0.0903, -0.0817, -0.4752],
                    [-0.7124, -0.1631, -0.2272],
                    [ 0.1356,  0.3933, -0.5023],
                    [-0.0308, -0.1725, -0.5216]])
            >>> # Batched pinverse example
            >>> a = torch.randn(2,6,3)
            >>> b = torch.pinverse(a)
            >>> torch.matmul(b, a)
            tensor([[[ 1.0000e+00,  1.6391e-07, -1.1548e-07],
                    [ 8.3121e-08,  1.0000e+00, -2.7567e-07],
                    [ 3.5390e-08,  1.4901e-08,  1.0000e+00]],
        
                    [[ 1.0000e+00, -8.9407e-08,  2.9802e-08],
                    [-2.2352e-07,  1.0000e+00,  1.1921e-07],
                    [ 0.0000e+00,  8.9407e-08,  1.0000e+00]]])
        
        .. _Moore-Penrose inverse: https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse
        
        .. _[1]: https://epubs.siam.org/doi/10.1137/0117004
        
        .. _[2]: https://www.jstor.org/stable/2156365
    
    ppiixxeell__sshhuuffffllee(...)
        pixel_shuffle(input, upscale_factor) -> Tensor
        
        Rearranges elements in a tensor of shape :math:`(*, C \times r^2, H, W)` to a
        tensor of shape :math:`(*, C, H \times r, W \times r)`, where r is the :attr:`upscale_factor`.
        
        See :class:`~torch.nn.PixelShuffle` for details.
        
        Args:
            input (Tensor): the input tensor
            upscale_factor (int): factor to increase spatial resolution by
        
        Examples::
        
            >>> input = torch.randn(1, 9, 4, 4)
            >>> output = torch.nn.functional.pixel_shuffle(input, 3)
            >>> print(output.size())
            torch.Size([1, 1, 12, 12])
    
    ppiixxeell__uunnsshhuuffffllee(...)
        pixel_unshuffle(input, downscale_factor) -> Tensor
        
        Reverses the :class:`~torch.nn.PixelShuffle` operation by rearranging elements in a
        tensor of shape :math:`(*, C, H \times r, W \times r)` to a tensor of shape
        :math:`(*, C \times r^2, H, W)`, where r is the :attr:`downscale_factor`.
        
        See :class:`~torch.nn.PixelUnshuffle` for details.
        
        Args:
            input (Tensor): the input tensor
            downscale_factor (int): factor to increase spatial resolution by
        
        Examples::
        
            >>> input = torch.randn(1, 1, 12, 12)
            >>> output = torch.nn.functional.pixel_unshuffle(input, 3)
            >>> print(output.size())
            torch.Size([1, 9, 4, 4])
    
    ppooiissssoonn(...)
        poisson(input, generator=None) -> Tensor
        
        Returns a tensor of the same size as :attr:`input` with each element
        sampled from a Poisson distribution with rate parameter given by the corresponding
        element in :attr:`input` i.e.,
        
        .. math::
            \text{out}_i \sim \text{Poisson}(\text{input}_i)
        
        Args:
            input (Tensor): the input tensor containing the rates of the Poisson distribution
        
        Keyword args:
            generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling
        
        Example::
        
            >>> rates = torch.rand(4, 4) * 5  # rate parameter between 0 and 5
            >>> torch.poisson(rates)
            tensor([[9., 1., 3., 5.],
                    [8., 6., 6., 0.],
                    [0., 4., 5., 3.],
                    [2., 1., 4., 2.]])
    
    ppooiissssoonn__nnllll__lloossss(...)
    
    ppoollaarr(...)
        polar(abs, angle, *, out=None) -> Tensor
        
        Constructs a complex tensor whose elements are Cartesian coordinates
        corresponding to the polar coordinates with absolute value :attr:`abs` and angle
        :attr:`angle`.
        
        .. math::
            \text{out} = \text{abs} \cdot \cos(\text{angle}) + \text{abs} \cdot \sin(\text{angle}) \cdot j
        
        Args:
            abs (Tensor): The absolute value the complex tensor. Must be float or
                double.
            angle (Tensor): The angle of the complex tensor. Must be same dtype as
                :attr:`abs`.
        
        Keyword args:
            out (Tensor): If the inputs are ``torch.float32``, must be
                ``torch.complex64``. If the inputs are ``torch.float64``, must be
                ``torch.complex128``.
        
        Example::
            >>> import numpy as np
            >>> abs = torch.tensor([1, 2], dtype=torch.float64)
            >>> angle = torch.tensor([np.pi / 2, 5 * np.pi / 4], dtype=torch.float64)
            >>> z = torch.polar(abs, angle)
            >>> z
            tensor([(0.0000+1.0000j), (-1.4142-1.4142j)], dtype=torch.complex128)
    
    ppoollyyggaammmmaa(...)
        polygamma(n, input, *, out=None) -> Tensor
        
        Computes the :math:`n^{th}` derivative of the digamma function on :attr:`input`.
        :math:`n \geq 0` is called the order of the polygamma function.
        
        .. math::
            \psi^{(n)}(x) = \frac{d^{(n)}}{dx^{(n)}} \psi(x)
        
        .. note::
            This function is implemented only for nonnegative integers :math:`n \geq 0`.
        
        Args:
            n (int): the order of the polygamma function
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
            >>> a = torch.tensor([1, 0.5])
            >>> torch.polygamma(1, a)
            tensor([1.64493, 4.9348])
            >>> torch.polygamma(2, a)
            tensor([ -2.4041, -16.8288])
            >>> torch.polygamma(3, a)
            tensor([ 6.4939, 97.4091])
            >>> torch.polygamma(4, a)
            tensor([ -24.8863, -771.4742])
    
    ppooww(...)
        pow(input, exponent, *, out=None) -> Tensor
        
        Takes the power of each element in :attr:`input` with :attr:`exponent` and
        returns a tensor with the result.
        
        :attr:`exponent` can be either a single ``float`` number or a `Tensor`
        with the same number of elements as :attr:`input`.
        
        When :attr:`exponent` is a scalar value, the operation applied is:
        
        .. math::
            \text{out}_i = x_i ^ \text{exponent}
        
        When :attr:`exponent` is a tensor, the operation applied is:
        
        .. math::
            \text{out}_i = x_i ^ {\text{exponent}_i}
        
        When :attr:`exponent` is a tensor, the shapes of :attr:`input`
        and :attr:`exponent` must be :ref:`broadcastable <broadcasting-semantics>`.
        
        Args:
            input (Tensor): the input tensor.
            exponent (float or tensor): the exponent value
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.4331,  1.2475,  0.6834, -0.2791])
            >>> torch.pow(a, 2)
            tensor([ 0.1875,  1.5561,  0.4670,  0.0779])
            >>> exp = torch.arange(1., 5.)
        
            >>> a = torch.arange(1., 5.)
            >>> a
            tensor([ 1.,  2.,  3.,  4.])
            >>> exp
            tensor([ 1.,  2.,  3.,  4.])
            >>> torch.pow(a, exp)
            tensor([   1.,    4.,   27.,  256.])
        
        .. function:: pow(self, exponent, *, out=None) -> Tensor
        
        :attr:`self` is a scalar ``float`` value, and :attr:`exponent` is a tensor.
        The returned tensor :attr:`out` is of the same shape as :attr:`exponent`
        
        The operation applied is:
        
        .. math::
            \text{out}_i = \text{self} ^ {\text{exponent}_i}
        
        Args:
            self (float): the scalar base value for the power operation
            exponent (Tensor): the exponent tensor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> exp = torch.arange(1., 5.)
            >>> base = 2
            >>> torch.pow(base, exp)
            tensor([  2.,   4.,   8.,  16.])
    
    pprreelluu(...)
    
    pprroodd(...)
        prod(input, *, dtype=None) -> Tensor
        
        Returns the product of all elements in the :attr:`input` tensor.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[-0.8020,  0.5428, -1.5854]])
            >>> torch.prod(a)
            tensor(0.6902)
        
        .. function:: prod(input, dim, keepdim=False, *, dtype=None) -> Tensor
        
        Returns the product of each row of the :attr:`input` tensor in the given
        dimension :attr:`dim`.
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in
        the output tensor having 1 fewer dimension than :attr:`input`.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
        
        Example::
        
            >>> a = torch.randn(4, 2)
            >>> a
            tensor([[ 0.5261, -0.3837],
                    [ 1.1857, -0.2498],
                    [-1.1646,  0.0705],
                    [ 1.1131, -1.0629]])
            >>> torch.prod(a, 1)
            tensor([-0.2018, -0.2962, -0.0821, -1.1831])
    
    pprroommoottee__ttyyppeess(...)
        promote_types(type1, type2) -> dtype
        
        Returns the :class:`torch.dtype` with the smallest size and scalar kind that is
        not smaller nor of lower kind than either `type1` or `type2`. See type promotion
        :ref:`documentation <type-promotion-doc>` for more information on the type
        promotion logic.
        
        Args:
            type1 (:class:`torch.dtype`)
            type2 (:class:`torch.dtype`)
        
        Example::
        
            >>> torch.promote_types(torch.int32, torch.float32)
            torch.float32
            >>> torch.promote_types(torch.uint8, torch.long)
            torch.long
    
    qq__ppeerr__cchhaannnneell__aaxxiiss(...)
    
    qq__ppeerr__cchhaannnneell__ssccaalleess(...)
    
    qq__ppeerr__cchhaannnneell__zzeerroo__ppooiinnttss(...)
    
    qq__ssccaallee(...)
    
    qq__zzeerroo__ppooiinntt(...)
    
    qqrr(...)
        qr(input, some=True, *, out=None) -> (Tensor, Tensor)
        
        Computes the QR decomposition of a matrix or a batch of matrices :attr:`input`,
        and returns a namedtuple (Q, R) of tensors such that :math:`\text{input} = Q R`
        with :math:`Q` being an orthogonal matrix or batch of orthogonal matrices and
        :math:`R` being an upper triangular matrix or batch of upper triangular matrices.
        
        If :attr:`some` is ``True``, then this function returns the thin (reduced) QR factorization.
        Otherwise, if :attr:`some` is ``False``, this function returns the complete QR factorization.
        
        .. warning:: ``torch.qr`` is deprecated. Please use :func:`torch.linalg.qr`
                     instead.
        
                     **Differences with** ``torch.linalg.qr``:
        
                     * ``torch.linalg.qr`` takes a string parameter ``mode`` instead of ``some``:
        
                       - ``some=True`` is equivalent of ``mode='reduced'``: both are the
                         default
        
                       - ``some=False`` is equivalent of ``mode='complete'``.
        
        
        .. warning::
                  If you plan to backpropagate through QR, note that the current backward implementation
                  is only well-defined when the first :math:`\min(input.size(-1), input.size(-2))`
                  columns of :attr:`input` are linearly independent.
                  This behavior will propably change once QR supports pivoting.
        
        .. note:: This function uses LAPACK for CPU inputs and MAGMA for CUDA inputs,
                  and may produce different (valid) decompositions on different device types
                  or different platforms.
        
        Args:
            input (Tensor): the input tensor of size :math:`(*, m, n)` where `*` is zero or more
                        batch dimensions consisting of matrices of dimension :math:`m \times n`.
            some (bool, optional): Set to ``True`` for reduced QR decomposition and ``False`` for
                        complete QR decomposition. If `k = min(m, n)` then:
        
                          * ``some=True`` : returns `(Q, R)` with dimensions (m, k), (k, n) (default)
        
                          * ``'some=False'``: returns `(Q, R)` with dimensions (m, m), (m, n)
        
        Keyword args:
            out (tuple, optional): tuple of `Q` and `R` tensors.
                        The dimensions of `Q` and `R` are detailed in the description of :attr:`some` above.
        
        Example::
        
            >>> a = torch.tensor([[12., -51, 4], [6, 167, -68], [-4, 24, -41]])
            >>> q, r = torch.qr(a)
            >>> q
            tensor([[-0.8571,  0.3943,  0.3314],
                    [-0.4286, -0.9029, -0.0343],
                    [ 0.2857, -0.1714,  0.9429]])
            >>> r
            tensor([[ -14.0000,  -21.0000,   14.0000],
                    [   0.0000, -175.0000,   70.0000],
                    [   0.0000,    0.0000,  -35.0000]])
            >>> torch.mm(q, r).round()
            tensor([[  12.,  -51.,    4.],
                    [   6.,  167.,  -68.],
                    [  -4.,   24.,  -41.]])
            >>> torch.mm(q.t(), q).round()
            tensor([[ 1.,  0.,  0.],
                    [ 0.,  1., -0.],
                    [ 0., -0.,  1.]])
            >>> a = torch.randn(3, 4, 5)
            >>> q, r = torch.qr(a, some=False)
            >>> torch.allclose(torch.matmul(q, r), a)
            True
            >>> torch.allclose(torch.matmul(q.transpose(-2, -1), q), torch.eye(5))
            True
    
    qquuaannttiillee(...)
        quantile(input, q) -> Tensor
        
        Returns the q-th quantiles of all elements in the :attr:`input` tensor, doing a linear
        interpolation when the q-th quantile lies between two data points.
        
        Args:
            input (Tensor): the input tensor.
            q (float or Tensor): a scalar or 1D tensor of quantile values in the range [0, 1]
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[ 0.0700, -0.5446,  0.9214]])
            >>> q = torch.tensor([0, 0.5, 1])
            >>> torch.quantile(a, q)
            tensor([-0.5446,  0.0700,  0.9214])
        
        .. function:: quantile(input, q, dim=None, keepdim=False, *, out=None) -> Tensor
        
        Returns the q-th quantiles of each row of the :attr:`input` tensor along the dimension
        :attr:`dim`, doing a linear interpolation when the q-th quantile lies between two
        data points. By default, :attr:`dim` is ``None`` resulting in the :attr:`input` tensor
        being flattened before computation.
        
        If :attr:`keepdim` is ``True``, the output dimensions are of the same size as :attr:`input`
        except in the dimensions being reduced (:attr:`dim` or all if :attr:`dim` is ``None``) where they
        have size 1. Otherwise, the dimensions being reduced are squeezed (see :func:`torch.squeeze`).
        If :attr:`q` is a 1D tensor, an extra dimension is prepended to the output tensor with the same
        size as :attr:`q` which represents the quantiles.
        
        Args:
            input (Tensor): the input tensor.
            q (float or Tensor): a scalar or 1D tensor of quantile values in the range [0, 1]
            dim (int): the dimension to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(2, 3)
            >>> a
            tensor([[ 0.0795, -1.2117,  0.9765],
                    [ 1.1707,  0.6706,  0.4884]])
            >>> q = torch.tensor([0.25, 0.5, 0.75])
            >>> torch.quantile(a, q, dim=1, keepdim=True)
            tensor([[[-0.5661],
                    [ 0.5795]],
        
                    [[ 0.0795],
                    [ 0.6706]],
        
                    [[ 0.5280],
                    [ 0.9206]]])
            >>> torch.quantile(a, q, dim=1, keepdim=True).shape
            torch.Size([3, 2, 1])
    
    qquuaannttiizzee__ppeerr__cchhaannnneell(...)
        quantize_per_channel(input, scales, zero_points, axis, dtype) -> Tensor
        
        Converts a float tensor to a per-channel quantized tensor with given scales and zero points.
        
        Arguments:
            input (Tensor): float tensor to quantize
            scales (Tensor): float 1D tensor of scales to use, size should match ``input.size(axis)``
            zero_points (int): integer 1D tensor of offset to use, size should match ``input.size(axis)``
            axis (int): dimension on which apply per-channel quantization
            dtype (:class:`torch.dtype`): the desired data type of returned tensor.
                Has to be one of the quantized dtypes: ``torch.quint8``, ``torch.qint8``, ``torch.qint32``
        
        Returns:
            Tensor: A newly quantized tensor
        
        Example::
        
            >>> x = torch.tensor([[-1.0, 0.0], [1.0, 2.0]])
            >>> torch.quantize_per_channel(x, torch.tensor([0.1, 0.01]), torch.tensor([10, 0]), 0, torch.quint8)
            tensor([[-1.,  0.],
                    [ 1.,  2.]], size=(2, 2), dtype=torch.quint8,
                   quantization_scheme=torch.per_channel_affine,
                   scale=tensor([0.1000, 0.0100], dtype=torch.float64),
                   zero_point=tensor([10,  0]), axis=0)
            >>> torch.quantize_per_channel(x, torch.tensor([0.1, 0.01]), torch.tensor([10, 0]), 0, torch.quint8).int_repr()
            tensor([[  0,  10],
                    [100, 200]], dtype=torch.uint8)
    
    qquuaannttiizzee__ppeerr__tteennssoorr(...)
        quantize_per_tensor(input, scale, zero_point, dtype) -> Tensor
        
        Converts a float tensor to a quantized tensor with given scale and zero point.
        
        Arguments:
            input (Tensor): float tensor to quantize
            scale (float): scale to apply in quantization formula
            zero_point (int): offset in integer value that maps to float zero
            dtype (:class:`torch.dtype`): the desired data type of returned tensor.
                Has to be one of the quantized dtypes: ``torch.quint8``, ``torch.qint8``, ``torch.qint32``
        
        Returns:
            Tensor: A newly quantized tensor
        
        Example::
        
            >>> torch.quantize_per_tensor(torch.tensor([-1.0, 0.0, 1.0, 2.0]), 0.1, 10, torch.quint8)
            tensor([-1.,  0.,  1.,  2.], size=(4,), dtype=torch.quint8,
                   quantization_scheme=torch.per_tensor_affine, scale=0.1, zero_point=10)
            >>> torch.quantize_per_tensor(torch.tensor([-1.0, 0.0, 1.0, 2.0]), 0.1, 10, torch.quint8).int_repr()
            tensor([ 0, 10, 20, 30], dtype=torch.uint8)
    
    qquuaannttiizzeedd__bbaattcchh__nnoorrmm(...)
    
    qquuaannttiizzeedd__ggrruu__cceellll(...)
    
    qquuaannttiizzeedd__llssttmm__cceellll(...)
    
    qquuaannttiizzeedd__mmaaxx__ppooooll11dd(...)
    
    qquuaannttiizzeedd__mmaaxx__ppooooll22dd(...)
    
    qquuaannttiizzeedd__rrnnnn__rreelluu__cceellll(...)
    
    qquuaannttiizzeedd__rrnnnn__ttaannhh__cceellll(...)
    
    rraadd22ddeegg(...)
        rad2deg(input, *, out=None) -> Tensor
        
        Returns a new tensor with each of the elements of :attr:`input`
        converted from angles in radians to degrees.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword arguments:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([[3.142, -3.142], [6.283, -6.283], [1.570, -1.570]])
            >>> torch.rad2deg(a)
            tensor([[ 180.0233, -180.0233],
                    [ 359.9894, -359.9894],
                    [  89.9544,  -89.9544]])
    
    rraadd22ddeegg__(...)
    
    rraanndd(...)
        rand(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a tensor filled with random numbers from a uniform distribution
        on the interval :math:`[0, 1)`
        
        The shape of the tensor is defined by the variable argument :attr:`size`.
        
        Args:
            size (int...): a sequence of integers defining the shape of the output tensor.
                Can be a variable number of arguments or a collection like a list or tuple.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.rand(4)
            tensor([ 0.5204,  0.2503,  0.3525,  0.5673])
            >>> torch.rand(2, 3)
            tensor([[ 0.8237,  0.5781,  0.6879],
                    [ 0.3816,  0.7249,  0.0998]])
    
    rraanndd__lliikkee(...)
        rand_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor
        
        Returns a tensor with the same size as :attr:`input` that is filled with
        random numbers from a uniform distribution on the interval :math:`[0, 1)`.
        ``torch.rand_like(input)`` is equivalent to
        ``torch.rand(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.
        
        Args:
            input (Tensor): the size of :attr:`input` will determine size of the output tensor.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.
                Default: if ``None``, defaults to the dtype of :attr:`input`.
            layout (:class:`torch.layout`, optional): the desired layout of returned tensor.
                Default: if ``None``, defaults to the layout of :attr:`input`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, defaults to the device of :attr:`input`.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.preserve_format``.
    
    rraannddiinntt(...)
        randint(low=0, high, size, \*, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a tensor filled with random integers generated uniformly
        between :attr:`low` (inclusive) and :attr:`high` (exclusive).
        
        The shape of the tensor is defined by the variable argument :attr:`size`.
        
        .. note::
            With the global dtype default (``torch.float32``), this function returns
            a tensor with dtype ``torch.int64``.
        
        Args:
            low (int, optional): Lowest integer to be drawn from the distribution. Default: 0.
            high (int): One above the highest integer to be drawn from the distribution.
            size (tuple): a tuple defining the shape of the output tensor.
        
        Keyword args:
            generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.randint(3, 5, (3,))
            tensor([4, 3, 4])
        
        
            >>> torch.randint(10, (2, 2))
            tensor([[0, 2],
                    [5, 5]])
        
        
            >>> torch.randint(3, 10, (2, 2))
            tensor([[4, 5],
                    [6, 7]])
    
    rraannddiinntt__lliikkee(...)
        randint_like(input, low=0, high, \*, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor
        
        Returns a tensor with the same shape as Tensor :attr:`input` filled with
        random integers generated uniformly between :attr:`low` (inclusive) and
        :attr:`high` (exclusive).
        
        .. note:
            With the global dtype default (``torch.float32``), this function returns
            a tensor with dtype ``torch.int64``.
        
        Args:
            input (Tensor): the size of :attr:`input` will determine size of the output tensor.
            low (int, optional): Lowest integer to be drawn from the distribution. Default: 0.
            high (int): One above the highest integer to be drawn from the distribution.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.
                Default: if ``None``, defaults to the dtype of :attr:`input`.
            layout (:class:`torch.layout`, optional): the desired layout of returned tensor.
                Default: if ``None``, defaults to the layout of :attr:`input`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, defaults to the device of :attr:`input`.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.preserve_format``.
    
    rraannddnn(...)
        randn(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a tensor filled with random numbers from a normal distribution
        with mean `0` and variance `1` (also called the standard normal
        distribution).
        
        .. math::
            \text{out}_{i} \sim \mathcal{N}(0, 1)
        
        The shape of the tensor is defined by the variable argument :attr:`size`.
        
        Args:
            size (int...): a sequence of integers defining the shape of the output tensor.
                Can be a variable number of arguments or a collection like a list or tuple.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.randn(4)
            tensor([-2.1436,  0.9966,  2.3426, -0.6366])
            >>> torch.randn(2, 3)
            tensor([[ 1.5954,  2.8929, -1.0923],
                    [ 1.1719, -0.4709, -0.1996]])
    
    rraannddnn__lliikkee(...)
        randn_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor
        
        Returns a tensor with the same size as :attr:`input` that is filled with
        random numbers from a normal distribution with mean 0 and variance 1.
        ``torch.randn_like(input)`` is equivalent to
        ``torch.randn(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.
        
        Args:
            input (Tensor): the size of :attr:`input` will determine size of the output tensor.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.
                Default: if ``None``, defaults to the dtype of :attr:`input`.
            layout (:class:`torch.layout`, optional): the desired layout of returned tensor.
                Default: if ``None``, defaults to the layout of :attr:`input`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, defaults to the device of :attr:`input`.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.preserve_format``.
    
    rraannddppeerrmm(...)
        randperm(n, *, generator=None, out=None, dtype=torch.int64,layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor
        
        Returns a random permutation of integers from ``0`` to ``n - 1``.
        
        Args:
            n (int): the upper bound (exclusive)
        
        Keyword args:
            generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: ``torch.int64``.
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            pin_memory (bool, optional): If set, returned tensor would be allocated in
                the pinned memory. Works only for CPU tensors. Default: ``False``.
        
        Example::
        
            >>> torch.randperm(4)
            tensor([2, 1, 0, 3])
    
    rraannggee(...)
        range(start=0, end, step=1, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a 1-D tensor of size :math:`\left\lfloor \frac{\text{end} - \text{start}}{\text{step}} \right\rfloor + 1`
        with values from :attr:`start` to :attr:`end` with step :attr:`step`. Step is
        the gap between two values in the tensor.
        
        .. math::
            \text{out}_{i+1} = \text{out}_i + \text{step}.
        
        .. warning::
            This function is deprecated and will be removed in a future release because its behavior is inconsistent with
            Python's range builtin. Instead, use :func:`torch.arange`, which produces values in [start, end).
        
        Args:
            start (float): the starting value for the set of points. Default: ``0``.
            end (float): the ending value for the set of points
            step (float): the gap between each pair of adjacent points. Default: ``1``.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`). If `dtype` is not given, infer the data type from the other input
                arguments. If any of `start`, `end`, or `stop` are floating-point, the
                `dtype` is inferred to be the default dtype, see
                :meth:`~torch.get_default_dtype`. Otherwise, the `dtype` is inferred to
                be `torch.int64`.
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.range(1, 4)
            tensor([ 1.,  2.,  3.,  4.])
            >>> torch.range(1, 4, 0.5)
            tensor([ 1.0000,  1.5000,  2.0000,  2.5000,  3.0000,  3.5000,  4.0000])
    
    rraavveell(...)
        ravel(input) -> Tensor
        
        Return a contiguous flattened tensor. A copy is made only if needed.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> t = torch.tensor([[[1, 2],
            ...                    [3, 4]],
            ...                   [[5, 6],
            ...                    [7, 8]]])
            >>> torch.ravel(t)
            tensor([1, 2, 3, 4, 5, 6, 7, 8])
    
    rreeaall(...)
        real(input) -> Tensor
        
        Returns a new tensor containing real values of the :attr:`self` tensor.
        The returned tensor and :attr:`self` share the same underlying storage.
        
        .. warning::
            :func:`real` is only supported for tensors with complex dtypes.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
            >>> x=torch.randn(4, dtype=torch.cfloat)
            >>> x
            tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])
            >>> x.real
            tensor([ 0.3100, -0.5445, -1.6492, -0.0638])
    
    rreecciipprrooccaall(...)
        reciprocal(input, *, out=None) -> Tensor
        
        Returns a new tensor with the reciprocal of the elements of :attr:`input`
        
        .. note::
            Unlike NumPy's reciprocal, torch.reciprocal supports integral inputs. Integral
            inputs to reciprocal are automatically :ref:`promoted <type-promotion-doc>` to
            the default scalar type.
        
        .. math::
            \text{out}_{i} = \frac{1}{\text{input}_{i}}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.4595, -2.1219, -1.4314,  0.7298])
            >>> torch.reciprocal(a)
            tensor([-2.1763, -0.4713, -0.6986,  1.3702])
    
    rreecciipprrooccaall__(...)
    
    rreelluu(...)
    
    rreelluu__(...)
        relu_(input) -> Tensor
        
        In-place version of :func:`~relu`.
    
    rreemmaaiinnddeerr(...)
        remainder(input, other, *, out=None) -> Tensor
        
        Computes the element-wise remainder of division.
        
        The dividend and divisor may contain both for integer and floating point
        numbers. The remainder has the same sign as the divisor :attr:`other`.
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`,
        :ref:`type promotion <type-promotion-doc>`, and integer and float inputs.
        
        .. note::
            Complex inputs are not supported. In some cases, it is not mathematically
            possible to satisfy the definition of a modulo operation with complex numbers.
            See :func:`torch.fmod` for how division by zero is handled.
        
        Args:
            input (Tensor): the dividend
            other (Tensor or Scalar): the divisor
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.remainder(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)
            tensor([ 1.,  0.,  1.,  1.,  0.,  1.])
            >>> torch.remainder(torch.tensor([1, 2, 3, 4, 5]), 1.5)
            tensor([ 1.0000,  0.5000,  0.0000,  1.0000,  0.5000])
        
        .. seealso::
        
                :func:`torch.fmod`, which computes the element-wise remainder of
                division equivalently to the C library function ``fmod()``.
    
    rreennoorrmm(...)
        renorm(input, p, dim, maxnorm, *, out=None) -> Tensor
        
        Returns a tensor where each sub-tensor of :attr:`input` along dimension
        :attr:`dim` is normalized such that the `p`-norm of the sub-tensor is lower
        than the value :attr:`maxnorm`
        
        .. note:: If the norm of a row is lower than `maxnorm`, the row is unchanged
        
        Args:
            input (Tensor): the input tensor.
            p (float): the power for the norm computation
            dim (int): the dimension to slice over to get the sub-tensors
            maxnorm (float): the maximum norm to keep each sub-tensor under
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x = torch.ones(3, 3)
            >>> x[1].fill_(2)
            tensor([ 2.,  2.,  2.])
            >>> x[2].fill_(3)
            tensor([ 3.,  3.,  3.])
            >>> x
            tensor([[ 1.,  1.,  1.],
                    [ 2.,  2.,  2.],
                    [ 3.,  3.,  3.]])
            >>> torch.renorm(x, 1, 0, 5)
            tensor([[ 1.0000,  1.0000,  1.0000],
                    [ 1.6667,  1.6667,  1.6667],
                    [ 1.6667,  1.6667,  1.6667]])
    
    rreeppeeaatt__iinntteerrlleeaavvee(...)
        repeat_interleave(input, repeats, dim=None) -> Tensor
        
        Repeat elements of a tensor.
        
        .. warning::
        
            This is different from :meth:`torch.Tensor.repeat` but similar to ``numpy.repeat``.
        
        Args:
            input (Tensor): the input tensor.
            repeats (Tensor or int): The number of repetitions for each element.
                repeats is broadcasted to fit the shape of the given axis.
            dim (int, optional): The dimension along which to repeat values.
                By default, use the flattened input array, and return a flat output
                array.
        
        Returns:
            Tensor: Repeated tensor which has the same shape as input, except along the given axis.
        
        Example::
        
            >>> x = torch.tensor([1, 2, 3])
            >>> x.repeat_interleave(2)
            tensor([1, 1, 2, 2, 3, 3])
            >>> y = torch.tensor([[1, 2], [3, 4]])
            >>> torch.repeat_interleave(y, 2)
            tensor([1, 1, 2, 2, 3, 3, 4, 4])
            >>> torch.repeat_interleave(y, 3, dim=1)
            tensor([[1, 1, 1, 2, 2, 2],
                    [3, 3, 3, 4, 4, 4]])
            >>> torch.repeat_interleave(y, torch.tensor([1, 2]), dim=0)
            tensor([[1, 2],
                    [3, 4],
                    [3, 4]])
        
        .. function:: repeat_interleave(repeats) -> Tensor
        
        If the `repeats` is `tensor([n1, n2, n3, ...])`, then the output will be
        `tensor([0, 0, ..., 1, 1, ..., 2, 2, ..., ...])` where `0` appears `n1` times,
        `1` appears `n2` times, `2` appears `n3` times, etc.
    
    rreesshhaappee(...)
        reshape(input, shape) -> Tensor
        
        Returns a tensor with the same data and number of elements as :attr:`input`,
        but with the specified shape. When possible, the returned tensor will be a view
        of :attr:`input`. Otherwise, it will be a copy. Contiguous inputs and inputs
        with compatible strides can be reshaped without copying, but you should not
        depend on the copying vs. viewing behavior.
        
        See :meth:`torch.Tensor.view` on when it is possible to return a view.
        
        A single dimension may be -1, in which case it's inferred from the remaining
        dimensions and the number of elements in :attr:`input`.
        
        Args:
            input (Tensor): the tensor to be reshaped
            shape (tuple of ints): the new shape
        
        Example::
        
            >>> a = torch.arange(4.)
            >>> torch.reshape(a, (2, 2))
            tensor([[ 0.,  1.],
                    [ 2.,  3.]])
            >>> b = torch.tensor([[0, 1], [2, 3]])
            >>> torch.reshape(b, (-1,))
            tensor([ 0,  1,  2,  3])
    
    rreessiizzee__aass__(...)
    
    rreessuulltt__ttyyppee(...)
        result_type(tensor1, tensor2) -> dtype
        
        Returns the :class:`torch.dtype` that would result from performing an arithmetic
        operation on the provided input tensors. See type promotion :ref:`documentation <type-promotion-doc>`
        for more information on the type promotion logic.
        
        Args:
            tensor1 (Tensor or Number): an input tensor or number
            tensor2 (Tensor or Number): an input tensor or number
        
        Example::
        
            >>> torch.result_type(torch.tensor([1, 2], dtype=torch.int), 1.0)
            torch.float32
            >>> torch.result_type(torch.tensor([1, 2], dtype=torch.uint8), torch.tensor(1))
            torch.uint8
    
    rrnnnn__rreelluu(...)
    
    rrnnnn__rreelluu__cceellll(...)
    
    rrnnnn__ttaannhh(...)
    
    rrnnnn__ttaannhh__cceellll(...)
    
    rroollll(...)
        roll(input, shifts, dims=None) -> Tensor
        
        Roll the tensor along the given dimension(s). Elements that are shifted beyond the
        last position are re-introduced at the first position. If a dimension is not
        specified, the tensor will be flattened before rolling and then restored
        to the original shape.
        
        Args:
            input (Tensor): the input tensor.
            shifts (int or tuple of ints): The number of places by which the elements
                of the tensor are shifted. If shifts is a tuple, dims must be a tuple of
                the same size, and each dimension will be rolled by the corresponding
                value
            dims (int or tuple of ints): Axis along which to roll
        
        Example::
        
            >>> x = torch.tensor([1, 2, 3, 4, 5, 6, 7, 8]).view(4, 2)
            >>> x
            tensor([[1, 2],
                    [3, 4],
                    [5, 6],
                    [7, 8]])
            >>> torch.roll(x, 1, 0)
            tensor([[7, 8],
                    [1, 2],
                    [3, 4],
                    [5, 6]])
            >>> torch.roll(x, -1, 0)
            tensor([[3, 4],
                    [5, 6],
                    [7, 8],
                    [1, 2]])
            >>> torch.roll(x, shifts=(2, 1), dims=(0, 1))
            tensor([[6, 5],
                    [8, 7],
                    [2, 1],
                    [4, 3]])
    
    rroott9900(...)
        rot90(input, k, dims) -> Tensor
        
        Rotate a n-D tensor by 90 degrees in the plane specified by dims axis.
        Rotation direction is from the first towards the second axis if k > 0, and from the second towards the first for k < 0.
        
        Args:
            input (Tensor): the input tensor.
            k (int): number of times to rotate
            dims (a list or tuple): axis to rotate
        
        Example::
        
            >>> x = torch.arange(4).view(2, 2)
            >>> x
            tensor([[0, 1],
                    [2, 3]])
            >>> torch.rot90(x, 1, [0, 1])
            tensor([[1, 3],
                    [0, 2]])
        
            >>> x = torch.arange(8).view(2, 2, 2)
            >>> x
            tensor([[[0, 1],
                     [2, 3]],
        
                    [[4, 5],
                     [6, 7]]])
            >>> torch.rot90(x, 1, [1, 2])
            tensor([[[1, 3],
                     [0, 2]],
        
                    [[5, 7],
                     [4, 6]]])
    
    rroouunndd(...)
        round(input, *, out=None) -> Tensor
        
        Returns a new tensor with each of the elements of :attr:`input` rounded
        to the closest integer.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.9920,  0.6077,  0.9734, -1.0362])
            >>> torch.round(a)
            tensor([ 1.,  1.,  1., -1.])
    
    rroouunndd__(...)
    
    rrooww__ssttaacckk(...)
        row_stack(tensors, *, out=None) -> Tensor
        
        Alias of :func:`torch.vstack`.
    
    rrrreelluu(...)
    
    rrrreelluu__(...)
        rrelu_(input, lower=1./8, upper=1./3, training=False) -> Tensor
        
        In-place version of :func:`~rrelu`.
    
    rrssqqrrtt(...)
        rsqrt(input, *, out=None) -> Tensor
        
        Returns a new tensor with the reciprocal of the square-root of each of
        the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \frac{1}{\sqrt{\text{input}_{i}}}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.0370,  0.2970,  1.5420, -0.9105])
            >>> torch.rsqrt(a)
            tensor([    nan,  1.8351,  0.8053,     nan])
    
    rrssqqrrtt__(...)
    
    rrssuubb(...)
    
    ssaaddddmmmm(...)
    
    ssaavvee(obj, f: Union[str, os.PathLike, BinaryIO, IO[bytes]], pickle_module=<module 'pickle' from '/usr/lib/python3.8/pickle.py'>, pickle_protocol=2, _use_new_zipfile_serialization=True) -> None
        Saves an object to a disk file.
        
        See also: `saving-loading-tensors`
        
        Args:
            obj: saved object
            f: a file-like object (has to implement write and flush) or a string or
               os.PathLike object containing a file name
            pickle_module: module used for pickling metadata and objects
            pickle_protocol: can be specified to override the default protocol
        
        .. note::
            A common PyTorch convention is to save tensors using .pt file extension.
        
        .. note::
            PyTorch preserves storage sharing across serialization. See
            `preserve-storage-sharing` for more details.
        
        .. note::
            The 1.6 release of PyTorch switched ``torch.save`` to use a new
            zipfile-based file format. ``torch.load`` still retains the ability to
            load files in the old format. If for any reason you want ``torch.save``
            to use the old format, pass the kwarg ``_use_new_zipfile_serialization=False``.
        
        Example:
            >>> # Save to file
            >>> x = torch.tensor([0, 1, 2, 3, 4])
            >>> torch.save(x, 'tensor.pt')
            >>> # Save to io.BytesIO buffer
            >>> buffer = io.BytesIO()
            >>> torch.save(x, buffer)
    
    ssccaallaarr__tteennssoorr(...)
    
    ssccaatttteerr(...)
        scatter(input, dim, index, src) -> Tensor
        
        Out-of-place version of :meth:`torch.Tensor.scatter_`
    
    ssccaatttteerr__aadddd(...)
        scatter_add(input, dim, index, src) -> Tensor
        
        Out-of-place version of :meth:`torch.Tensor.scatter_add_`
    
    sseeaarrcchhssoorrtteedd(...)
        searchsorted(sorted_sequence, values, *, out_int32=False, right=False, out=None) -> Tensor
        
        Find the indices from the *innermost* dimension of :attr:`sorted_sequence` such that, if the
        corresponding values in :attr:`values` were inserted before the indices, the order of the
        corresponding *innermost* dimension within :attr:`sorted_sequence` would be preserved.
        Return a new tensor with the same size as :attr:`values`. If :attr:`right` is False (default),
        then the left boundary of :attr:`sorted_sequence` is closed. More formally, the returned index
        satisfies the following rules:
        
        .. list-table::
           :widths: 12 10 78
           :header-rows: 1
        
           * - :attr:`sorted_sequence`
             - :attr:`right`
             - *returned index satisfies*
           * - 1-D
             - False
             - ``sorted_sequence[i-1] < values[m][n]...[l][x] <= sorted_sequence[i]``
           * - 1-D
             - True
             - ``sorted_sequence[i-1] <= values[m][n]...[l][x] < sorted_sequence[i]``
           * - N-D
             - False
             - ``sorted_sequence[m][n]...[l][i-1] < values[m][n]...[l][x] <= sorted_sequence[m][n]...[l][i]``
           * - N-D
             - True
             - ``sorted_sequence[m][n]...[l][i-1] <= values[m][n]...[l][x] < sorted_sequence[m][n]...[l][i]``
        
        Args:
            sorted_sequence (Tensor): N-D or 1-D tensor, containing monotonically increasing sequence on the *innermost*
                                      dimension.
            values (Tensor or Scalar): N-D tensor or a Scalar containing the search value(s).
        
        Keyword args:
            out_int32 (bool, optional): indicate the output data type. torch.int32 if True, torch.int64 otherwise.
                                        Default value is False, i.e. default output data type is torch.int64.
            right (bool, optional): if False, return the first suitable location that is found. If True, return the
                                    last such index. If no suitable index found, return 0 for non-numerical value
                                    (eg. nan, inf) or the size of *innermost* dimension within :attr:`sorted_sequence`
                                    (one pass the last index of the *innermost* dimension). In other words, if False,
                                    gets the lower bound index for each value in :attr:`values` on the corresponding
                                    *innermost* dimension of the :attr:`sorted_sequence`. If True, gets the upper
                                    bound index instead. Default value is False.
            out (Tensor, optional): the output tensor, must be the same size as :attr:`values` if provided.
        
        .. note:: If your use case is always 1-D sorted sequence, :func:`torch.bucketize` is preferred,
                  because it has fewer dimension checks resulting in slightly better performance.
        
        
        Example::
        
            >>> sorted_sequence = torch.tensor([[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]])
            >>> sorted_sequence
            tensor([[ 1,  3,  5,  7,  9],
                    [ 2,  4,  6,  8, 10]])
            >>> values = torch.tensor([[3, 6, 9], [3, 6, 9]])
            >>> values
            tensor([[3, 6, 9],
                    [3, 6, 9]])
            >>> torch.searchsorted(sorted_sequence, values)
            tensor([[1, 3, 4],
                    [1, 2, 4]])
            >>> torch.searchsorted(sorted_sequence, values, right=True)
            tensor([[2, 3, 5],
                    [1, 3, 4]])
        
            >>> sorted_sequence_1d = torch.tensor([1, 3, 5, 7, 9])
            >>> sorted_sequence_1d
            tensor([1, 3, 5, 7, 9])
            >>> torch.searchsorted(sorted_sequence_1d, values)
            tensor([[1, 3, 4],
                    [1, 3, 4]])
    
    sseeeedd() -> int
        Sets the seed for generating random numbers to a non-deterministic
        random number. Returns a 64 bit number used to seed the RNG.
    
    sseelleecctt(...)
    
    sseelluu(...)
    
    sseelluu__(...)
        selu_(input) -> Tensor
        
        In-place version of :func:`~selu`.
    
    sseett__aannoommaallyy__eennaabblleedd(...)
    
    sseett__aauuttooccaasstt__eennaabblleedd(...)
    
    sseett__ddeeffaauulltt__tteennssoorr__ttyyppee(t)
        Sets the default ``torch.Tensor`` type to floating point tensor type
        ``t``. This type will also be used as default floating point type for
        type inference in :func:`torch.tensor`.
        
        The default floating point tensor type is initially ``torch.FloatTensor``.
        
        Args:
            t (type or string): the floating point tensor type or its name
        
        Example::
        
            >>> torch.tensor([1.2, 3]).dtype    # initial default for floating point is torch.float32
            torch.float32
            >>> torch.set_default_tensor_type(torch.DoubleTensor)
            >>> torch.tensor([1.2, 3]).dtype    # a new floating point tensor
            torch.float64
    
    sseett__ddeetteerrmmiinniissttiicc(d)
        This function is deprecated and will be removed in a future release.
        Please use :func:`torch.use_deterministic_algorithms` instead.
    
    sseett__fflluusshh__ddeennoorrmmaall(...)
        set_flush_denormal(mode) -> bool
        
        Disables denormal floating numbers on CPU.
        
        Returns ``True`` if your system supports flushing denormal numbers and it
        successfully configures flush denormal mode.  :meth:`~torch.set_flush_denormal`
        is only supported on x86 architectures supporting SSE3.
        
        Args:
            mode (bool): Controls whether to enable flush denormal mode or not
        
        Example::
        
            >>> torch.set_flush_denormal(True)
            True
            >>> torch.tensor([1e-323], dtype=torch.float64)
            tensor([ 0.], dtype=torch.float64)
            >>> torch.set_flush_denormal(False)
            True
            >>> torch.tensor([1e-323], dtype=torch.float64)
            tensor(9.88131e-324 *
                   [ 1.0000], dtype=torch.float64)
    
    sseett__nnuumm__iinntteerroopp__tthhrreeaaddss(...)
        set_num_interop_threads(int)
        
        Sets the number of threads used for interop parallelism
        (e.g. in JIT interpreter) on CPU.
        
        .. warning::
            Can only be called once and before any inter-op parallel work
            is started (e.g. JIT execution).
    
    sseett__nnuumm__tthhrreeaaddss(...)
        set_num_threads(int)
        
        Sets the number of threads used for intraop parallelism on CPU.
        
        .. warning::
            To ensure that the correct number of threads is used, set_num_threads
            must be called before running eager, JIT or autograd code.
    
    sseett__pprriinnttooppttiioonnss(precision=None, threshold=None, edgeitems=None, linewidth=None, profile=None, sci_mode=None)
        Set options for printing. Items shamelessly taken from NumPy
        
        Args:
            precision: Number of digits of precision for floating point output
                (default = 4).
            threshold: Total number of array elements which trigger summarization
                rather than full `repr` (default = 1000).
            edgeitems: Number of array items in summary at beginning and end of
                each dimension (default = 3).
            linewidth: The number of characters per line for the purpose of
                inserting line breaks (default = 80). Thresholded matrices will
                ignore this parameter.
            profile: Sane defaults for pretty printing. Can override with any of
                the above options. (any one of `default`, `short`, `full`)
            sci_mode: Enable (True) or disable (False) scientific notation. If
                None (default) is specified, the value is defined by
                `torch._tensor_str._Formatter`. This value is automatically chosen
                by the framework.
    
    sseett__rrnngg__ssttaattee(new_state) -> None
        Sets the random number generator state.
        
        Args:
            new_state (torch.ByteTensor): The desired state
    
    ssggnn(...)
        sgn(input, *, out=None) -> Tensor
        
        For complex tensors, this function returns a new tensor whose elemants have the same angle as that of the
        elements of :attr:`input` and absolute value 1. For a non-complex tensor, this function
        returns the signs of the elements of :attr:`input` (see :func:`torch.sign`).
        
        :math:`\text{out}_{i} = 0`, if :math:`|{\text{{input}}_i}| == 0`
        :math:`\text{out}_{i} = \frac{{\text{{input}}_i}}{|{\text{{input}}_i}|}`, otherwise
        
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
          out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x=torch.tensor([3+4j, 7-24j, 0, 1+2j])
            >>> x.sgn()
            tensor([0.6000+0.8000j, 0.2800-0.9600j, 0.0000+0.0000j, 0.4472+0.8944j])
    
    ssiiggmmooiidd(...)
        sigmoid(input, *, out=None) -> Tensor
        
        Returns a new tensor with the sigmoid of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \frac{1}{1 + e^{-\text{input}_{i}}}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.9213,  1.0887, -0.8858, -1.7683])
            >>> torch.sigmoid(a)
            tensor([ 0.7153,  0.7481,  0.2920,  0.1458])
    
    ssiiggmmooiidd__(...)
    
    ssiiggnn(...)
        sign(input, *, out=None) -> Tensor
        
        Returns a new tensor with the signs of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \operatorname{sgn}(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([0.7, -1.2, 0., 2.3])
            >>> a
            tensor([ 0.7000, -1.2000,  0.0000,  2.3000])
            >>> torch.sign(a)
            tensor([ 1., -1.,  0.,  1.])
    
    ssiiggnnbbiitt(...)
        signbit(input, *, out=None) -> Tensor
        
        Tests if each element of :attr:`input` has its sign bit set (is less than zero) or not.
        
        Args:
          input (Tensor): the input tensor.
        
        Keyword args:
          out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([0.7, -1.2, 0., 2.3])
            >>> torch.signbit(a)
            tensor([ False, True,  False,  False])
    
    ssiinn(...)
        sin(input, *, out=None) -> Tensor
        
        Returns a new tensor with the sine of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \sin(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-0.5461,  0.1347, -2.7266, -0.2746])
            >>> torch.sin(a)
            tensor([-0.5194,  0.1343, -0.4032, -0.2711])
    
    ssiinn__(...)
    
    ssiinncc(...)
        sinc(input, *, out=None) -> Tensor
        
        Computes the normalized sinc of :attr:`input.`
        
        .. math::
            \text{out}_{i} =
            \begin{cases}
              1, & \text{if}\ \text{input}_{i}=0 \\
              \sin(\pi \text{input}_{i}) / (\pi \text{input}_{i}), & \text{otherwise}
            \end{cases}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.2252, -0.2948,  1.0267, -1.1566])
            >>> torch.sinc(a)
            tensor([ 0.9186,  0.8631, -0.0259, -0.1300])
    
    ssiinncc__(...)
    
    ssiinnhh(...)
        sinh(input, *, out=None) -> Tensor
        
        Returns a new tensor with the hyperbolic sine of the elements of
        :attr:`input`.
        
        .. math::
            \text{out}_{i} = \sinh(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.5380, -0.8632, -0.1265,  0.9399])
            >>> torch.sinh(a)
            tensor([ 0.5644, -0.9744, -0.1268,  1.0845])
        
        .. note::
           When :attr:`input` is on the CPU, the implementation of torch.sinh may use
           the Sleef library, which rounds very large results to infinity or negative
           infinity. See `here <https://sleef.org/purec.xhtml>`_ for details.
    
    ssiinnhh__(...)
    
    ssllooggddeett(...)
        slogdet(input) -> (Tensor, Tensor)
        
        Calculates the sign and log absolute value of the determinant(s) of a square matrix or batches of square matrices.
        
        .. note:: :func:`torch.slogdet` is deprecated. Please use :func:`torch.linalg.slogdet` instead.
        
        .. note::
            If ``input`` has zero determinant, this returns ``(0, -inf)``.
        
        .. note::
            Backward through :meth:`slogdet` internally uses SVD results when :attr:`input`
            is not invertible. In this case, double backward through :meth:`slogdet`
            will be unstable in when :attr:`input` doesn't have distinct singular values.
            See :meth:`~torch.svd` for details.
        
        Arguments:
            input (Tensor): the input tensor of size ``(*, n, n)`` where ``*`` is zero or more
                        batch dimensions.
        
        Returns:
            A namedtuple (sign, logabsdet) containing the sign of the determinant, and the log
            value of the absolute determinant.
        
        Example::
        
            >>> A = torch.randn(3, 3)
            >>> A
            tensor([[ 0.0032, -0.2239, -1.1219],
                    [-0.6690,  0.1161,  0.4053],
                    [-1.6218, -0.9273, -0.0082]])
            >>> torch.det(A)
            tensor(-0.7576)
            >>> torch.logdet(A)
            tensor(nan)
            >>> torch.slogdet(A)
            torch.return_types.slogdet(sign=tensor(-1.), logabsdet=tensor(-0.2776))
    
    ssmmmm(...)
        smm(input, mat) -> Tensor
        
        Performs a matrix multiplication of the sparse matrix :attr:`input`
        with the dense matrix :attr:`mat`.
        
        Args:
            input (Tensor): a sparse matrix to be matrix multiplied
            mat (Tensor): a dense matrix to be matrix multiplied
    
    ssooffttmmaaxx(...)
    
    ssoollvvee(...)
        torch.solve(input, A, *, out=None) -> (Tensor, Tensor)
        
        This function returns the solution to the system of linear
        equations represented by :math:`AX = B` and the LU factorization of
        A, in order as a namedtuple `solution, LU`.
        
        `LU` contains `L` and `U` factors for LU factorization of `A`.
        
        `torch.solve(B, A)` can take in 2D inputs `B, A` or inputs that are
        batches of 2D matrices. If the inputs are batches, then returns
        batched outputs `solution, LU`.
        
        Supports real-valued and complex-valued inputs.
        
        .. note::
        
            Irrespective of the original strides, the returned matrices
            `solution` and `LU` will be transposed, i.e. with strides like
            `B.contiguous().transpose(-1, -2).stride()` and
            `A.contiguous().transpose(-1, -2).stride()` respectively.
        
        Args:
            input (Tensor): input matrix :math:`B` of size :math:`(*, m, k)` , where :math:`*`
                        is zero or more batch dimensions.
            A (Tensor): input square matrix of size :math:`(*, m, m)`, where
                        :math:`*` is zero or more batch dimensions.
        
        Keyword args:
            out ((Tensor, Tensor), optional): optional output tuple.
        
        Example::
        
            >>> A = torch.tensor([[6.80, -2.11,  5.66,  5.97,  8.23],
            ...                   [-6.05, -3.30,  5.36, -4.44,  1.08],
            ...                   [-0.45,  2.58, -2.70,  0.27,  9.04],
            ...                   [8.32,  2.71,  4.35,  -7.17,  2.14],
            ...                   [-9.67, -5.14, -7.26,  6.08, -6.87]]).t()
            >>> B = torch.tensor([[4.02,  6.19, -8.22, -7.57, -3.03],
            ...                   [-1.56,  4.00, -8.67,  1.75,  2.86],
            ...                   [9.81, -4.09, -4.57, -8.61,  8.99]]).t()
            >>> X, LU = torch.solve(B, A)
            >>> torch.dist(B, torch.mm(A, X))
            tensor(1.00000e-06 *
                   7.0977)
        
            >>> # Batched solver example
            >>> A = torch.randn(2, 3, 1, 4, 4)
            >>> B = torch.randn(2, 3, 1, 4, 6)
            >>> X, LU = torch.solve(B, A)
            >>> torch.dist(B, A.matmul(X))
            tensor(1.00000e-06 *
               3.6386)
    
    ssoorrtt(...)
        sort(input, dim=-1, descending=False, *, out=None) -> (Tensor, LongTensor)
        
        Sorts the elements of the :attr:`input` tensor along a given dimension
        in ascending order by value.
        
        If :attr:`dim` is not given, the last dimension of the `input` is chosen.
        
        If :attr:`descending` is ``True`` then the elements are sorted in descending
        order by value.
        
        A namedtuple of (values, indices) is returned, where the `values` are the
        sorted values and `indices` are the indices of the elements in the original
        `input` tensor.
        
        Args:
            input (Tensor): the input tensor.
            dim (int, optional): the dimension to sort along
            descending (bool, optional): controls the sorting order (ascending or descending)
        
        Keyword args:
            out (tuple, optional): the output tuple of (`Tensor`, `LongTensor`) that can
                be optionally given to be used as output buffers
        
        Example::
        
            >>> x = torch.randn(3, 4)
            >>> sorted, indices = torch.sort(x)
            >>> sorted
            tensor([[-0.2162,  0.0608,  0.6719,  2.3332],
                    [-0.5793,  0.0061,  0.6058,  0.9497],
                    [-0.5071,  0.3343,  0.9553,  1.0960]])
            >>> indices
            tensor([[ 1,  0,  2,  3],
                    [ 3,  1,  0,  2],
                    [ 0,  3,  1,  2]])
        
            >>> sorted, indices = torch.sort(x, 0)
            >>> sorted
            tensor([[-0.5071, -0.2162,  0.6719, -0.5793],
                    [ 0.0608,  0.0061,  0.9497,  0.3343],
                    [ 0.6058,  0.9553,  1.0960,  2.3332]])
            >>> indices
            tensor([[ 2,  0,  0,  1],
                    [ 0,  1,  1,  2],
                    [ 1,  2,  2,  0]])
    
    ssppaarrssee__ccoooo__tteennssoorr(...)
        sparse_coo_tensor(indices, values, size=None, *, dtype=None, device=None, requires_grad=False) -> Tensor
        
        Constructs a :ref:`sparse tensor in COO(rdinate) format
        <sparse-coo-docs>` with specified values at the given
        :attr:`indices`.
        
        .. note::
        
           This function returns an :ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.
        
        Args:
            indices (array_like): Initial data for the tensor. Can be a list, tuple,
                NumPy ``ndarray``, scalar, and other types. Will be cast to a :class:`torch.LongTensor`
                internally. The indices are the coordinates of the non-zero values in the matrix, and thus
                should be two-dimensional where the first dimension is the number of tensor dimensions and
                the second dimension is the number of non-zero values.
            values (array_like): Initial values for the tensor. Can be a list, tuple,
                NumPy ``ndarray``, scalar, and other types.
            size (list, tuple, or :class:`torch.Size`, optional): Size of the sparse tensor. If not
                provided the size will be inferred as the minimum size big enough to hold all non-zero
                elements.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if None, infers data type from :attr:`values`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if None, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        
        Example::
        
            >>> i = torch.tensor([[0, 1, 1],
            ...                   [2, 0, 2]])
            >>> v = torch.tensor([3, 4, 5], dtype=torch.float32)
            >>> torch.sparse_coo_tensor(i, v, [2, 4])
            tensor(indices=tensor([[0, 1, 1],
                                   [2, 0, 2]]),
                   values=tensor([3., 4., 5.]),
                   size=(2, 4), nnz=3, layout=torch.sparse_coo)
        
            >>> torch.sparse_coo_tensor(i, v)  # Shape inference
            tensor(indices=tensor([[0, 1, 1],
                                   [2, 0, 2]]),
                   values=tensor([3., 4., 5.]),
                   size=(2, 3), nnz=3, layout=torch.sparse_coo)
        
            >>> torch.sparse_coo_tensor(i, v, [2, 4],
            ...                         dtype=torch.float64,
            ...                         device=torch.device('cuda:0'))
            tensor(indices=tensor([[0, 1, 1],
                                   [2, 0, 2]]),
                   values=tensor([3., 4., 5.]),
                   device='cuda:0', size=(2, 4), nnz=3, dtype=torch.float64,
                   layout=torch.sparse_coo)
        
            # Create an empty sparse tensor with the following invariants:
            #   1. sparse_dim + dense_dim = len(SparseTensor.shape)
            #   2. SparseTensor._indices().shape = (sparse_dim, nnz)
            #   3. SparseTensor._values().shape = (nnz, SparseTensor.shape[sparse_dim:])
            #
            # For instance, to create an empty sparse tensor with nnz = 0, dense_dim = 0 and
            # sparse_dim = 1 (hence indices is a 2D tensor of shape = (1, 0))
            >>> S = torch.sparse_coo_tensor(torch.empty([1, 0]), [], [1])
            tensor(indices=tensor([], size=(1, 0)),
                   values=tensor([], size=(0,)),
                   size=(1,), nnz=0, layout=torch.sparse_coo)
        
            # and to create an empty sparse tensor with nnz = 0, dense_dim = 1 and
            # sparse_dim = 1
            >>> S = torch.sparse_coo_tensor(torch.empty([1, 0]), torch.empty([0, 2]), [1, 2])
            tensor(indices=tensor([], size=(1, 0)),
                   values=tensor([], size=(0, 2)),
                   size=(1, 2), nnz=0, layout=torch.sparse_coo)
        
        .. _torch.sparse: https://pytorch.org/docs/stable/sparse.html
    
    sspplliitt(tensor, split_size_or_sections, dim=0)
        Splits the tensor into chunks. Each chunk is a view of the original tensor.
        
        If :attr:`split_size_or_sections` is an integer type, then :attr:`tensor` will
        be split into equally sized chunks (if possible). Last chunk will be smaller if
        the tensor size along the given dimension :attr:`dim` is not divisible by
        :attr:`split_size`.
        
        If :attr:`split_size_or_sections` is a list, then :attr:`tensor` will be split
        into ``len(split_size_or_sections)`` chunks with sizes in :attr:`dim` according
        to :attr:`split_size_or_sections`.
        
        Args:
            tensor (Tensor): tensor to split.
            split_size_or_sections (int) or (list(int)): size of a single chunk or
                list of sizes for each chunk
            dim (int): dimension along which to split the tensor.
        
        Example::
            >>> a = torch.arange(10).reshape(5,2)
            >>> a
            tensor([[0, 1],
                    [2, 3],
                    [4, 5],
                    [6, 7],
                    [8, 9]])
            >>> torch.split(a, 2)
            (tensor([[0, 1],
                     [2, 3]]),
             tensor([[4, 5],
                     [6, 7]]),
             tensor([[8, 9]]))
            >>> torch.split(a, [1,4])
            (tensor([[0, 1]]),
             tensor([[2, 3],
                     [4, 5],
                     [6, 7],
                     [8, 9]]))
    
    sspplliitt__wwiitthh__ssiizzeess(...)
    
    ssppmmmm(...)
    
    ssqqrrtt(...)
        sqrt(input, *, out=None) -> Tensor
        
        Returns a new tensor with the square-root of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \sqrt{\text{input}_{i}}
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-2.0755,  1.0226,  0.0831,  0.4806])
            >>> torch.sqrt(a)
            tensor([    nan,  1.0112,  0.2883,  0.6933])
    
    ssqqrrtt__(...)
    
    ssqquuaarree(...)
        square(input, *, out=None) -> Tensor
        
        Returns a new tensor with the square of the elements of :attr:`input`.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-2.0755,  1.0226,  0.0831,  0.4806])
            >>> torch.square(a)
            tensor([ 4.3077,  1.0457,  0.0069,  0.2310])
    
    ssqquuaarree__(...)
    
    ssqquueeeezzee(...)
        squeeze(input, dim=None, *, out=None) -> Tensor
        
        Returns a tensor with all the dimensions of :attr:`input` of size `1` removed.
        
        For example, if `input` is of shape:
        :math:`(A \times 1 \times B \times C \times 1 \times D)` then the `out` tensor
        will be of shape: :math:`(A \times B \times C \times D)`.
        
        When :attr:`dim` is given, a squeeze operation is done only in the given
        dimension. If `input` is of shape: :math:`(A \times 1 \times B)`,
        ``squeeze(input, 0)`` leaves the tensor unchanged, but ``squeeze(input, 1)``
        will squeeze the tensor to the shape :math:`(A \times B)`.
        
        .. note:: The returned tensor shares the storage with the input tensor,
                  so changing the contents of one will change the contents of the other.
        
        .. warning:: If the tensor has a batch dimension of size 1, then `squeeze(input)`
                  will also remove the batch dimension, which can lead to unexpected
                  errors.
        
        Args:
            input (Tensor): the input tensor.
            dim (int, optional): if given, the input will be squeezed only in
                   this dimension
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x = torch.zeros(2, 1, 2, 1, 2)
            >>> x.size()
            torch.Size([2, 1, 2, 1, 2])
            >>> y = torch.squeeze(x)
            >>> y.size()
            torch.Size([2, 2, 2])
            >>> y = torch.squeeze(x, 0)
            >>> y.size()
            torch.Size([2, 1, 2, 1, 2])
            >>> y = torch.squeeze(x, 1)
            >>> y.size()
            torch.Size([2, 2, 1, 2])
    
    ssssppaaddddmmmm(...)
        sspaddmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) -> Tensor
        
        Matrix multiplies a sparse tensor :attr:`mat1` with a dense tensor
        :attr:`mat2`, then adds the sparse tensor :attr:`input` to the result.
        
        Note: This function is equivalent to :func:`torch.addmm`, except
        :attr:`input` and :attr:`mat1` are sparse.
        
        Args:
            input (Tensor): a sparse matrix to be added
            mat1 (Tensor): a sparse matrix to be matrix multiplied
            mat2 (Tensor): a dense matrix to be matrix multiplied
        
        Keyword args:
            beta (Number, optional): multiplier for :attr:`mat` (:math:`\beta`)
            alpha (Number, optional): multiplier for :math:`mat1 @ mat2` (:math:`\alpha`)
            out (Tensor, optional): the output tensor.
    
    ssttaacckk(...)
        stack(tensors, dim=0, *, out=None) -> Tensor
        
        Concatenates a sequence of tensors along a new dimension.
        
        All tensors need to be of the same size.
        
        Arguments:
            tensors (sequence of Tensors): sequence of tensors to concatenate
            dim (int): dimension to insert. Has to be between 0 and the number
                of dimensions of concatenated tensors (inclusive)
        
        Keyword args:
            out (Tensor, optional): the output tensor.
    
    ssttdd(...)
        std(input, unbiased=True) -> Tensor
        
        Returns the standard-deviation of all elements in the :attr:`input` tensor.
        
        If :attr:`unbiased` is ``False``, then the standard-deviation will be calculated
        via the biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            unbiased (bool): whether to use the unbiased estimation or not
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[-0.8166, -1.3802, -0.3560]])
            >>> torch.std(a)
            tensor(0.5130)
        
        .. function:: std(input, dim, unbiased=True, keepdim=False, *, out=None) -> Tensor
        
        Returns the standard-deviation of each row of the :attr:`input` tensor in the
        dimension :attr:`dim`. If :attr:`dim` is a list of dimensions,
        reduce over all of them.
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        If :attr:`unbiased` is ``False``, then the standard-deviation will be calculated
        via the biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            unbiased (bool): whether to use the unbiased estimation or not
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.2035,  1.2959,  1.8101, -0.4644],
                    [ 1.5027, -0.3270,  0.5905,  0.6538],
                    [-1.5745,  1.3330, -0.5596, -0.6548],
                    [ 0.1264, -0.5080,  1.6420,  0.1992]])
            >>> torch.std(a, dim=1)
            tensor([ 1.0311,  0.7477,  1.2204,  0.9087])
    
    ssttdd__mmeeaann(...)
        std_mean(input, unbiased=True) -> (Tensor, Tensor)
        
        Returns the standard-deviation and mean of all elements in the :attr:`input` tensor.
        
        If :attr:`unbiased` is ``False``, then the standard-deviation will be calculated
        via the biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            unbiased (bool): whether to use the unbiased estimation or not
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[0.3364, 0.3591, 0.9462]])
            >>> torch.std_mean(a)
            (tensor(0.3457), tensor(0.5472))
        
        .. function:: std_mean(input, dim, unbiased=True, keepdim=False) -> (Tensor, Tensor)
        
        Returns the standard-deviation and mean of each row of the :attr:`input` tensor in the
        dimension :attr:`dim`. If :attr:`dim` is a list of dimensions,
        reduce over all of them.
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        If :attr:`unbiased` is ``False``, then the standard-deviation will be calculated
        via the biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            unbiased (bool): whether to use the unbiased estimation or not
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.5648, -0.5984, -1.2676, -1.4471],
                    [ 0.9267,  1.0612,  1.1050, -0.6014],
                    [ 0.0154,  1.9301,  0.0125, -1.0904],
                    [-1.9711, -0.7748, -1.3840,  0.5067]])
            >>> torch.std_mean(a, 1)
            (tensor([0.9110, 0.8197, 1.2552, 1.0608]), tensor([-0.6871,  0.6229,  0.2169, -0.9058]))
    
    ssttfftt(input: torch.Tensor, n_fft: int, hop_length: Union[int, NoneType] = None, win_length: Union[int, NoneType] = None, window: Union[torch.Tensor, NoneType] = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Union[bool, NoneType] = None, return_complex: Union[bool, NoneType] = None) -> torch.Tensor
        Short-time Fourier transform (STFT).
        
        .. warning::
            From version 1.8.0, :attr:`return_complex` must always be given
            explicitly for real inputs and `return_complex=False` has been
            deprecated. Strongly prefer `return_complex=True` as in a future
            pytorch release, this function will only return complex tensors.
        
            Note that :func:`torch.view_as_real` can be used to recover a real
            tensor with an extra last dimension for real and imaginary components.
        
        The STFT computes the Fourier transform of short overlapping windows of the
        input. This giving frequency components of the signal as they change over
        time. The interface of this function is modeled after the librosa_ stft function.
        
        .. _librosa: https://librosa.org/doc/latest/generated/librosa.stft.html
        
        Ignoring the optional batch dimension, this method computes the following
        expression:
        
        .. math::
            X[m, \omega] = \sum_{k = 0}^{\text{win\_length-1}}%
                                \text{window}[k]\ \text{input}[m \times \text{hop\_length} + k]\ %
                                \exp\left(- j \frac{2 \pi \cdot \omega k}{\text{win\_length}}\right),
        
        where :math:`m` is the index of the sliding window, and :math:`\omega` is
        the frequency that :math:`0 \leq \omega < \text{n\_fft}`. When
        :attr:`onesided` is the default value ``True``,
        
        * :attr:`input` must be either a 1-D time sequence or a 2-D batch of time
          sequences.
        
        * If :attr:`hop_length` is ``None`` (default), it is treated as equal to
          ``floor(n_fft / 4)``.
        
        * If :attr:`win_length` is ``None`` (default), it is treated as equal to
          :attr:`n_fft`.
        
        * :attr:`window` can be a 1-D tensor of size :attr:`win_length`, e.g., from
          :meth:`torch.hann_window`. If :attr:`window` is ``None`` (default), it is
          treated as if having :math:`1` everywhere in the window. If
          :math:`\text{win\_length} < \text{n\_fft}`, :attr:`window` will be padded on
          both sides to length :attr:`n_fft` before being applied.
        
        * If :attr:`center` is ``True`` (default), :attr:`input` will be padded on
          both sides so that the :math:`t`-th frame is centered at time
          :math:`t \times \text{hop\_length}`. Otherwise, the :math:`t`-th frame
          begins at time  :math:`t \times \text{hop\_length}`.
        
        * :attr:`pad_mode` determines the padding method used on :attr:`input` when
          :attr:`center` is ``True``. See :meth:`torch.nn.functional.pad` for
          all available options. Default is ``"reflect"``.
        
        * If :attr:`onesided` is ``True`` (default for real input), only values for
          :math:`\omega` in :math:`\left[0, 1, 2, \dots, \left\lfloor
          \frac{\text{n\_fft}}{2} \right\rfloor + 1\right]` are returned because
          the real-to-complex Fourier transform satisfies the conjugate symmetry,
          i.e., :math:`X[m, \omega] = X[m, \text{n\_fft} - \omega]^*`.
          Note if the input or window tensors are complex, then :attr:`onesided`
          output is not possible.
        
        * If :attr:`normalized` is ``True`` (default is ``False``), the function
          returns the normalized STFT results, i.e., multiplied by :math:`(\text{frame\_length})^{-0.5}`.
        
        * If :attr:`return_complex` is ``True`` (default if input is complex), the
          return is a ``input.dim() + 1`` dimensional complex tensor. If ``False``,
          the output is a ``input.dim() + 2`` dimensional real tensor where the last
          dimension represents the real and imaginary components.
        
        Returns either a complex tensor of size :math:`(* \times N \times T)` if
        :attr:`return_complex` is true, or a real tensor of size :math:`(* \times N
        \times T \times 2)`. Where :math:`*` is the optional batch size of
        :attr:`input`, :math:`N` is the number of frequencies where STFT is applied
        and :math:`T` is the total number of frames used.
        
        .. warning::
          This function changed signature at version 0.4.1. Calling with the
          previous signature may cause error or return incorrect result.
        
        Args:
            input (Tensor): the input tensor
            n_fft (int): size of Fourier transform
            hop_length (int, optional): the distance between neighboring sliding window
                frames. Default: ``None`` (treated as equal to ``floor(n_fft / 4)``)
            win_length (int, optional): the size of window frame and STFT filter.
                Default: ``None``  (treated as equal to :attr:`n_fft`)
            window (Tensor, optional): the optional window function.
                Default: ``None`` (treated as window of all :math:`1` s)
            center (bool, optional): whether to pad :attr:`input` on both sides so
                that the :math:`t`-th frame is centered at time :math:`t \times \text{hop\_length}`.
                Default: ``True``
            pad_mode (string, optional): controls the padding method used when
                :attr:`center` is ``True``. Default: ``"reflect"``
            normalized (bool, optional): controls whether to return the normalized STFT results
                 Default: ``False``
            onesided (bool, optional): controls whether to return half of results to
                avoid redundancy for real inputs.
                Default: ``True`` for real :attr:`input` and :attr:`window`, ``False`` otherwise.
            return_complex (bool, optional): whether to return a complex tensor, or
                a real tensor with an extra last dimension for the real and
                imaginary components.
        
        Returns:
            Tensor: A tensor containing the STFT result with shape described above
    
    ssuubb(...)
        sub(input, other, *, alpha=1, out=None) -> Tensor
        
        Subtracts :attr:`other`, scaled by :attr:`alpha`, from :attr:`input`.
        
        .. math::
            \text{{out}}_i = \text{{input}}_i - \text{{alpha}} \times \text{{other}}_i
        
        
        Supports :ref:`broadcasting to a common shape <broadcasting-semantics>`,
        :ref:`type promotion <type-promotion-doc>`, and integer, float, and complex inputs.
        
        Args:
            input (Tensor): the input tensor.
            other (Tensor or Scalar): the tensor or scalar to subtract from :attr:`input`
        
        Keyword args:
            alpha (Scalar): the scalar multiplier for :attr:`other`
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor((1, 2))
            >>> b = torch.tensor((0, 1))
            >>> torch.sub(a, b, alpha=2)
            tensor([1, 0])
    
    ssuubbttrraacctt(...)
        subtract(input, other, *, alpha=1, out=None) -> Tensor
        
        Alias for :func:`torch.sub`.
    
    ssuumm(...)
        sum(input, *, dtype=None) -> Tensor
        
        Returns the sum of all elements in the :attr:`input` tensor.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[ 0.1133, -0.9567,  0.2958]])
            >>> torch.sum(a)
            tensor(-0.5475)
        
        .. function:: sum(input, dim, keepdim=False, *, dtype=None) -> Tensor
        
        Returns the sum of each row of the :attr:`input` tensor in the given
        dimension :attr:`dim`. If :attr:`dim` is a list of dimensions,
        reduce over all of them.
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                If specified, the input tensor is casted to :attr:`dtype` before the operation
                is performed. This is useful for preventing data type overflows. Default: None.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[ 0.0569, -0.2475,  0.0737, -0.3429],
                    [-0.2993,  0.9138,  0.9337, -1.6864],
                    [ 0.1132,  0.7892, -0.1003,  0.5688],
                    [ 0.3637, -0.9906, -0.4752, -1.5197]])
            >>> torch.sum(a, 1)
            tensor([-0.4598, -0.1381,  1.3708, -2.6217])
            >>> b = torch.arange(4 * 5 * 6).view(4, 5, 6)
            >>> torch.sum(b, (2, 1))
            tensor([  435.,  1335.,  2235.,  3135.])
    
    ssvvdd(...)
        svd(input, some=True, compute_uv=True, *, out=None) -> (Tensor, Tensor, Tensor)
        
        Computes the singular value decomposition of either a matrix or batch of
        matrices :attr:`input`. The singular value decomposition is represented as a
        namedtuple (`U,S,V`), such that
        :attr:`input` = `U` diag(`S`) `Vᴴ`,
        where `Vᴴ` is the transpose of `V` for the real-valued inputs,
        or the conjugate transpose of `V` for the complex-valued inputs.
        If :attr:`input` is a batch of tensors, then `U`, `S`, and `V` are also
        batched with the same batch dimensions as :attr:`input`.
        
        If :attr:`some` is ``True`` (default), the method returns the reduced singular
        value decomposition i.e., if the last two dimensions of :attr:`input` are
        `m` and `n`, then the returned `U` and `V` matrices will contain only
        min(`n, m`) orthonormal columns.
        
        If :attr:`compute_uv` is ``False``, the returned `U` and `V` will be
        zero-filled matrices of shape `(m × m)` and `(n × n)`
        respectively, and the same device as :attr:`input`. The :attr:`some`
        argument has no effect when :attr:`compute_uv` is ``False``.
        
        Supports input of float, double, cfloat and cdouble data types.
        The dtypes of `U` and `V` are the same as :attr:`input`'s. `S` will
        always be real-valued, even if :attr:`input` is complex.
        
        .. warning:: :func:`torch.svd` is deprecated. Please use
                     :func:`torch.linalg.svd` instead, which is similar to NumPy's
                     ``numpy.linalg.svd``.
        
        .. note:: Differences with :func:`torch.linalg.svd`:
        
                     * :attr:`some` is the opposite of
                       :func:`torch.linalg.svd`'s :attr:`full_matricies`. Note that
                       default value for both is ``True``, so the default behavior is
                       effectively the opposite.
        
                     * :func:`torch.svd` returns `V`, whereas :func:`torch.linalg.svd` returns `Vᴴ`.
        
                     * If :attr:`compute_uv=False`, :func:`torch.svd` returns zero-filled tensors for
                       ``U`` and ``Vh``, whereas :func:`torch.linalg.svd` returns
                       empty tensors.
        
        .. note:: The singular values are returned in descending order. If :attr:`input` is a batch of matrices,
                  then the singular values of each matrix in the batch is returned in descending order.
        
        .. note:: The implementation of SVD on CPU uses the LAPACK routine `?gesdd` (a divide-and-conquer
                  algorithm) instead of `?gesvd` for speed. Analogously, the SVD on GPU uses the cuSOLVER routines
                  `gesvdj` and `gesvdjBatched` on CUDA 10.1.243 and later, and uses the MAGMA routine `gesdd`
                  on earlier versions of CUDA.
        
        .. note:: The returned matrix `U` will be transposed, i.e. with strides
                  :code:`U.contiguous().transpose(-2, -1).stride()`.
        
        .. note:: Gradients computed using `U` and `V` may be unstable if
                  :attr:`input` is not full rank or has non-unique singular values.
        
        .. note:: When :attr:`some` = ``False``, the gradients on :code:`U[..., :, min(m, n):]`
                  and :code:`V[..., :, min(m, n):]` will be ignored in backward as those vectors
                  can be arbitrary bases of the subspaces.
        
        .. note:: The `S` tensor can only be used to compute gradients if :attr:`compute_uv` is True.
        
        .. note:: With the complex-valued input the backward operation works correctly only
                  for gauge invariant loss functions. Please look at `Gauge problem in AD`_ for more details.
        
        .. note:: Since `U` and `V` of an SVD is not unique, each vector can be multiplied by
                  an arbitrary phase factor :math:`e^{i \phi}` while the SVD result is still correct.
                  Different platforms, like Numpy, or inputs on different device types, may produce different
                  `U` and `V` tensors.
        
        Args:
            input (Tensor): the input tensor of size `(*, m, n)` where `*` is zero or more
                            batch dimensions consisting of `(m × n)` matrices.
            some (bool, optional): controls whether to compute the reduced or full decomposition, and
                                   consequently the shape of returned `U` and `V`. Defaults to True.
            compute_uv (bool, optional): option whether to compute `U` and `V` or not. Defaults to True.
        
        Keyword args:
            out (tuple, optional): the output tuple of tensors
        
        Example::
        
            >>> a = torch.randn(5, 3)
            >>> a
            tensor([[ 0.2364, -0.7752,  0.6372],
                    [ 1.7201,  0.7394, -0.0504],
                    [-0.3371, -1.0584,  0.5296],
                    [ 0.3550, -0.4022,  1.5569],
                    [ 0.2445, -0.0158,  1.1414]])
            >>> u, s, v = torch.svd(a)
            >>> u
            tensor([[ 0.4027,  0.0287,  0.5434],
                    [-0.1946,  0.8833,  0.3679],
                    [ 0.4296, -0.2890,  0.5261],
                    [ 0.6604,  0.2717, -0.2618],
                    [ 0.4234,  0.2481, -0.4733]])
            >>> s
            tensor([2.3289, 2.0315, 0.7806])
            >>> v
            tensor([[-0.0199,  0.8766,  0.4809],
                    [-0.5080,  0.4054, -0.7600],
                    [ 0.8611,  0.2594, -0.4373]])
            >>> torch.dist(a, torch.mm(torch.mm(u, torch.diag(s)), v.t()))
            tensor(8.6531e-07)
            >>> a_big = torch.randn(7, 5, 3)
            >>> u, s, v = torch.svd(a_big)
            >>> torch.dist(a_big, torch.matmul(torch.matmul(u, torch.diag_embed(s)), v.transpose(-2, -1)))
            tensor(2.6503e-06)
        
        .. _Gauge problem in AD: https://re-ra.xyz/Gauge-Problem-in-Automatic-Differentiation/
    
    sswwaappaaxxeess(...)
        swapaxes(input, axis0, axis1) -> Tensor
        
        Alias for :func:`torch.transpose`.
        
        This function is equivalent to NumPy's swapaxes function.
        
        Examples::
        
            >>> x = torch.tensor([[[0,1],[2,3]],[[4,5],[6,7]]])
            >>> x
            tensor([[[0, 1],
                    [2, 3]],
        
                    [[4, 5],
                    [6, 7]]])
            >>> torch.swapaxes(x, 0, 1)
            tensor([[[0, 1],
                    [4, 5]],
        
                    [[2, 3],
                    [6, 7]]])
            >>> torch.swapaxes(x, 0, 2)
            tensor([[[0, 4],
                    [2, 6]],
        
                    [[1, 5],
                    [3, 7]]])
    
    sswwaappddiimmss(...)
        swapdims(input, dim0, dim1) -> Tensor
        
        Alias for :func:`torch.transpose`.
        
        This function is equivalent to NumPy's swapaxes function.
        
        Examples::
        
            >>> x = torch.tensor([[[0,1],[2,3]],[[4,5],[6,7]]])
            >>> x
            tensor([[[0, 1],
                    [2, 3]],
        
                    [[4, 5],
                    [6, 7]]])
            >>> torch.swapdims(x, 0, 1)
            tensor([[[0, 1],
                    [4, 5]],
        
                    [[2, 3],
                    [6, 7]]])
            >>> torch.swapdims(x, 0, 2)
            tensor([[[0, 4],
                    [2, 6]],
        
                    [[1, 5],
                    [3, 7]]])
    
    ssyymmeeiigg(...)
        symeig(input, eigenvectors=False, upper=True, *, out=None) -> (Tensor, Tensor)
        
        This function returns eigenvalues and eigenvectors
        of a real symmetric matrix :attr:`input` or a batch of real symmetric matrices,
        represented by a namedtuple (eigenvalues, eigenvectors).
        
        This function calculates all eigenvalues (and vectors) of :attr:`input`
        such that :math:`\text{input} = V \text{diag}(e) V^T`.
        
        The boolean argument :attr:`eigenvectors` defines computation of
        both eigenvectors and eigenvalues or eigenvalues only.
        
        If it is ``False``, only eigenvalues are computed. If it is ``True``,
        both eigenvalues and eigenvectors are computed.
        
        Since the input matrix :attr:`input` is supposed to be symmetric,
        only the upper triangular portion is used by default.
        
        If :attr:`upper` is ``False``, then lower triangular portion is used.
        
        .. note:: The eigenvalues are returned in ascending order. If :attr:`input` is a batch of matrices,
                  then the eigenvalues of each matrix in the batch is returned in ascending order.
        
        .. note:: Irrespective of the original strides, the returned matrix `V` will
                  be transposed, i.e. with strides `V.contiguous().transpose(-1, -2).stride()`.
        
        .. warning:: Extra care needs to be taken when backward through outputs. Such
                     operation is only stable when all eigenvalues are distinct and becomes
                     less stable the smaller :math:`\min_{i \neq j} |\lambda_i - \lambda_j|` is.
        
        Args:
            input (Tensor): the input tensor of size :math:`(*, n, n)` where `*` is zero or more
                            batch dimensions consisting of symmetric matrices.
            eigenvectors(bool, optional): controls whether eigenvectors have to be computed
            upper(boolean, optional): controls whether to consider upper-triangular or lower-triangular region
        
        Keyword args:
            out (tuple, optional): the output tuple of (Tensor, Tensor)
        
        Returns:
            (Tensor, Tensor): A namedtuple (eigenvalues, eigenvectors) containing
        
                - **eigenvalues** (*Tensor*): Shape :math:`(*, m)`. The eigenvalues in ascending order.
                - **eigenvectors** (*Tensor*): Shape :math:`(*, m, m)`.
                  If ``eigenvectors=False``, it's an empty tensor.
                  Otherwise, this tensor contains the orthonormal eigenvectors of the ``input``.
        
        Examples::
        
        
            >>> a = torch.randn(5, 5)
            >>> a = a + a.t()  # To make a symmetric
            >>> a
            tensor([[-5.7827,  4.4559, -0.2344, -1.7123, -1.8330],
                    [ 4.4559,  1.4250, -2.8636, -3.2100, -0.1798],
                    [-0.2344, -2.8636,  1.7112, -5.5785,  7.1988],
                    [-1.7123, -3.2100, -5.5785, -2.6227,  3.1036],
                    [-1.8330, -0.1798,  7.1988,  3.1036, -5.1453]])
            >>> e, v = torch.symeig(a, eigenvectors=True)
            >>> e
            tensor([-13.7012,  -7.7497,  -2.3163,   5.2477,   8.1050])
            >>> v
            tensor([[ 0.1643,  0.9034, -0.0291,  0.3508,  0.1817],
                    [-0.2417, -0.3071, -0.5081,  0.6534,  0.4026],
                    [-0.5176,  0.1223, -0.0220,  0.3295, -0.7798],
                    [-0.4850,  0.2695, -0.5773, -0.5840,  0.1337],
                    [ 0.6415, -0.0447, -0.6381, -0.0193, -0.4230]])
            >>> a_big = torch.randn(5, 2, 2)
            >>> a_big = a_big + a_big.transpose(-2, -1)  # To make a_big symmetric
            >>> e, v = a_big.symeig(eigenvectors=True)
            >>> torch.allclose(torch.matmul(v, torch.matmul(e.diag_embed(), v.transpose(-2, -1))), a_big)
            True
    
    tt(...)
        t(input) -> Tensor
        
        Expects :attr:`input` to be <= 2-D tensor and transposes dimensions 0
        and 1.
        
        0-D and 1-D tensors are returned as is. When input is a 2-D tensor this
        is equivalent to ``transpose(input, 0, 1)``.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
        
            >>> x = torch.randn(())
            >>> x
            tensor(0.1995)
            >>> torch.t(x)
            tensor(0.1995)
            >>> x = torch.randn(3)
            >>> x
            tensor([ 2.4320, -0.4608,  0.7702])
            >>> torch.t(x)
            tensor([ 2.4320, -0.4608,  0.7702])
            >>> x = torch.randn(2, 3)
            >>> x
            tensor([[ 0.4875,  0.9158, -0.5872],
                    [ 0.3938, -0.6929,  0.6932]])
            >>> torch.t(x)
            tensor([[ 0.4875,  0.3938],
                    [ 0.9158, -0.6929],
                    [-0.5872,  0.6932]])
    
    ttaakkee(...)
        take(input, index) -> Tensor
        
        Returns a new tensor with the elements of :attr:`input` at the given indices.
        The input tensor is treated as if it were viewed as a 1-D tensor. The result
        takes the same shape as the indices.
        
        Args:
            input (Tensor): the input tensor.
            indices (LongTensor): the indices into tensor
        
        Example::
        
            >>> src = torch.tensor([[4, 3, 5],
            ...                     [6, 7, 8]])
            >>> torch.take(src, torch.tensor([0, 2, 5]))
            tensor([ 4,  5,  8])
    
    ttaann(...)
        tan(input, *, out=None) -> Tensor
        
        Returns a new tensor with the tangent of the elements of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \tan(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([-1.2027, -1.7687,  0.4412, -1.3856])
            >>> torch.tan(a)
            tensor([-2.5930,  4.9859,  0.4722, -5.3366])
    
    ttaann__(...)
    
    ttaannhh(...)
        tanh(input, *, out=None) -> Tensor
        
        Returns a new tensor with the hyperbolic tangent of the elements
        of :attr:`input`.
        
        .. math::
            \text{out}_{i} = \tanh(\text{input}_{i})
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 0.8986, -0.7279,  1.1745,  0.2611])
            >>> torch.tanh(a)
            tensor([ 0.7156, -0.6218,  0.8257,  0.2553])
    
    ttaannhh__(...)
    
    tteennssoorr(...)
        tensor(data, *, dtype=None, device=None, requires_grad=False, pin_memory=False) -> Tensor
        
        Constructs a tensor with :attr:`data`.
        
        .. warning::
        
            :func:`torch.tensor` always copies :attr:`data`. If you have a Tensor
            ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`
            or :func:`torch.Tensor.detach`.
            If you have a NumPy ``ndarray`` and want to avoid a copy, use
            :func:`torch.as_tensor`.
        
        .. warning::
        
            When data is a tensor `x`, :func:`torch.tensor` reads out 'the data' from whatever it is passed,
            and constructs a leaf variable. Therefore ``torch.tensor(x)`` is equivalent to ``x.clone().detach()``
            and ``torch.tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.
            The equivalents using ``clone()`` and ``detach()`` are recommended.
        
        Args:
            data (array_like): Initial data for the tensor. Can be a list, tuple,
                NumPy ``ndarray``, scalar, and other types.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, infers data type from :attr:`data`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            pin_memory (bool, optional): If set, returned tensor would be allocated in
                the pinned memory. Works only for CPU tensors. Default: ``False``.
        
        
        Example::
        
            >>> torch.tensor([[0.1, 1.2], [2.2, 3.1], [4.9, 5.2]])
            tensor([[ 0.1000,  1.2000],
                    [ 2.2000,  3.1000],
                    [ 4.9000,  5.2000]])
        
            >>> torch.tensor([0, 1])  # Type inference on data
            tensor([ 0,  1])
        
            >>> torch.tensor([[0.11111, 0.222222, 0.3333333]],
            ...              dtype=torch.float64,
            ...              device=torch.device('cuda:0'))  # creates a torch.cuda.DoubleTensor
            tensor([[ 0.1111,  0.2222,  0.3333]], dtype=torch.float64, device='cuda:0')
        
            >>> torch.tensor(3.14159)  # Create a scalar (zero-dimensional tensor)
            tensor(3.1416)
        
            >>> torch.tensor([])  # Create an empty tensor (of size (0,))
            tensor([])
    
    tteennssoorr__sspplliitt(...)
        tensor_split(input, indices_or_sections, dim=0) -> List of Tensors
        
        Splits a tensor into multiple sub-tensors, all of which are views of :attr:`input`,
        along dimension :attr:`dim` according to the indices or number of sections specified
        by :attr:`indices_or_sections`. This function is based on NumPy's
        :func:`numpy.array_split`.
        
        Args:
            input (Tensor): the tensor to split
            indices_or_sections (Tensor, int or list or tuple of ints):
                If :attr:`indices_or_sections` is an integer ``n`` or a zero dimensional long tensor
                with value ``n``, :attr:`input` is split into ``n`` sections along dimension :attr:`dim`.
                If :attr:`input` is divisible by ``n`` along dimension :attr:`dim`, each
                section will be of equal size, :code:`input.size(dim) / n`. If :attr:`input`
                is not divisible by ``n``, the sizes of the first :code:`int(input.size(dim) % n)`
                sections will have size :code:`int(input.size(dim) / n) + 1`, and the rest will
                have size :code:`int(input.size(dim) / n)`.
        
                If :attr:`indices_or_sections` is a list or tuple of ints, or a one-dimensional long
                tensor, then :attr:`input` is split along dimension :attr:`dim` at each of the indices
                in the list, tuple or tensor. For instance, :code:`indices_or_sections=[2, 3]` and :code:`dim=0`
                would result in the tensors :code:`input[:2]`, :code:`input[2:3]`, and :code:`input[3:]`.
        
                If indices_or_sections is a tensor, it must be a zero-dimensional or one-dimensional
                long tensor on the CPU.
        
            dim (int, optional): dimension along which to split the tensor. Default: ``0``
        
        Example::
            >>> x = torch.arange(8)
            >>> torch.tensor_split(x, 3)
            (tensor([0, 1, 2]), tensor([3, 4, 5]), tensor([6, 7]))
        
            >>> x = torch.arange(7)
            >>> torch.tensor_split(x, 3)
            (tensor([0, 1, 2]), tensor([3, 4]), tensor([5, 6]))
            >>> torch.tensor_split(x, (1, 6))
            (tensor([0]), tensor([1, 2, 3, 4, 5]), tensor([6]))
        
            >>> x = torch.arange(14).reshape(2, 7)
            >>> x
            tensor([[ 0,  1,  2,  3,  4,  5,  6],
                    [ 7,  8,  9, 10, 11, 12, 13]])
            >>> torch.tensor_split(x, 3, dim=1)
            (tensor([[0, 1, 2],
                    [7, 8, 9]]),
             tensor([[ 3,  4],
                    [10, 11]]),
             tensor([[ 5,  6],
                    [12, 13]]))
            >>> torch.tensor_split(x, (1, 6), dim=1)
            (tensor([[0],
                    [7]]),
             tensor([[ 1,  2,  3,  4,  5],
                    [ 8,  9, 10, 11, 12]]),
             tensor([[ 6],
                    [13]]))
    
    tteennssoorrddoott(a, b, dims=2, out=None)
        Returns a contraction of a and b over multiple dimensions.
        
        :attr:`tensordot` implements a generalized matrix product.
        
        Args:
          a (Tensor): Left tensor to contract
          b (Tensor): Right tensor to contract
          dims (int or Tuple[List[int]] containing two lists): number of dimensions to
             contract or explicit lists of dimensions for :attr:`a` and
             :attr:`b` respectively
        
        When called with a non-negative integer argument :attr:`dims` = :math:`d`, and
        the number of dimensions of :attr:`a` and :attr:`b` is :math:`m` and :math:`n`,
        respectively, :func:`~torch.tensordot` computes
        
        .. math::
            r_{i_0,...,i_{m-d}, i_d,...,i_n}
              = \sum_{k_0,...,k_{d-1}} a_{i_0,...,i_{m-d},k_0,...,k_{d-1}} \times b_{k_0,...,k_{d-1}, i_d,...,i_n}.
        
        When called with :attr:`dims` of the list form, the given dimensions will be contracted
        in place of the last :math:`d` of :attr:`a` and the first :math:`d` of :math:`b`. The sizes
        in these dimensions must match, but :func:`~torch.tensordot` will deal with broadcasted
        dimensions.
        
        Examples::
        
            >>> a = torch.arange(60.).reshape(3, 4, 5)
            >>> b = torch.arange(24.).reshape(4, 3, 2)
            >>> torch.tensordot(a, b, dims=([1, 0], [0, 1]))
            tensor([[4400., 4730.],
                    [4532., 4874.],
                    [4664., 5018.],
                    [4796., 5162.],
                    [4928., 5306.]])
        
            >>> a = torch.randn(3, 4, 5, device='cuda')
            >>> b = torch.randn(4, 5, 6, device='cuda')
            >>> c = torch.tensordot(a, b, dims=2).cpu()
            tensor([[ 8.3504, -2.5436,  6.2922,  2.7556, -1.0732,  3.2741],
                    [ 3.3161,  0.0704,  5.0187, -0.4079, -4.3126,  4.8744],
                    [ 0.8223,  3.9445,  3.2168, -0.2400,  3.4117,  1.7780]])
        
            >>> a = torch.randn(3, 5, 4, 6)
            >>> b = torch.randn(6, 4, 5, 3)
            >>> torch.tensordot(a, b, dims=([2, 1, 3], [1, 2, 0]))
            tensor([[  7.7193,  -2.4867, -10.3204],
                    [  1.5513, -14.4737,  -6.5113],
                    [ -0.2850,   4.2573,  -3.5997]])
    
    tthhrreesshhoolldd(...)
    
    tthhrreesshhoolldd__(...)
        threshold_(input, threshold, value) -> Tensor
        
        In-place version of :func:`~threshold`.
    
    ttiillee(...)
        tile(input, reps) -> Tensor
        
        Constructs a tensor by repeating the elements of :attr:`input`.
        The :attr:`reps` argument specifies the number of repetitions
        in each dimension.
        
        If :attr:`reps` specifies fewer dimensions than :attr:`input` has, then
        ones are prepended to :attr:`reps` until all dimensions are specified.
        For example, if :attr:`input` has shape (8, 6, 4, 2) and :attr:`reps`
        is (2, 2), then :attr:`reps` is treated as (1, 1, 2, 2).
        
        Analogously, if :attr:`input` has fewer dimensions than :attr:`reps`
        specifies, then :attr:`input` is treated as if it were unsqueezed at
        dimension zero until it has as many dimensions as :attr:`reps` specifies.
        For example, if :attr:`input` has shape (4, 2) and :attr:`reps`
        is (3, 3, 2, 2), then :attr:`input` is treated as if it had the
        shape (1, 1, 4, 2).
        
        .. note::
        
            This function is similar to NumPy's tile function.
        
        Args:
            input (Tensor): the tensor whose elements to repeat.
            reps (tuple): the number of repetitions per dimension.
        
        Example::
        
            >>> x = torch.tensor([1, 2, 3])
            >>> x.tile((2,))
            tensor([1, 2, 3, 1, 2, 3])
            >>> y = torch.tensor([[1, 2], [3, 4]])
            >>> torch.tile(y, (2, 2))
            tensor([[1, 2, 1, 2],
                    [3, 4, 3, 4],
                    [1, 2, 1, 2],
                    [3, 4, 3, 4]])
    
    ttooppkk(...)
        topk(input, k, dim=None, largest=True, sorted=True, *, out=None) -> (Tensor, LongTensor)
        
        Returns the :attr:`k` largest elements of the given :attr:`input` tensor along
        a given dimension.
        
        If :attr:`dim` is not given, the last dimension of the `input` is chosen.
        
        If :attr:`largest` is ``False`` then the `k` smallest elements are returned.
        
        A namedtuple of `(values, indices)` is returned, where the `indices` are the indices
        of the elements in the original `input` tensor.
        
        The boolean option :attr:`sorted` if ``True``, will make sure that the returned
        `k` elements are themselves sorted
        
        Args:
            input (Tensor): the input tensor.
            k (int): the k in "top-k"
            dim (int, optional): the dimension to sort along
            largest (bool, optional): controls whether to return largest or
                   smallest elements
            sorted (bool, optional): controls whether to return the elements
                   in sorted order
        
        Keyword args:
            out (tuple, optional): the output tuple of (Tensor, LongTensor) that can be
                optionally given to be used as output buffers
        
        Example::
        
            >>> x = torch.arange(1., 6.)
            >>> x
            tensor([ 1.,  2.,  3.,  4.,  5.])
            >>> torch.topk(x, 3)
            torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2]))
    
    ttrraaccee(...)
        trace(input) -> Tensor
        
        Returns the sum of the elements of the diagonal of the input 2-D matrix.
        
        Example::
        
            >>> x = torch.arange(1., 10.).view(3, 3)
            >>> x
            tensor([[ 1.,  2.,  3.],
                    [ 4.,  5.,  6.],
                    [ 7.,  8.,  9.]])
            >>> torch.trace(x)
            tensor(15.)
    
    ttrraannssppoossee(...)
        transpose(input, dim0, dim1) -> Tensor
        
        Returns a tensor that is a transposed version of :attr:`input`.
        The given dimensions :attr:`dim0` and :attr:`dim1` are swapped.
        
        The resulting :attr:`out` tensor shares its underlying storage with the
        :attr:`input` tensor, so changing the content of one would change the content
        of the other.
        
        Args:
            input (Tensor): the input tensor.
            dim0 (int): the first dimension to be transposed
            dim1 (int): the second dimension to be transposed
        
        Example::
        
            >>> x = torch.randn(2, 3)
            >>> x
            tensor([[ 1.0028, -0.9893,  0.5809],
                    [-0.1669,  0.7299,  0.4942]])
            >>> torch.transpose(x, 0, 1)
            tensor([[ 1.0028, -0.1669],
                    [-0.9893,  0.7299],
                    [ 0.5809,  0.4942]])
    
    ttrraappzz(...)
        trapz(y, x, *, dim=-1) -> Tensor
        
        Estimate :math:`\int y\,dx` along `dim`, using the trapezoid rule.
        
        Arguments:
            y (Tensor): The values of the function to integrate
            x (Tensor): The points at which the function `y` is sampled.
                If `x` is not in ascending order, intervals on which it is decreasing
                contribute negatively to the estimated integral (i.e., the convention
                :math:`\int_a^b f = -\int_b^a f` is followed).
            dim (int): The dimension along which to integrate.
                By default, use the last dimension.
        
        Returns:
            A Tensor with the same shape as the input, except with `dim` removed.
            Each element of the returned tensor represents the estimated integral
            :math:`\int y\,dx` along `dim`.
        
        Example::
        
            >>> y = torch.randn((2, 3))
            >>> y
            tensor([[-2.1156,  0.6857, -0.2700],
                    [-1.2145,  0.5540,  2.0431]])
            >>> x = torch.tensor([[1, 3, 4], [1, 2, 3]])
            >>> torch.trapz(y, x)
            tensor([-1.2220,  0.9683])
        
        .. function:: trapz(y, *, dx=1, dim=-1) -> Tensor
        
        As above, but the sample points are spaced uniformly at a distance of `dx`.
        
        Arguments:
            y (Tensor): The values of the function to integrate
        
        Keyword args:
            dx (float): The distance between points at which `y` is sampled.
            dim (int): The dimension along which to integrate.
                By default, use the last dimension.
        
        Returns:
            A Tensor with the same shape as the input, except with `dim` removed.
            Each element of the returned tensor represents the estimated integral
            :math:`\int y\,dx` along `dim`.
    
    ttrriiaanngguullaarr__ssoollvvee(...)
        triangular_solve(input, A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
        
        Solves a system of equations with a triangular coefficient matrix :math:`A`
        and multiple right-hand sides :math:`b`.
        
        In particular, solves :math:`AX = b` and assumes :math:`A` is upper-triangular
        with the default keyword arguments.
        
        `torch.triangular_solve(b, A)` can take in 2D inputs `b, A` or inputs that are
        batches of 2D matrices. If the inputs are batches, then returns
        batched outputs `X`
        
        Supports real-valued and complex-valued inputs.
        
        Args:
            input (Tensor): multiple right-hand sides of size :math:`(*, m, k)` where
                        :math:`*` is zero of more batch dimensions (:math:`b`)
            A (Tensor): the input triangular coefficient matrix of size :math:`(*, m, m)`
                        where :math:`*` is zero or more batch dimensions
            upper (bool, optional): whether to solve the upper-triangular system
                of equations (default) or the lower-triangular system of equations. Default: ``True``.
            transpose (bool, optional): whether :math:`A` should be transposed before
                being sent into the solver. Default: ``False``.
            unitriangular (bool, optional): whether :math:`A` is unit triangular.
                If True, the diagonal elements of :math:`A` are assumed to be
                1 and not referenced from :math:`A`. Default: ``False``.
        
        Returns:
            A namedtuple `(solution, cloned_coefficient)` where `cloned_coefficient`
            is a clone of :math:`A` and `solution` is the solution :math:`X` to :math:`AX = b`
            (or whatever variant of the system of equations, depending on the keyword arguments.)
        
        Examples::
        
            >>> A = torch.randn(2, 2).triu()
            >>> A
            tensor([[ 1.1527, -1.0753],
                    [ 0.0000,  0.7986]])
            >>> b = torch.randn(2, 3)
            >>> b
            tensor([[-0.0210,  2.3513, -1.5492],
                    [ 1.5429,  0.7403, -1.0243]])
            >>> torch.triangular_solve(b, A)
            torch.return_types.triangular_solve(
            solution=tensor([[ 1.7841,  2.9046, -2.5405],
                    [ 1.9320,  0.9270, -1.2826]]),
            cloned_coefficient=tensor([[ 1.1527, -1.0753],
                    [ 0.0000,  0.7986]]))
    
    ttrriill(...)
        tril(input, diagonal=0, *, out=None) -> Tensor
        
        Returns the lower triangular part of the matrix (2-D tensor) or batch of matrices
        :attr:`input`, the other elements of the result tensor :attr:`out` are set to 0.
        
        The lower triangular part of the matrix is defined as the elements on and
        below the diagonal.
        
        The argument :attr:`diagonal` controls which diagonal to consider. If
        :attr:`diagonal` = 0, all elements on and below the main diagonal are
        retained. A positive value includes just as many diagonals above the main
        diagonal, and similarly a negative value excludes just as many diagonals below
        the main diagonal. The main diagonal are the set of indices
        :math:`\lbrace (i, i) \rbrace` for :math:`i \in [0, \min\{d_{1}, d_{2}\} - 1]` where
        :math:`d_{1}, d_{2}` are the dimensions of the matrix.
        
        Args:
            input (Tensor): the input tensor.
            diagonal (int, optional): the diagonal to consider
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(3, 3)
            >>> a
            tensor([[-1.0813, -0.8619,  0.7105],
                    [ 0.0935,  0.1380,  2.2112],
                    [-0.3409, -0.9828,  0.0289]])
            >>> torch.tril(a)
            tensor([[-1.0813,  0.0000,  0.0000],
                    [ 0.0935,  0.1380,  0.0000],
                    [-0.3409, -0.9828,  0.0289]])
        
            >>> b = torch.randn(4, 6)
            >>> b
            tensor([[ 1.2219,  0.5653, -0.2521, -0.2345,  1.2544,  0.3461],
                    [ 0.4785, -0.4477,  0.6049,  0.6368,  0.8775,  0.7145],
                    [ 1.1502,  3.2716, -1.1243, -0.5413,  0.3615,  0.6864],
                    [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0978]])
            >>> torch.tril(b, diagonal=1)
            tensor([[ 1.2219,  0.5653,  0.0000,  0.0000,  0.0000,  0.0000],
                    [ 0.4785, -0.4477,  0.6049,  0.0000,  0.0000,  0.0000],
                    [ 1.1502,  3.2716, -1.1243, -0.5413,  0.0000,  0.0000],
                    [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0000]])
            >>> torch.tril(b, diagonal=-1)
            tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                    [ 0.4785,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                    [ 1.1502,  3.2716,  0.0000,  0.0000,  0.0000,  0.0000],
                    [-0.0614, -0.7344, -1.3164,  0.0000,  0.0000,  0.0000]])
    
    ttrriill__iinnddiicceess(...)
        tril_indices(row, col, offset=0, *, dtype=torch.long, device='cpu', layout=torch.strided) -> Tensor
        
        Returns the indices of the lower triangular part of a :attr:`row`-by-
        :attr:`col` matrix in a 2-by-N Tensor, where the first row contains row
        coordinates of all indices and the second row contains column coordinates.
        Indices are ordered based on rows and then columns.
        
        The lower triangular part of the matrix is defined as the elements on and
        below the diagonal.
        
        The argument :attr:`offset` controls which diagonal to consider. If
        :attr:`offset` = 0, all elements on and below the main diagonal are
        retained. A positive value includes just as many diagonals above the main
        diagonal, and similarly a negative value excludes just as many diagonals below
        the main diagonal. The main diagonal are the set of indices
        :math:`\lbrace (i, i) \rbrace` for :math:`i \in [0, \min\{d_{1}, d_{2}\} - 1]`
        where :math:`d_{1}, d_{2}` are the dimensions of the matrix.
        
        .. note::
            When running on CUDA, ``row * col`` must be less than :math:`2^{59}` to
            prevent overflow during calculation.
        
        Args:
            row (``int``): number of rows in the 2-D matrix.
            col (``int``): number of columns in the 2-D matrix.
            offset (``int``): diagonal offset from the main diagonal.
                Default: if not provided, 0.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, ``torch.long``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            layout (:class:`torch.layout`, optional): currently only support ``torch.strided``.
        
        Example::
            >>> a = torch.tril_indices(3, 3)
            >>> a
            tensor([[0, 1, 1, 2, 2, 2],
                    [0, 0, 1, 0, 1, 2]])
        
            >>> a = torch.tril_indices(4, 3, -1)
            >>> a
            tensor([[1, 2, 2, 3, 3, 3],
                    [0, 0, 1, 0, 1, 2]])
        
            >>> a = torch.tril_indices(4, 3, 1)
            >>> a
            tensor([[0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
                    [0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2]])
    
    ttrriipplleett__mmaarrggiinn__lloossss(...)
    
    ttrriiuu(...)
        triu(input, diagonal=0, *, out=None) -> Tensor
        
        Returns the upper triangular part of a matrix (2-D tensor) or batch of matrices
        :attr:`input`, the other elements of the result tensor :attr:`out` are set to 0.
        
        The upper triangular part of the matrix is defined as the elements on and
        above the diagonal.
        
        The argument :attr:`diagonal` controls which diagonal to consider. If
        :attr:`diagonal` = 0, all elements on and above the main diagonal are
        retained. A positive value excludes just as many diagonals above the main
        diagonal, and similarly a negative value includes just as many diagonals below
        the main diagonal. The main diagonal are the set of indices
        :math:`\lbrace (i, i) \rbrace` for :math:`i \in [0, \min\{d_{1}, d_{2}\} - 1]` where
        :math:`d_{1}, d_{2}` are the dimensions of the matrix.
        
        Args:
            input (Tensor): the input tensor.
            diagonal (int, optional): the diagonal to consider
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(3, 3)
            >>> a
            tensor([[ 0.2309,  0.5207,  2.0049],
                    [ 0.2072, -1.0680,  0.6602],
                    [ 0.3480, -0.5211, -0.4573]])
            >>> torch.triu(a)
            tensor([[ 0.2309,  0.5207,  2.0049],
                    [ 0.0000, -1.0680,  0.6602],
                    [ 0.0000,  0.0000, -0.4573]])
            >>> torch.triu(a, diagonal=1)
            tensor([[ 0.0000,  0.5207,  2.0049],
                    [ 0.0000,  0.0000,  0.6602],
                    [ 0.0000,  0.0000,  0.0000]])
            >>> torch.triu(a, diagonal=-1)
            tensor([[ 0.2309,  0.5207,  2.0049],
                    [ 0.2072, -1.0680,  0.6602],
                    [ 0.0000, -0.5211, -0.4573]])
        
            >>> b = torch.randn(4, 6)
            >>> b
            tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],
                    [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],
                    [ 0.4333,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],
                    [-0.9888,  1.0679, -1.3337, -1.6556,  0.4798,  0.2830]])
            >>> torch.triu(b, diagonal=1)
            tensor([[ 0.0000, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],
                    [ 0.0000,  0.0000, -1.2919,  1.3378, -0.1768, -1.0857],
                    [ 0.0000,  0.0000,  0.0000, -1.0432,  0.9348, -0.4410],
                    [ 0.0000,  0.0000,  0.0000,  0.0000,  0.4798,  0.2830]])
            >>> torch.triu(b, diagonal=-1)
            tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],
                    [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],
                    [ 0.0000,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],
                    [ 0.0000,  0.0000, -1.3337, -1.6556,  0.4798,  0.2830]])
    
    ttrriiuu__iinnddiicceess(...)
        triu_indices(row, col, offset=0, *, dtype=torch.long, device='cpu', layout=torch.strided) -> Tensor
        
        Returns the indices of the upper triangular part of a :attr:`row` by
        :attr:`col` matrix in a 2-by-N Tensor, where the first row contains row
        coordinates of all indices and the second row contains column coordinates.
        Indices are ordered based on rows and then columns.
        
        The upper triangular part of the matrix is defined as the elements on and
        above the diagonal.
        
        The argument :attr:`offset` controls which diagonal to consider. If
        :attr:`offset` = 0, all elements on and above the main diagonal are
        retained. A positive value excludes just as many diagonals above the main
        diagonal, and similarly a negative value includes just as many diagonals below
        the main diagonal. The main diagonal are the set of indices
        :math:`\lbrace (i, i) \rbrace` for :math:`i \in [0, \min\{d_{1}, d_{2}\} - 1]`
        where :math:`d_{1}, d_{2}` are the dimensions of the matrix.
        
        .. note::
            When running on CUDA, ``row * col`` must be less than :math:`2^{59}` to
            prevent overflow during calculation.
        
        Args:
            row (``int``): number of rows in the 2-D matrix.
            col (``int``): number of columns in the 2-D matrix.
            offset (``int``): diagonal offset from the main diagonal.
                Default: if not provided, 0.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, ``torch.long``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            layout (:class:`torch.layout`, optional): currently only support ``torch.strided``.
        
        Example::
            >>> a = torch.triu_indices(3, 3)
            >>> a
            tensor([[0, 0, 0, 1, 1, 2],
                    [0, 1, 2, 1, 2, 2]])
        
            >>> a = torch.triu_indices(4, 3, -1)
            >>> a
            tensor([[0, 0, 0, 1, 1, 1, 2, 2, 3],
                    [0, 1, 2, 0, 1, 2, 1, 2, 2]])
        
            >>> a = torch.triu_indices(4, 3, 1)
            >>> a
            tensor([[0, 0, 1],
                    [1, 2, 2]])
    
    ttrruuee__ddiivviiddee(...)
        true_divide(dividend, divisor, *, out) -> Tensor
        
        Alias for :func:`torch.div` with ``rounding_mode=None``.
    
    ttrruunncc(...)
        trunc(input, *, out=None) -> Tensor
        
        Returns a new tensor with the truncated integer values of
        the elements of :attr:`input`.
        
        Args:
            input (Tensor): the input tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4)
            >>> a
            tensor([ 3.4742,  0.5466, -0.8008, -0.9079])
            >>> torch.trunc(a)
            tensor([ 3.,  0., -0., -0.])
    
    ttrruunncc__(...)
    
    ttyyppeennaammee(o)
    
    uunnbbiinndd(...)
        unbind(input, dim=0) -> seq
        
        Removes a tensor dimension.
        
        Returns a tuple of all slices along a given dimension, already without it.
        
        Arguments:
            input (Tensor): the tensor to unbind
            dim (int): dimension to remove
        
        Example::
        
            >>> torch.unbind(torch.tensor([[1, 2, 3],
            >>>                            [4, 5, 6],
            >>>                            [7, 8, 9]]))
            (tensor([1, 2, 3]), tensor([4, 5, 6]), tensor([7, 8, 9]))
    
    uunniiffyy__ttyyppee__lliisstt(...) method of builtins.PyCapsule instance
        unify_type_list(arg0: List[c10::Type]) -> c10::Type
    
    uunniiqquuee__ccoonnsseeccuuttiivvee(*args, **kwargs)
        Eliminates all but the first element from every consecutive group of equivalent elements.
        
        .. note:: This function is different from :func:`torch.unique` in the sense that this function
            only eliminates consecutive duplicate values. This semantics is similar to `std::unique`
            in C++.
        
        Args:
            input (Tensor): the input tensor
            return_inverse (bool): Whether to also return the indices for where
                elements in the original input ended up in the returned unique list.
            return_counts (bool): Whether to also return the counts for each unique
                element.
            dim (int): the dimension to apply unique. If ``None``, the unique of the
                flattened input is returned. default: ``None``
        
        Returns:
            (Tensor, Tensor (optional), Tensor (optional)): A tensor or a tuple of tensors containing
        
                - **output** (*Tensor*): the output list of unique scalar elements.
                - **inverse_indices** (*Tensor*): (optional) if
                  :attr:`return_inverse` is True, there will be an additional
                  returned tensor (same shape as input) representing the indices
                  for where elements in the original input map to in the output;
                  otherwise, this function will only return a single tensor.
                - **counts** (*Tensor*): (optional) if
                  :attr:`return_counts` is True, there will be an additional
                  returned tensor (same shape as output or output.size(dim),
                  if dim was specified) representing the number of occurrences
                  for each unique value or tensor.
        
        Example::
        
            >>> x = torch.tensor([1, 1, 2, 2, 3, 1, 1, 2])
            >>> output = torch.unique_consecutive(x)
            >>> output
            tensor([1, 2, 3, 1, 2])
        
            >>> output, inverse_indices = torch.unique_consecutive(x, return_inverse=True)
            >>> output
            tensor([1, 2, 3, 1, 2])
            >>> inverse_indices
            tensor([0, 0, 1, 1, 2, 3, 3, 4])
        
            >>> output, counts = torch.unique_consecutive(x, return_counts=True)
            >>> output
            tensor([1, 2, 3, 1, 2])
            >>> counts
            tensor([2, 2, 1, 2, 1])
    
    uunnssaaffee__cchhuunnkk(...)
        unsafe_chunk(input, chunks, dim=0) -> List of Tensors
        
        Works like :func:`torch.chunk` but without enforcing the autograd restrictions
        on inplace modification of the outputs.
        
        .. warning::
            This function is safe to use as long as only the input, or only the outputs
            are modified inplace after calling this function. It is user's
            responsibility to ensure that is the case. If both the input and one or more
            of the outputs are modified inplace, gradients computed by autograd will be
            silently incorrect.
    
    uunnssaaffee__sspplliitt(...)
        unsafe_split(tensor, split_size_or_sections, dim=0) -> List of Tensors
        
        Works like :func:`torch.split` but without enforcing the autograd restrictions
        on inplace modification of the outputs.
        
        .. warning::
            This function is safe to use as long as only the input, or only the outputs
            are modified inplace after calling this function. It is user's
            responsibility to ensure that is the case. If both the input and one or more
            of the outputs are modified inplace, gradients computed by autograd will be
            silently incorrect.
    
    uunnssaaffee__sspplliitt__wwiitthh__ssiizzeess(...)
    
    uunnssqquueeeezzee(...)
        unsqueeze(input, dim) -> Tensor
        
        Returns a new tensor with a dimension of size one inserted at the
        specified position.
        
        The returned tensor shares the same underlying data with this tensor.
        
        A :attr:`dim` value within the range ``[-input.dim() - 1, input.dim() + 1)``
        can be used. Negative :attr:`dim` will correspond to :meth:`unsqueeze`
        applied at :attr:`dim` = ``dim + input.dim() + 1``.
        
        Args:
            input (Tensor): the input tensor.
            dim (int): the index at which to insert the singleton dimension
        
        Example::
        
            >>> x = torch.tensor([1, 2, 3, 4])
            >>> torch.unsqueeze(x, 0)
            tensor([[ 1,  2,  3,  4]])
            >>> torch.unsqueeze(x, 1)
            tensor([[ 1],
                    [ 2],
                    [ 3],
                    [ 4]])
    
    uussee__ddeetteerrmmiinniissttiicc__aallggoorriitthhmmss(d)
        Sets whether PyTorch operations must use "deterministic"
        algorithms. That is, algorithms which, given the same input, and when
        run on the same software and hardware, always produce the same output.
        When True, operations will use deterministic algorithms when available,
        and if only nondeterministic algorithms are available they will throw a
        :class:RuntimeError when called.
        
        .. warning::
            This feature is in beta, and its design and implementation may change
            in the future.
        
        The following normally-nondeterministic operations will act
        deterministically when `d=True`:
        
            * :class:`torch.nn.Conv1d` when called on CUDA tensor
            * :class:`torch.nn.Conv2d` when called on CUDA tensor
            * :class:`torch.nn.Conv3d` when called on CUDA tensor
            * :class:`torch.nn.ConvTranspose1d` when called on CUDA tensor
            * :class:`torch.nn.ConvTranspose2d` when called on CUDA tensor
            * :class:`torch.nn.ConvTranspose3d` when called on CUDA tensor
            * :func:`torch.bmm` when called on sparse-dense CUDA tensors
            * :func:`torch.__getitem__` backward when `self` is a CPU tensor and
              ``indices`` is a list of tensors
            * :func:`torch.index_put` with ``accumulate=True`` when called on a CPU
              tensor
        
        The following normally-nondeterministic operations will throw a
        :class:`RuntimeError` when `d=True`:
        
            * :class:`torch.nn.AvgPool3d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.AdaptiveAvgPool2d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.AdaptiveAvgPool3d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.MaxPool3d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.AdaptiveMaxPool2d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.FractionalMaxPool2d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.FractionalMaxPool3d` when called on a CUDA tensor that requires grad
            * :func:`torch.nn.functional.interpolate` when called on a CUDA tensor that requires grad
              and one of the following modes is used:
        
              - `linear`
              - `bilinear`
              - `bicubic`
              - `trilinear`
        
            * :class:`torch.nn.ReflectionPad1d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.ReflectionPad2d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.ReplicationPad1d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.ReplicationPad2d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.ReplicationPad3d` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.NLLLoss` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.CTCLoss` when called on a CUDA tensor that requires grad
            * :class:`torch.nn.EmbeddingBag` when called on a CUDA tensor that requires grad
            * :func:`torch.scatter_add_` when called on a CUDA tensor
            * :func:`torch.index_add_` when called on a CUDA tensor
            * :func:`torch.index_copy`
            * :func:`torch.index_select` when called on a CUDA tensor that requires grad
            * :func:`torch.repeat_interleave` when called on a CUDA tensor that requires grad
            * :func:`torch.histc` when called on a CUDA tensor
            * :func:`torch.bincount` when called on a CUDA tensor
            * :func:`torch.kthvalue` with called on a CUDA tensor
            * :func:`torch.median` with indices output when called on a CUDA tensor
        
        A handful of CUDA operations are nondeterministic if the CUDA version is
        10.2 or greater, unless the environment variable `CUBLAS_WORKSPACE_CONFIG=:4096:8`
        or `CUBLAS_WORKSPACE_CONFIG=:16:8` is set. See the CUDA documentation for more
        details: `<https://docs.nvidia.com/cuda/cublas/index.html#cublasApi_reproducibility>`_
        If one of these environment variable configurations is not set, a :class:`RuntimeError`
        will be raised from these operations when called with CUDA tensors:
        
            * :func:`torch.mm`
            * :func:`torch.mv`
            * :func:`torch.bmm`
        
        Note that deterministic operations tend to have worse performance than
        non-deterministic operations.
        
        Args:
            d (:class:`bool`): If True, force operations to be deterministic.
                               If False, allow non-deterministic operations.
    
    vvaannddeerr(...)
        vander(x, N=None, increasing=False) -> Tensor
        
        Generates a Vandermonde matrix.
        
        The columns of the output matrix are elementwise powers of the input vector :math:`x^{(N-1)}, x^{(N-2)}, ..., x^0`.
        If increasing is True, the order of the columns is reversed :math:`x^0, x^1, ..., x^{(N-1)}`. Such a
        matrix with a geometric progression in each row is named for Alexandre-Theophile Vandermonde.
        
        Arguments:
            x (Tensor): 1-D input tensor.
            N (int, optional): Number of columns in the output. If N is not specified,
                a square array is returned :math:`(N = len(x))`.
            increasing (bool, optional): Order of the powers of the columns. If True,
                the powers increase from left to right, if False (the default) they are reversed.
        
        Returns:
            Tensor: Vandermonde matrix. If increasing is False, the first column is :math:`x^{(N-1)}`,
            the second :math:`x^{(N-2)}` and so forth. If increasing is True, the columns
            are :math:`x^0, x^1, ..., x^{(N-1)}`.
        
        Example::
        
            >>> x = torch.tensor([1, 2, 3, 5])
            >>> torch.vander(x)
            tensor([[  1,   1,   1,   1],
                    [  8,   4,   2,   1],
                    [ 27,   9,   3,   1],
                    [125,  25,   5,   1]])
            >>> torch.vander(x, N=3)
            tensor([[ 1,  1,  1],
                    [ 4,  2,  1],
                    [ 9,  3,  1],
                    [25,  5,  1]])
            >>> torch.vander(x, N=3, increasing=True)
            tensor([[ 1,  1,  1],
                    [ 1,  2,  4],
                    [ 1,  3,  9],
                    [ 1,  5, 25]])
    
    vvaarr(...)
        var(input, unbiased=True) -> Tensor
        
        Returns the variance of all elements in the :attr:`input` tensor.
        
        If :attr:`unbiased` is ``False``, then the variance will be calculated via the
        biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            unbiased (bool): whether to use the unbiased estimation or not
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[-0.3425, -1.2636, -0.4864]])
            >>> torch.var(a)
            tensor(0.2455)
        
        
        .. function:: var(input, dim, unbiased=True, keepdim=False, *, out=None) -> Tensor
        
        Returns the variance of each row of the :attr:`input` tensor in the given
        dimension :attr:`dim`.
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        If :attr:`unbiased` is ``False``, then the variance will be calculated via the
        biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            unbiased (bool): whether to use the unbiased estimation or not
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[-0.3567,  1.7385, -1.3042,  0.7423],
                    [ 1.3436, -0.1015, -0.9834, -0.8438],
                    [ 0.6056,  0.1089, -0.3112, -1.4085],
                    [-0.7700,  0.6074, -0.1469,  0.7777]])
            >>> torch.var(a, 1)
            tensor([ 1.7444,  1.1363,  0.7356,  0.5112])
    
    vvaarr__mmeeaann(...)
        var_mean(input, unbiased=True) -> (Tensor, Tensor)
        
        Returns the variance and mean of all elements in the :attr:`input` tensor.
        
        If :attr:`unbiased` is ``False``, then the variance will be calculated via the
        biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            unbiased (bool): whether to use the unbiased estimation or not
        
        Example::
        
            >>> a = torch.randn(1, 3)
            >>> a
            tensor([[0.0146, 0.4258, 0.2211]])
            >>> torch.var_mean(a)
            (tensor(0.0423), tensor(0.2205))
        
        .. function:: var_mean(input, dim, keepdim=False, unbiased=True) -> (Tensor, Tensor)
        
        Returns the variance and mean of each row of the :attr:`input` tensor in the given
        dimension :attr:`dim`.
        
        
        If :attr:`keepdim` is ``True``, the output tensor is of the same size
        as :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.
        Otherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the
        output tensor having 1 (or ``len(dim)``) fewer dimension(s).
        
        
        If :attr:`unbiased` is ``False``, then the variance will be calculated via the
        biased estimator. Otherwise, Bessel's correction will be used.
        
        Args:
            input (Tensor): the input tensor.
            dim (int or tuple of ints): the dimension or dimensions to reduce.
            keepdim (bool): whether the output tensor has :attr:`dim` retained or not.
            unbiased (bool): whether to use the unbiased estimation or not
        
        Example::
        
            >>> a = torch.randn(4, 4)
            >>> a
            tensor([[-1.5650,  2.0415, -0.1024, -0.5790],
                    [ 0.2325, -2.6145, -1.6428, -0.3537],
                    [-0.2159, -1.1069,  1.2882, -1.3265],
                    [-0.6706, -1.5893,  0.6827,  1.6727]])
            >>> torch.var_mean(a, 1)
            (tensor([2.3174, 1.6403, 1.4092, 2.0791]), tensor([-0.0512, -1.0946, -0.3403,  0.0239]))
    
    vvddoott(...)
        vdot(input, other, *, out=None) -> Tensor
        
        Computes the dot product of two 1D tensors. The vdot(a, b) function handles complex numbers
        differently than dot(a, b). If the first argument is complex, the complex conjugate of the
        first argument is used for the calculation of the dot product.
        
        .. note::
        
            Unlike NumPy's vdot, torch.vdot intentionally only supports computing the dot product
            of two 1D tensors with the same number of elements.
        
        Args:
            input (Tensor): first tensor in the dot product, must be 1D. Its conjugate is used if it's complex.
            other (Tensor): second tensor in the dot product, must be 1D.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> torch.vdot(torch.tensor([2, 3]), torch.tensor([2, 1]))
            tensor(7)
            >>> a = torch.tensor((1 +2j, 3 - 1j))
            >>> b = torch.tensor((2 +1j, 4 - 0j))
            >>> torch.vdot(a, b)
            tensor([16.+1.j])
            >>> torch.vdot(b, a)
            tensor([16.-1.j])
    
    vviieeww__aass__ccoommpplleexx(...)
        view_as_complex(input) -> Tensor
        
        Returns a view of :attr:`input` as a complex tensor. For an input complex
        tensor of :attr:`size` :math:`m1, m2, \dots, mi, 2`, this function returns a
        new complex tensor of :attr:`size` :math:`m1, m2, \dots, mi` where the last
        dimension of the input tensor is expected to represent the real and imaginary
        components of complex numbers.
        
        .. warning::
            :func:`view_as_complex` is only supported for tensors with
            :class:`torch.dtype` ``torch.float64`` and ``torch.float32``.  The input is
            expected to have the last dimension of :attr:`size` 2. In addition, the
            tensor must have a `stride` of 1 for its last dimension. The strides of all
            other dimensions must be even numbers.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
            >>> x=torch.randn(4, 2)
            >>> x
            tensor([[ 1.6116, -0.5772],
                    [-1.4606, -0.9120],
                    [ 0.0786, -1.7497],
                    [-0.6561, -1.6623]])
            >>> torch.view_as_complex(x)
            tensor([(1.6116-0.5772j), (-1.4606-0.9120j), (0.0786-1.7497j), (-0.6561-1.6623j)])
    
    vviieeww__aass__rreeaall(...)
        view_as_real(input) -> Tensor
        
        Returns a view of :attr:`input` as a real tensor. For an input complex tensor of
        :attr:`size` :math:`m1, m2, \dots, mi`, this function returns a new
        real tensor of size :math:`m1, m2, \dots, mi, 2`, where the last dimension of size 2
        represents the real and imaginary components of complex numbers.
        
        .. warning::
            :func:`view_as_real` is only supported for tensors with ``complex dtypes``.
        
        Args:
            input (Tensor): the input tensor.
        
        Example::
            >>> x=torch.randn(4, dtype=torch.cfloat)
            >>> x
            tensor([(0.4737-0.3839j), (-0.2098-0.6699j), (0.3470-0.9451j), (-0.5174-1.3136j)])
            >>> torch.view_as_real(x)
            tensor([[ 0.4737, -0.3839],
                    [-0.2098, -0.6699],
                    [ 0.3470, -0.9451],
                    [-0.5174, -1.3136]])
    
    vvssttaacckk(...)
        vstack(tensors, *, out=None) -> Tensor
        
        Stack tensors in sequence vertically (row wise).
        
        This is equivalent to concatenation along the first axis after all 1-D tensors have been reshaped by :func:`torch.atleast_2d`.
        
        Args:
            tensors (sequence of Tensors): sequence of tensors to concatenate
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> a = torch.tensor([1, 2, 3])
            >>> b = torch.tensor([4, 5, 6])
            >>> torch.vstack((a,b))
            tensor([[1, 2, 3],
                    [4, 5, 6]])
            >>> a = torch.tensor([[1],[2],[3]])
            >>> b = torch.tensor([[4],[5],[6]])
            >>> torch.vstack((a,b))
            tensor([[1],
                    [2],
                    [3],
                    [4],
                    [5],
                    [6]])
    
    wwaaiitt(...) method of builtins.PyCapsule instance
        wait(arg0: torch._C.Future) -> object
    
    wwhheerree(...)
        where(condition, x, y) -> Tensor
        
        Return a tensor of elements selected from either :attr:`x` or :attr:`y`, depending on :attr:`condition`.
        
        The operation is defined as:
        
        .. math::
            \text{out}_i = \begin{cases}
                \text{x}_i & \text{if } \text{condition}_i \\
                \text{y}_i & \text{otherwise} \\
            \end{cases}
        
        .. note::
            The tensors :attr:`condition`, :attr:`x`, :attr:`y` must be :ref:`broadcastable <broadcasting-semantics>`.
        
        .. note::
            Currently valid scalar and tensor combination are
            1. Scalar of floating dtype and torch.double
            2. Scalar of integral dtype and torch.long
            3. Scalar of complex dtype and torch.complex128
        
        Arguments:
            condition (BoolTensor): When True (nonzero), yield x, otherwise yield y
            x (Tensor or Scalar): value (if :attr:x is a scalar) or values selected at indices
                                  where :attr:`condition` is ``True``
            y (Tensor or Scalar): value (if :attr:x is a scalar) or values selected at indices
                                  where :attr:`condition` is ``False``
        
        Returns:
            Tensor: A tensor of shape equal to the broadcasted shape of :attr:`condition`, :attr:`x`, :attr:`y`
        
        Example::
        
            >>> x = torch.randn(3, 2)
            >>> y = torch.ones(3, 2)
            >>> x
            tensor([[-0.4620,  0.3139],
                    [ 0.3898, -0.7197],
                    [ 0.0478, -0.1657]])
            >>> torch.where(x > 0, x, y)
            tensor([[ 1.0000,  0.3139],
                    [ 0.3898,  1.0000],
                    [ 0.0478,  1.0000]])
            >>> x = torch.randn(2, 2, dtype=torch.double)
            >>> x
            tensor([[ 1.0779,  0.0383],
                    [-0.8785, -1.1089]], dtype=torch.float64)
            >>> torch.where(x > 0, x, 0.)
            tensor([[1.0779, 0.0383],
                    [0.0000, 0.0000]], dtype=torch.float64)
        
        .. function:: where(condition) -> tuple of LongTensor
        
        ``torch.where(condition)`` is identical to
        ``torch.nonzero(condition, as_tuple=True)``.
        
        .. note::
            See also :func:`torch.nonzero`.
    
    xxllooggyy(...)
        xlogy(input, other, *, out=None) -> Tensor
        
        Computes ``input * log(other)`` with the following cases.
        
        .. math::
            \text{out}_{i} = \begin{cases}
                \text{NaN} & \text{if } \text{other}_{i} = \text{NaN} \\
                0 & \text{if } \text{input}_{i} = 0.0 \\
                \text{input}_{i} * \log{(\text{other}_{i})} & \text{otherwise}
            \end{cases}
        
        Similar to SciPy's `scipy.special.xlogy`.
        
        
        
        Args:
            input (Number or Tensor)
            other (Number or Tensor)
        
        .. note:: At least one of :attr:`input` or :attr:`other` must be a tensor.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
        
        Example::
        
            >>> x = torch.zeros(5,)
            >>> y = torch.tensor([-1, 0, 1, float('inf'), float('nan')])
            >>> torch.xlogy(x, y)
            tensor([0., 0., 0., 0., nan])
            >>> x = torch.tensor([1, 2, 3])
            >>> y = torch.tensor([3, 2, 1])
            >>> torch.xlogy(x, y)
            tensor([1.0986, 1.3863, 0.0000])
            >>> torch.xlogy(x, 4)
            tensor([1.3863, 2.7726, 4.1589])
            >>> torch.xlogy(2, y)
            tensor([2.1972, 1.3863, 0.0000])
    
    xxllooggyy__(...)
    
    zzeerroo__(...)
    
    zzeerrooss(...)
        zeros(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
        
        Returns a tensor filled with the scalar value `0`, with the shape defined
        by the variable argument :attr:`size`.
        
        Args:
            size (int...): a sequence of integers defining the shape of the output tensor.
                Can be a variable number of arguments or a collection like a list or tuple.
        
        Keyword args:
            out (Tensor, optional): the output tensor.
            dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
                Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
            layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
                Default: ``torch.strided``.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, uses the current device for the default tensor type
                (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
                for CPU tensor types and the current CUDA device for CUDA tensor types.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
        
        Example::
        
            >>> torch.zeros(2, 3)
            tensor([[ 0.,  0.,  0.],
                    [ 0.,  0.,  0.]])
        
            >>> torch.zeros(5)
            tensor([ 0.,  0.,  0.,  0.,  0.])
    
    zzeerrooss__lliikkee(...)
        zeros_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor
        
        Returns a tensor filled with the scalar value `0`, with the same size as
        :attr:`input`. ``torch.zeros_like(input)`` is equivalent to
        ``torch.zeros(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.
        
        .. warning::
            As of 0.4, this function does not support an :attr:`out` keyword. As an alternative,
            the old ``torch.zeros_like(input, out=output)`` is equivalent to
            ``torch.zeros(input.size(), out=output)``.
        
        Args:
            input (Tensor): the size of :attr:`input` will determine size of the output tensor.
        
        Keyword args:
            dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.
                Default: if ``None``, defaults to the dtype of :attr:`input`.
            layout (:class:`torch.layout`, optional): the desired layout of returned tensor.
                Default: if ``None``, defaults to the layout of :attr:`input`.
            device (:class:`torch.device`, optional): the desired device of returned tensor.
                Default: if ``None``, defaults to the device of :attr:`input`.
            requires_grad (bool, optional): If autograd should record operations on the
                returned tensor. Default: ``False``.
            memory_format (:class:`torch.memory_format`, optional): the desired memory format of
                returned Tensor. Default: ``torch.preserve_format``.
        
        Example::
        
            >>> input = torch.empty(2, 3)
            >>> torch.zeros_like(input)
            tensor([[ 0.,  0.,  0.],
                    [ 0.,  0.,  0.]])

DDAATTAA
    AAVVGG = <AggregationType.AVG: 1>
    CCOONNVV__BBNN__FFUUSSIIOONN = <MobileOptimizerType.CONV_BN_FUSION: 0>
    FFUUSSEE__AADDDD__RREELLUU = <MobileOptimizerType.FUSE_ADD_RELU: 3>
    HHOOIISSTT__CCOONNVV__PPAACCKKEEDD__PPAARRAAMMSS = <MobileOptimizerType.HOIST_CONV_PACKED_PARA...
    IINNSSEERRTT__FFOOLLDD__PPRREEPPAACCKK__OOPPSS = <MobileOptimizerType.INSERT_FOLD_PREPACK_OPS...
    RREEMMOOVVEE__DDRROOPPOOUUTT = <MobileOptimizerType.REMOVE_DROPOUT: 2>
    SSUUMM = <AggregationType.SUM: 0>
    ____aallll____ = ['typename', 'is_tensor', 'is_storage', 'set_default_tensor_...
    ____aannnnoottaattiioonnss____ = {'_tensor_classes': typing.Set[torch._C.Type]}
    ddeeffaauulltt__ggeenneerraattoorr = <torch._C.Generator object>
    hhaass__ccuuddaa = True
    hhaass__ccuuddnnnn = True
    hhaass__llaappaacckk = True
    hhaass__mmkkll = True
    hhaass__mmkkllddnnnn = True
    hhaass__ooppeennmmpp = True

VVEERRSSIIOONN
    1.8.1+cu102

FFIILLEE
    /home/richard/.local/lib/python3.8/site-packages/torch/__init__.py

